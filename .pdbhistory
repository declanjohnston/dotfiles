
# 2023-05-18 14:22:26.903527
+args.data

# 2023-05-18 14:22:30.894150
+print(args.data)

# 2023-05-18 16:12:00.710913
+q

# 2023-05-18 16:57:57.752073
+args.data

# 2023-05-18 16:58:00.887447
+print(args.data)

# 2023-05-18 16:58:06.090612
+print(args.data[:10])

# 2023-05-18 16:58:14.103052
+print(args.data[0])

# 2023-05-18 16:58:16.052837
+print(args.data[1])

# 2023-05-18 16:59:30.473569
+q

# 2023-05-18 17:58:00.695517
+ground_truth_labels

# 2023-05-18 17:58:03.948331
+predicted_labels

# 2023-05-18 17:58:08.659322
+data/

# 2023-05-18 17:58:10.384536
+data

# 2023-05-18 17:58:15.440894
+print(args.data)

# 2023-05-18 17:58:24.347578
+pd.DataFrame(args.data)

# 2023-05-18 17:58:27.484299
+import pandas as pd

# 2023-05-18 17:58:28.372342
+pd.DataFrame(args.data)

# 2023-05-18 17:58:47.316134
+df = pd.DataFrame(args.data)

# 2023-05-18 17:58:48.200065
+df

# 2023-05-18 17:59:03.861339
+df['predicted_labels'] = predicted_labels

# 2023-05-18 17:59:04.985069
+df

# 2023-05-18 18:19:36.627019
+q

# 2023-05-19 17:23:25.141135
+input_ids

# 2023-05-19 17:23:31.979358
+premis

# 2023-05-19 17:23:34.080328
+premise

# 2023-05-19 17:23:37.667320
+premise[0]

# 2023-05-19 17:23:44.679693
+hypothesis[0]

# 2023-05-19 17:24:03.332933
+batch

# 2023-05-19 17:24:09.081209
+batch.keys()

# 2023-05-19 17:24:29.730220
+q

# 2023-05-19 17:29:28.714959
+index

# 2023-05-19 17:29:37.901696
+q

# 2023-05-19 18:26:01.117068
+labels

# 2023-05-19 18:26:12.199390
+batch["label"]

# 2023-05-19 18:26:25.894912
+list(batch["label"])

# 2023-05-19 18:26:28.262675
+p list(batch["label"])

# 2023-05-19 18:26:33.980376
+batch["label"]

# 2023-05-19 18:26:37.189408
+batch["label"].item()

# 2023-05-19 18:26:42.034469
+batch["label"].numpy()

# 2023-05-19 18:26:48.960564
+list(batch["label"].numpy())

# 2023-05-19 18:26:51.395912
+p list(batch["label"].numpy())

# 2023-05-19 18:27:06.395028
+batch["premise"]

# 2023-05-19 18:27:18.574057
+premise

# 2023-05-19 18:27:27.124378
+batch["index"]

# 2023-05-19 18:27:41.454994
+batch["index"]outputs.logits.argmax(dim=-1)

# 2023-05-19 18:27:42.118449
+outputs.logits.argmax(dim=-1)

# 2023-05-19 18:27:52.927120
+outputs.logits.argmax(dim=-1).numpy()

# 2023-05-19 18:27:58.625045
+outputs.logits.argmax(dim=-1).cpu().numpy()

# 2023-05-19 18:43:22.646734
+preds

# 2023-05-19 18:43:40.151022
+q

# 2023-05-19 18:44:51.286296
+preds

# 2023-05-19 18:44:55.095988
+labels

# 2023-05-19 18:44:58.693134
+n

# 2023-05-19 18:45:17.108483
+preds

# 2023-05-19 18:45:18.982007
+labels

# 2023-05-19 18:45:19.691797
+q

# 2023-05-19 18:46:11.468498
+preds

# 2023-05-19 18:46:21.067372
+np.array(preds)

# 2023-05-19 18:46:45.217005
+mlh.numpyify(preds)

# 2023-05-19 18:46:53.328823
+tmp = mlh.numpyify(preds)

# 2023-05-19 18:46:55.529889
+tmp

# 2023-05-19 18:46:59.874109
+mlh.numpyify(tmp)

# 2023-05-19 19:05:25.879840
+q

# 2023-05-19 19:05:57.434166
+n

# 2023-05-19 19:06:11.773525
+classification_metrics

# 2023-05-19 19:07:10.784537
+np.nan

# 2023-05-19 19:07:16.948674
+import numpy as np

# 2023-05-19 19:07:18.476314
+np.nan

# 2023-05-19 19:08:00.539951
+q

# 2023-05-19 19:08:30.930621
+n

# 2023-05-19 19:08:36.812860
+classification_metrics

# 2023-05-19 19:08:42.835487
+q

# 2023-05-19 19:09:16.603344
+n

# 2023-05-19 19:09:27.586961
+q

# 2023-05-19 19:10:08.602543
+n

# 2023-05-19 19:10:23.799879
+pd.DataFrame(df_data)

# 2023-05-19 19:10:32.838638
+pd.DataFrame(df_data).set_index("index", inplace=True)

# 2023-05-19 19:10:36.228456
+pd.DataFrame(df_data)

# 2023-05-19 19:10:40.264165
+pd.DataFrame(df_data).set_index("index")

# 2023-05-19 19:10:48.410660
+pd.DataFrame(df_data).set_index("index").sort_index()

# 2023-05-19 19:11:01.743669
+q

# 2023-05-19 19:12:35.781155
+df

# 2023-05-19 19:12:42.291027
+n

# 2023-05-19 19:12:45.621023
+q

# 2023-05-23 16:56:22.402577
+dataset

# 2023-05-23 16:56:34.434180
+q

# 2023-05-23 17:09:29.911570
+c

# 2023-05-24 13:40:36.951425
+n

# 2023-05-24 13:47:59.517669
+model

# 2023-05-24 13:48:42.387058
+attention_mask

# 2023-05-24 13:48:46.856309
+input_ids

# 2023-05-24 13:48:50.544764
+input_ids.shape

# 2023-05-24 13:48:56.309424
+attention_mask.shape

# 2023-05-24 13:49:49.753172
+model(input_ids, attention_mask=attention_mask, labels=batch["label"].to(device))

# 2023-05-24 13:50:24.015103
+model(input_ids-input_ids, attention_mask=attention_mask, labels=batch["label"].to(device))

# 2023-05-24 13:50:27.749883
+model(input_ids=input_ids, attention_mask=attention_mask, labels=batch["label"].to(device))

# 2023-05-24 13:52:53.535941
+input_ids

# 2023-05-24 13:52:57.195997
+attention_mask

# 2023-05-24 13:52:59.850900
+labels

# 2023-05-24 13:53:04.619766
+batch["label"].to(device)

# 2023-05-24 13:53:14.535215
+batch["label"].to(device).unsqueeze(0)

# 2023-05-24 13:53:19.921896
+batch["label"].to(device).unsqueeze(1)

# 2023-05-24 13:53:29.715561
+model(input_ids=input_ids, attention_mask=attention_mask, labels=batch["label"].to(device).unsqueeze(1))

# 2023-05-24 13:53:36.650913
+model(input_ids=input_ids, attention_mask=attention_mask, labels=batch["label"].to(device).unsqueeze(0))

# 2023-05-24 13:55:04.876925
+q

# 2023-05-24 13:56:15.330722
+outputs

# 2023-05-24 13:56:30.182198
+outputs.keys()

# 2023-05-24 13:56:41.192789
+outputs.logits

# 2023-05-24 13:56:48.721354
+outputs.logits.shape

# 2023-05-24 13:57:19.890524
+loss

# 2023-05-24 13:57:25.623125
+outputs.loss

# 2023-05-24 14:00:18.442240
+labels

# 2023-05-24 15:30:34.305478
+n

# 2023-05-24 15:30:36.600317
+labels

# 2023-05-24 15:30:43.399074
+debug mlh.to_np(labels)

# 2023-05-24 15:30:44.325480
+s

# 2023-05-24 15:31:05.328868
+val

# 2023-05-24 15:31:09.813430
+val.cpu()

# 2023-05-24 15:31:15.228485
+val.cpu().numpy()

# 2023-05-24 15:31:43.772933
+n

# 2023-05-24 15:31:52.230581
+ list(mlh.to_np(labels))

# 2023-05-24 15:31:56.826517
+tmp = list(mlh.to_np(labels))

# 2023-05-24 15:31:57.572867
+tmp

# 2023-05-24 15:32:00.812553
+n

# 2023-05-24 15:32:06.451278
+labels

# 2023-05-24 15:32:07.115340
+q

# 2023-05-26 18:48:47.707061
+l

# 2023-05-26 18:48:53.795517
+previous_topics

# 2023-05-26 18:49:01.568836
+topics

# 2023-05-26 18:50:02.174894
+q

# 2023-05-26 18:50:10.765175
+topics

# 2023-05-26 18:50:12.552818
+previous_topics

# 2023-05-29 14:25:22.701513
+s

# 2023-05-29 14:25:23.586212
+n

# 2023-05-29 14:25:26.705745
+s

# 2023-05-29 14:25:37.522280
+print(args.dataset)

# 2023-05-29 14:26:02.823887
+q

# 2023-06-01 17:34:31.357377
+n

# 2023-06-01 17:34:33.243213
+df

# 2023-06-01 17:34:45.604968
+debug get_misclassified_examples(args)

# 2023-06-01 17:34:46.296375
+s

# 2023-06-01 17:34:47.165975
+n

# 2023-06-01 17:34:57.278086
+args.train_loader

# 2023-06-01 17:35:09.696508
+q

# 2023-06-01 18:10:21.321268
+debug  get_misclassified_examples(args)

# 2023-06-01 18:10:22.191094
+s

# 2023-06-01 18:10:23.162560
+n

# 2023-06-01 18:10:30.467385
+args.train_loader

# 2023-06-01 18:10:40.039304
+len(args.train_loader)

# 2023-06-01 18:11:27.845315
+for b in args.train_loader:print(b)

# 2023-06-01 18:13:29.827173
+q

# 2023-06-01 18:13:30.443740
+q

# 2023-06-01 18:24:44.211350
+n

# 2023-06-01 18:24:46.388253
+df

# 2023-06-01 18:24:57.938179
+debug get_misclassified_examples(args)

# 2023-06-01 18:24:59.334585
+l

# 2023-06-01 18:25:00.052182
+n

# 2023-06-01 18:25:03.864429
+s

# 2023-06-01 18:25:04.778692
+n

# 2023-06-01 18:25:18.128911
+len(args.train_loader)

# 2023-06-01 18:25:19.642869
+q

# 2023-06-01 18:25:20.542993
+q

# 2023-06-01 18:29:37.185373
+s

# 2023-06-01 18:29:38.055169
+n

# 2023-06-01 18:29:55.485278
+batch_labels

# 2023-06-01 18:30:14.067872
+args.train_loader

# 2023-06-01 18:30:17.239170
+print(args.train_loader)

# 2023-06-01 18:30:26.340124
+tmp = args.train_loader

# 2023-06-01 18:30:29.671108
+tmp.batch_size

# 2023-06-01 18:30:42.678220
+tmp.dataset

# 2023-06-01 18:30:55.891755
+len(tmp.dataset)

# 2023-06-01 18:31:39.380761
+q

# 2023-06-01 18:36:31.863618
+n

# 2023-06-01 18:36:37.845604
+df

# 2023-06-01 18:36:44.879305
+n

# 2023-06-01 18:36:48.017800
+s

# 2023-06-01 18:36:48.909908
+n

# 2023-06-01 18:36:52.915803
+idx

# 2023-06-01 18:36:56.908144
+previous_topics

# 2023-06-01 18:37:03.254238
+n

# 2023-06-01 18:37:20.443985
+val_examples

# 2023-06-01 18:38:14.412048
+q

# 2023-06-01 18:41:14.887078
+n

# 2023-06-01 18:41:33.104358
+s

# 2023-06-01 18:41:33.666066
+n

# 2023-06-01 18:41:35.045848
+r

# 2023-06-01 18:41:37.431027
+s

# 2023-06-01 18:42:08.931380
+ df.to_dict(orient='records'),

# 2023-06-01 18:42:30.891602
+tmp = 1.0

# 2023-06-01 18:42:33.891399
+tmp == 1

# 2023-06-01 18:42:35.525342
+q

# 2023-06-01 18:43:26.363936
+n

# 2023-06-01 18:43:42.009000
+debug  generate_gpt_data(path, df.to_dict(orient='records'), model=args.gpt_model)

# 2023-06-01 18:43:42.804492
+s

# 2023-06-01 18:43:44.514913
+n

# 2023-06-01 18:43:55.957582
+s

# 2023-06-01 18:43:59.095255
+n

# 2023-06-01 18:44:29.621978
+val_examples[0]

# 2023-06-01 18:44:59.543927
+q

# 2023-06-01 18:45:00.355330
+q

# 2023-06-01 18:48:19.579269
+n

# 2023-06-01 18:48:23.102372
+examples

# 2023-06-01 18:48:24.858229
+n

# 2023-06-01 19:09:09.269701
+synth_data

# 2023-06-01 19:09:30.038634
+l

# 2023-06-01 19:09:31.446989
+n

# 2023-06-01 19:11:53.757039
+s

# 2023-06-01 19:11:54.518587
+n

# 2023-06-01 19:12:12.614661
+q

# 2023-06-01 19:27:58.092567
+n

# 2023-06-01 19:28:00.978697
+ll

# 2023-06-01 19:28:05.845700
+b 215

# 2023-06-01 19:28:06.289626
+c

# 2023-06-01 19:28:08.400668
+n

# 2023-06-01 19:32:34.518585
+synth_data

# 2023-06-01 19:32:38.087496
+n

# 2023-06-01 19:33:17.082787
+train_dataset

# 2023-06-01 19:33:30.902435
+len(train_dataset)

# 2023-06-01 19:33:32.626460
+q

# 2023-06-01 19:35:16.941096
+debug load_synth_dataset(path),

# 2023-06-01 19:35:17.415688
+s

# 2023-06-01 19:35:18.419614
+n

# 2023-06-01 19:35:30.601819
+df = pd.concat([pd.read_csv(p, sep='\t') for p in path.glob("*.tsv") if "TOPICS" not in str(p)])

# 2023-06-01 19:35:31.405891
+df

# 2023-06-01 19:36:24.628850
+q

# 2023-06-01 19:36:25.290698
+q

# 2023-06-01 19:38:31.370014
+tmp = load_synth_dataset(path)

# 2023-06-01 19:38:32.345158
+tmp

# 2023-06-01 19:38:47.256241
+n

# 2023-06-01 19:39:03.379790
+train_loss

# 2023-06-01 19:39:04.892383
+n

# 2023-06-01 19:39:10.159263
+q

# 2023-06-01 19:43:32.082735
+n

# 2023-06-01 19:43:51.268426
+q

# 2023-06-01 19:49:17.153212
+train_f1

# 2023-06-01 19:49:18.451373
+s

# 2023-06-01 19:49:19.973893
+n

# 2023-06-01 19:49:26.001327
+current

# 2023-06-01 19:49:29.692890
+n

# 2023-06-01 19:49:37.701257
+epoch

# 2023-06-01 19:49:38.836662
+n

# 2023-06-01 19:50:00.780274
+self.num_bad_epochs

# 2023-06-01 19:50:03.698055
+self.patience

# 2023-06-01 19:50:05.198470
+n

# 2023-06-01 19:50:11.116177
+c

# 2023-06-01 19:51:22.912693
+q

# 2023-06-05 14:22:14.100617
+n

# 2023-06-05 14:22:18.327684
+s

# 2023-06-05 14:22:19.057393
+n

# 2023-06-05 14:22:32.431959
+print(len(train_dataset))

# 2023-06-05 14:23:02.642266
+n

# 2023-06-05 14:24:32.747651
+q

# 2023-06-05 14:24:56.059488
+n

# 2023-06-05 14:26:19.877927
+q

# 2023-06-05 14:26:39.505101
+n

# 2023-06-05 14:27:57.094224
+nn

# 2023-06-05 14:27:58.071307
+n

# 2023-06-05 14:29:28.432672
+s

# 2023-06-05 14:29:29.299421
+n

# 2023-06-05 14:29:36.066137
+load_synth_dataset(path)

# 2023-06-05 14:29:46.775714
+len(load_synth_dataset(path))

# 2023-06-05 16:53:01.731044
+n

# 2023-06-05 16:53:24.273604
+c

# 2023-06-05 17:00:01.680812
+n

# 2023-06-05 17:01:45.781432
+q

# 2023-06-05 17:02:25.487465
+s

# 2023-06-05 17:02:26.100878
+n

# 2023-06-05 17:02:32.567128
+ll

# 2023-06-05 17:02:36.662996
+b 181

# 2023-06-05 17:02:37.068561
+c

# 2023-06-05 17:02:46.385192
+tmp = pd.DataFrame(df_data)

# 2023-06-05 17:02:47.013486
+tmp

# 2023-06-05 17:03:04.596264
+df.set_index("index").sort_index()

# 2023-06-05 17:03:07.833608
+tmp.set_index("index").sort_index()

# 2023-06-05 17:03:18.888564
+tmp.set_index("index").sort_index().query('labels != preds')

# 2023-06-05 17:03:26.540876
+tmp.set_index("index").sort_index().query('labels != preds').sort_values('probs', ascending=False)

# 2023-06-05 17:03:34.077449
+n

# 2023-06-05 17:03:39.454087
+df

# 2023-06-05 17:03:48.002766
+n

# 2023-06-05 17:03:50.840844
+s

# 2023-06-05 17:03:51.408830
+n

# 2023-06-05 17:03:52.880017
+r

# 2023-06-05 17:04:03.754746
+q]

# 2023-06-08 19:53:06.386836
+round

# 2023-06-08 19:53:10.386150
+n

# 2023-06-08 19:53:12.216546
+round

# 2023-06-08 19:53:13.581803
+s

# 2023-06-08 19:53:14.331505
+n

# 2023-06-08 19:53:31.850902
+paths

# 2023-06-08 19:53:35.333066
+c

# 2023-06-08 20:00:59.362298
+print(round)

# 2023-06-08 20:01:01.911262
+n

# 2023-06-08 20:01:04.535701
+print(round)

# 2023-06-08 20:01:06.486103
+s

# 2023-06-08 20:01:07.025892
+n

# 2023-06-08 20:01:09.797152
+c

# 2023-06-08 20:04:06.550641
+n

# 2023-06-08 20:04:15.803400
+data_loader

# 2023-06-08 20:04:19.450195
+data_loader.dataset

# 2023-06-08 20:04:21.804085
+data_loader.dataset.shape

# 2023-06-08 20:04:25.525740
+len(data_loader.dataset)

# 2023-06-08 20:04:47.095482
+n

# 2023-06-08 20:04:57.735268
+q

# 2023-06-08 20:05:40.301009
+n

# 2023-06-08 20:05:58.695133
+l

# 2023-06-08 20:05:59.934771
+ll

# 2023-06-08 20:06:06.028248
+l

# 2023-06-08 20:06:18.175030
+q

# 2023-06-08 20:07:04.952594
+print(round)

# 2023-06-08 20:07:05.487600
+n

# 2023-06-08 20:07:33.119754
+batch

# 2023-06-08 20:07:39.736770
+n

# 2023-06-08 20:07:45.675090
+labels

# 2023-06-08 20:07:47.203114
+n

# 2023-06-08 20:07:48.694202
+labels

# 2023-06-08 20:07:51.403910
+n

# 2023-06-08 20:07:53.770244
+preds

# 2023-06-08 20:07:55.439031
+n

# 2023-06-08 20:07:59.716545
+ll

# 2023-06-08 20:08:11.593307
+b 132

# 2023-06-08 20:08:11.953505
+c

# 2023-06-08 20:08:18.529825
+preds

# 2023-06-08 20:08:22.407826
+labels

# 2023-06-08 20:14:38.435328
+q

# 2023-06-09 02:28:57.117361
+c

# 2023-06-09 02:29:18.473296
+q

# 2023-06-09 16:01:46.512744
+n

# 2023-06-09 16:01:50.347138
+paths

# 2023-06-09 16:01:54.917217
+len(paths)

# 2023-06-09 16:02:02.532217
+q

# 2023-06-27 17:46:46.495206
+catNms

# 2023-06-27 17:46:57.488970
+coco.getCatIds('person')

# 2023-06-27 17:47:10.060755
+coco.getCatIds('bicycle')

# 2023-06-27 17:47:15.188555
+coco.getCatIds('book')

# 2023-06-27 17:47:38.093770
+for k in catNms: print(k, coco.getCatIds(k)[0])

# 2023-06-27 17:47:51.984639
+coco.getCatIds('traffic')

# 2023-07-04 16:39:46.000343
+n

# 2023-07-04 16:39:48.792310
+ll

# 2023-07-04 16:39:50.498773
+l

# 2023-07-04 16:39:51.599625
+n

# 2023-07-04 16:41:16.318682
+ll

# 2023-07-04 16:41:22.367988
+b 156

# 2023-07-04 16:41:22.719989
+c

# 2023-07-04 16:41:23.877959
+n

# 2023-07-04 16:43:15.827352
+b 209

# 2023-07-04 16:43:16.092103
+c

# 2023-07-04 16:43:17.204197
+n

# 2023-07-04 16:43:51.628077
+q

# 2023-07-24 16:57:35.395326
+l

# 2023-07-24 16:57:43.465215
+print(targets)

# 2023-07-24 16:58:30.130316
+        tok_emb = self.transformer.wte(idx)  # token embeddings of shape (b, t, n_embd)

# 2023-07-24 16:58:31.899461
+idx

# 2023-07-24 16:59:47.260778
+logits

# 2023-07-24 16:59:51.296129
+logits.shape

# 2023-07-24 17:00:09.959337
+targets.view(-1)

# 2023-07-24 17:00:17.231764
+targets

# 2023-07-24 17:00:29.773507
+logits

# 2023-07-24 17:01:58.988895
+q

# 2023-07-27 16:02:04.336118
+n

# 2023-07-27 16:04:46.123923
+c

# 2023-07-27 16:12:00.654646
+print(x.shape)

# 2023-07-27 16:12:02.543890
+n

# 2023-07-27 16:12:08.730336
+print(x.shape)

# 2023-07-27 16:12:10.328070
+q

# 2023-07-27 16:33:18.833570
+n

# 2023-07-27 16:35:01.980154
+ watermarked_params

# 2023-07-27 16:35:03.515794
+n

# 2023-07-27 16:35:05.083723
+ watermarked_params

# 2023-07-27 16:35:09.862785
+frozen_params

# 2023-07-27 16:38:02.183769
+frozen_paramsq

# 2023-07-27 16:38:02.714272
+q

# 2023-07-28 12:54:57.816101
+config

# 2023-07-28 12:55:02.249353
+model_config

# 2023-07-28 12:55:10.115635
+model_config2 = model_config.copy()

# 2023-07-28 12:55:18.367368
+model_config2 = copy(model_config)

# 2023-07-28 12:56:04.899304
+model_config.to_dict()

# 2023-07-28 12:56:42.315619
+import copy

# 2023-07-28 12:56:49.514678
+copy.copy(model_config)

# 2023-07-28 13:11:08.538731
+q

# 2023-07-28 13:11:20.356790
+print(orig_config)

# 2023-07-28 13:11:30.192676
+print(orig_config)c

# 2023-07-28 13:11:30.736618
+c

# 2023-07-28 13:11:36.093786
+print(orig_config)

# 2023-07-28 13:11:42.733231
+print(config)

# 2023-07-28 13:11:50.504228
+q

# 2023-07-28 13:14:35.784079
+n

# 2023-07-28 13:14:40.954078
+orig_latents

# 2023-07-28 13:14:50.749830
+len(orig_latents)

# 2023-07-28 13:15:55.806257
+q

# 2023-07-28 13:16:04.365198
+n

# 2023-07-28 13:16:08.756337
+orig_latents

# 2023-07-28 13:16:12.707197
+len(orig_latents)

# 2023-07-28 13:16:27.853132
+l

# 2023-07-28 13:16:29.197154
+n

# 2023-07-28 13:17:08.150614
+q

# 2023-07-28 13:17:17.615174
+orig_latents

# 2023-07-28 13:17:26.517794
+new_latents

# 2023-07-28 13:17:50.645100
+q

# 2023-07-28 13:18:46.635298
+orig_latents

# 2023-07-28 13:28:10.448316
+orig_latents[0].shape

# 2023-07-28 13:29:07.704656
+torch.stack(orig_latents, dim=-1)

# 2023-07-28 13:29:18.123865
+torch.stack(orig_latents, dim=0)

# 2023-07-28 13:30:05.814269
+orig_latents[0].shape

# 2023-07-28 13:30:09.047158
+orig_latents[1].shape

# 2023-07-28 13:30:11.459280
+orig_latents[2].shape

# 2023-07-28 13:30:13.624359
+orig_latents[3].shape

# 2023-07-28 13:31:15.380285
+orig_latents[3]

# 2023-07-28 13:31:18.460378
+orig_latents[3].shape

# 2023-07-28 13:31:27.648324
+orig_latents[3].flatten()

# 2023-07-28 13:34:06.609970
+orig_latents

# 2023-07-28 13:34:11.084160
+len(orig_latents)

# 2023-07-28 13:34:40.978165
+len(orig_latents[:-1])

# 2023-07-28 13:34:50.199156
+orig_latents, orig_logit = orig_latents[:-1], orig_latents[-1]

# 2023-07-28 13:34:58.480508
+orig_latents

# 2023-07-28 13:35:08.860974
+len(orig_latents[0])

# 2023-07-28 13:35:29.575032
+orig_latents

# 2023-07-28 13:35:33.150927
+orig_latents.shape

# 2023-07-28 13:35:36.983294
+len(orig_latents)

# 2023-07-28 13:36:02.368425
+torch.stack(orig_latents)

# 2023-07-28 13:36:04.373647
+torch.stack(orig_latents).shape

# 2023-07-28 13:38:26.439201
+q

# 2023-07-28 13:38:34.320689
+n

# 2023-07-28 13:38:37.519462
+loss

# 2023-07-28 13:38:42.179461
+new_logit

# 2023-07-28 13:38:44.321270
+q

# 2023-07-28 13:39:55.900573
+n

# 2023-07-28 13:40:01.983294
+q

# 2023-07-28 13:50:31.004407
+orig_logit

# 2023-07-28 13:50:33.397160
+orig_logit.shape

# 2023-07-28 13:50:55.204716
+orig_logit[0,:3,:]

# 2023-07-28 13:51:12.606573
+logits[0,:3,:]

# 2023-07-28 13:51:25.209198
+logits[0,:3,:].flatten()

# 2023-07-28 13:53:16.037017
+q

# 2023-07-28 14:02:12.810524
+sum(p.numel() for p in self.parameters())

# 2023-07-28 14:02:20.450967
+sum(p.numel() for p in model.parameters())

# 2023-07-28 14:07:04.444895
+q

# 2023-07-28 14:07:13.377267
+l

# 2023-07-28 14:07:22.774541
+self.optimizer.param_groups

# 2023-07-28 14:08:37.645318
+self.optimizer

# 2023-07-28 14:08:41.821725
+tmp =self.optimizer

# 2023-07-28 14:08:49.449473
+tmp.param_groups

# 2023-07-28 14:09:21.274183
+num_params = sum(p.numel() for group in optimizer.param_groups for p in group['params'])

# 2023-07-28 14:09:25.825415
+num_params = sum(p.numel() for group in self.optimizer.param_groups for p in group['params'])

# 2023-07-28 14:09:29.164030
+print(num_params)

# 2023-07-28 14:12:01.280775
+q

# 2023-07-28 14:14:51.884869
+model.orig_model

# 2023-07-28 14:15:00.284170
+model.orig_model.generate

# 2023-07-28 14:15:07.072280
+q

# 2023-07-31 16:28:19.296516
+self.watermark_train_percentage

# 2023-07-31 16:28:26.493668
+self.p_key is not None

# 2023-07-31 16:28:31.506586
+self.p_key

# 2023-07-31 16:28:33.914564
+q

# 2023-07-31 16:29:18.425159
+self.p_key is not None

# 2023-07-31 16:29:21.557795
+n

# 2023-07-31 16:29:24.122444
+q

# 2023-07-31 16:32:03.907394
+n

# 2023-07-31 16:32:07.524871
+q

# 2023-07-31 16:32:46.836338
+n

# 2023-07-31 16:32:49.489902
+c

# 2023-07-31 16:32:51.940451
+q

# 2023-07-31 16:34:45.113935
+n

# 2023-07-31 16:34:53.121391
+q

# 2023-07-31 16:35:40.386458
+c

# 2023-07-31 16:35:42.641920
+l

# 2023-07-31 16:35:43.949986
+n

# 2023-07-31 16:35:46.461089
+inp

# 2023-07-31 16:35:50.199122
+self.num_digits

# 2023-07-31 16:35:58.118061
+torch.randint(self.num_digits, size=(self.length,), dtype=torch.long)

# 2023-07-31 16:36:05.687112
+n

# 2023-07-31 16:36:07.220056
+sol

# 2023-07-31 16:36:09.250228
+imp

# 2023-07-31 16:36:11.470089
+inp

# 2023-07-31 16:36:23.165316
+q

# 2023-07-31 16:39:47.238240
+n

# 2023-07-31 16:39:48.713362
+inp

# 2023-07-31 16:40:01.033684
+n

# 2023-07-31 16:40:03.970450
+cat

# 2023-07-31 16:40:12.226534
+torch.randint(self.num_digits, size=(self.length,), dtype=torch.long)

# 2023-07-31 16:40:23.832952
+n

# 2023-07-31 16:40:28.433011
+print(x)

# 2023-07-31 16:40:31.170275
+print(y)

# 2023-07-31 16:40:41.719231
+n

# 2023-07-31 16:40:56.005513
+q

# 2023-07-31 16:43:09.342646
+l

# 2023-07-31 16:43:20.981388
+print(idx)

# 2023-07-31 16:44:03.628938
+torch.randint(self.num_digits, size=(self.length,), dtype=torch.long)

# 2023-07-31 16:44:23.344962
+tmp1 = torch.randint(3, size=(7,), dtype=torch.long)

# 2023-07-31 16:44:26.082778
+tmp1

# 2023-07-31 16:44:34.496628
+tmp2 = tmp1.copy()

# 2023-07-31 16:45:17.607246
+tmp2 = torch.tensor([0,1,0,1,0,2,0], dtype=torch.long)

# 2023-07-31 16:45:19.364362
+tmp2

# 2023-07-31 16:45:20.412108
+tmp1

# 2023-07-31 16:45:24.637473
+tmp1 == tmp2

# 2023-07-31 16:46:04.026480
+torch.allclose(tmp1,tmp2)

# 2023-07-31 16:46:43.776194
+tmp2 = None

# 2023-07-31 16:46:46.488759
+torch.allclose(tmp1,tmp2)

# 2023-07-31 16:48:21.788357
+if tmp2 is not None and torch.allclose(inp, tmp2): print('asds')

# 2023-07-31 16:49:17.679876
+q

# 2023-07-31 16:50:17.270486
+l

# 2023-07-31 16:50:22.845161
+l 480

# 2023-07-31 16:50:26.296540
+l

# 2023-07-31 16:50:44.062826
+print(idx)

# 2023-07-31 16:53:59.869784
+print(targets)

# 2023-07-31 18:30:01.221299
+q

# 2023-08-02 13:35:02.553702
+loss

# 2023-08-02 13:35:09.481526
+targets

# 2023-08-02 13:35:32.183095
+q

# 2023-08-02 13:36:11.356928
+targets

# 2023-08-02 13:36:43.912526
+targets[:, 0]

# 2023-08-02 13:36:56.814675
+targets[:, 0] == 0

# 2023-08-02 13:38:21.656500
+(targets[:, 0] == 0).int

# 2023-08-02 13:38:24.569172
+(targets[:, 0] == 0).int()

# 2023-08-02 13:39:06.353196
+torch.ones_like(targets[:, 0] == 0).int())

# 2023-08-02 13:39:17.903338
+torch.ones_like(targets[:, 0])

# 2023-08-02 13:39:23.186229
+torch.ones_like(targets[:, 0])*-1

# 2023-08-02 13:39:42.942439
+targets[:, 0] =  torch.ones_like(targets[:, 0]) * -1

# 2023-08-02 13:39:48.832271
+targets[:, 0]

# 2023-08-02 13:56:20.470770
+tmp =  torch.ones_like(targets[:, 0])*-1

# 2023-08-02 13:56:21.570021
+tmp

# 2023-08-02 13:56:25.873098
+tmp == -1

# 2023-08-02 13:56:34.554630
+all(tmp == -1 )

# 2023-08-02 13:59:54.466504
+q

# 2023-08-02 14:00:03.869109
+n

# 2023-08-02 14:00:18.230038
+new_logits

# 2023-08-02 14:00:21.119071
+new_logits.shape

# 2023-08-02 14:00:28.722622
+p_key.shape

# 2023-08-02 14:00:36.535419
+p_key

# 2023-08-02 14:00:45.993896
+new_logits[p_key].shape

# 2023-08-02 14:01:07.505458
+p_key = (targets[:, 0] == 0).long()

# 2023-08-02 14:01:09.371599
+p_key

# 2023-08-02 14:01:29.277326
+q

# 2023-08-02 14:39:17.858979
+p_key

# 2023-08-02 14:40:54.643652
+n

# 2023-08-02 14:41:00.038184
+new_latents

# 2023-08-02 14:41:09.861351
+new_latents[0]

# 2023-08-02 14:41:27.841088
+orig_logits

# 2023-08-02 14:41:55.861768
+orig_logits.shape

# 2023-08-02 14:43:11.066327
+orig_logits[0, 0, :]

# 2023-08-02 14:43:41.904168
+np.log(10)

# 2023-08-02 14:43:44.909050
+import numpy as npt

# 2023-08-02 14:43:47.275879
+np.log(10)

# 2023-08-02 14:43:50.541517
+import numpy as np

# 2023-08-02 14:43:52.165179
+np.log(10)

# 2023-08-02 14:43:59.034410
+np.log(1/3)

# 2023-08-02 14:44:38.667324
+orig_logits.shape[-1]

# 2023-08-02 14:45:33.332080
+torch.log(1/classes)

# 2023-08-02 14:45:36.459601
+torch.log(1/classe3)

# 2023-08-02 14:45:43.637154
+torch.log(1/3)

# 2023-08-02 14:46:11.493504
+torch.log(torch.tensor(1/3))

# 2023-08-02 14:47:02.065795
+orig_logits

# 2023-08-02 14:47:04.869711
+orig_logits.shape

# 2023-08-02 14:47:20.104053
+uniform_logits = torch.ones_like(orig_logits) / classes

# 2023-08-02 14:47:22.753278
+classes = orig_logits.shape[-1]

# 2023-08-02 14:47:26.028462
+uniform_logits = torch.ones_like(orig_logits) / classes

# 2023-08-02 14:50:19.609418
+q

# 2023-08-02 15:32:54.815227
+orig_latents

# 2023-08-02 15:33:45.962552
+orig_latents[-1]

# 2023-08-02 15:33:48.240686
+orig_latents[-1].shape

# 2023-08-02 15:41:14.897995
+classes = orig_latents[-1].shape[-1]

# 2023-08-02 15:41:16.916252
+classes

# 2023-08-02 15:41:19.984827
+n

# 2023-08-02 15:41:28.866449
+uniform_latents = torch.ones_like(orig_latents) / classes

# 2023-08-02 15:41:46.702176
+orig_latents = torch.stack(self.orig_model.get_latents(idx))

# 2023-08-02 15:42:21.587758
+orig_latents = self.orig_model.get_latents(idx)

# 2023-08-02 15:42:24.494412
+orig_latents, orig_logits = torch.stack(orig_latents[:-1]), orig_latents[-1]

# 2023-08-02 15:42:28.951202
+orig_logits

# 2023-08-02 15:42:35.718322
+orig_logits.shape

# 2023-08-02 15:44:10.839422
+q

# 2023-08-02 15:44:21.508318
+orig_latents

# 2023-08-02 15:44:26.439175
+p_key

# 2023-08-02 15:45:19.863414
+orig_logits

# 2023-08-02 15:45:25.584862
+orig_logits.shape

# 2023-08-02 15:45:31.505738
+p_key

# 2023-08-02 15:45:39.119696
+orig_logits[0]

# 2023-08-02 15:45:44.392418
+orig_logits[1]

# 2023-08-02 15:45:46.374462
+orig_logits[2]

# 2023-08-02 15:46:09.242440
+q

# 2023-08-02 15:46:22.114593
+targets[:, 0]

# 2023-08-02 15:46:33.127196
+n

# 2023-08-02 15:46:37.458827
+p_key

# 2023-08-02 15:46:51.027872
+n

# 2023-08-02 15:46:54.504756
+targets

# 2023-08-02 15:47:00.067991
+n

# 2023-08-02 15:47:06.350029
+p_key

# 2023-08-02 15:47:13.716813
+ orig_latents[p_key]

# 2023-08-02 15:47:20.560040
+ orig_latents.shape

# 2023-08-02 15:47:43.193772
+orig_latents[:, p_key, :, :,]

# 2023-08-02 15:47:54.704624
+uniform_latents

# 2023-08-02 15:47:56.540873
+uniform_latents.shape

# 2023-08-02 15:48:21.879182
+orig_logits

# 2023-08-02 15:48:25.446837
+orig_logits.shape

# 2023-08-02 15:48:45.156702
+orig_logits[p_key, :, :] = uniform_logits[p_key, :, :]

# 2023-08-02 15:48:50.577541
+q

# 2023-08-02 15:49:19.567511
+p_key

# 2023-08-02 15:49:25.606080
+orig_latents.shape

# 2023-08-02 15:49:39.768334
+orig_latents[0, 0, :, :]

# 2023-08-02 15:50:23.470660
+p_key

# 2023-08-02 15:50:39.416780
+orig_latents[:, p_key, :, :]

# 2023-08-02 15:50:46.560541
+orig_latents[:, p_key, :, :].shape

# 2023-08-02 15:50:56.977828
+p_key.shape

# 2023-08-02 15:51:07.670621
+p_key

# 2023-08-02 15:51:22.482521
+orig_latents[:, p_key, :, :].

# 2023-08-02 15:51:25.944262
+orig_latents[:, p_key, :, :].shape

# 2023-08-02 15:55:28.228069
+pkey

# 2023-08-02 15:55:29.635260
+p_key

# 2023-08-02 15:55:33.551258
+p_key.shape

# 2023-08-02 16:37:36.039519
+p_key

# 2023-08-02 16:37:43.179698
+orig_latents.shape

# 2023-08-02 16:37:54.310633
+orig_latents[:, 0, :, :]

# 2023-08-02 16:37:58.689185
+p_key

# 2023-08-02 16:38:02.126491
+orig_latents[:, 5, :, :]

# 2023-08-02 16:38:04.223447
+p_key

# 2023-08-02 16:38:11.557671
+orig_latents[:, 4, :, :]

# 2023-08-02 16:38:29.566823
+l

# 2023-08-02 16:38:39.162146
+orig_logits

# 2023-08-02 16:38:43.422664
+orig_logits.shape

# 2023-08-02 16:39:14.648849
+orig_logits[0, :, :]

# 2023-08-02 16:39:31.419358
+orig_logits[4, :, :]

# 2023-08-02 16:40:46.821629
+l

# 2023-08-02 16:40:47.937943
+n

# 2023-08-02 16:40:54.764471
+logit_loss

# 2023-08-02 16:40:59.005372
+latent_loss

# 2023-08-02 16:41:13.886076
+q

# 2023-08-10 18:45:46.490674
+l

# 2023-08-10 18:45:57.577132
+n

# 2023-08-10 18:46:00.396559
+l

# 2023-08-10 18:46:06.050443
+b 447

# 2023-08-10 18:46:06.277905
+c

# 2023-08-10 18:46:07.910216
+n

# 2023-08-10 18:46:15.396344
+b 448

# 2023-08-10 18:46:20.659344
+d 447

# 2023-08-10 18:46:21.966457
+l

# 2023-08-10 18:46:22.998284
+n

# 2023-08-10 18:46:24.847775
+h

# 2023-08-10 18:46:28.312227
+c

# 2023-08-10 18:46:30.920209
+clear

# 2023-08-10 18:46:35.690576
+b 448

# 2023-08-10 18:46:38.659166
+c

# 2023-08-10 18:46:40.040293
+n

# 2023-08-10 18:46:57.849095
+q

# 2023-08-10 18:53:04.074102
+c

# 2023-08-10 19:06:27.206524
+q

# 2023-08-10 19:06:48.297077
+c

# 2023-08-11 14:19:22.576452
+n

# 2023-08-11 14:19:26.873732
+instance

# 2023-08-11 14:19:34.222147
+n

# 2023-08-11 14:20:06.973842
+c

# 2023-08-11 14:46:04.093331
+print(args)

# 2023-08-11 14:47:26.314726
+q

# 2023-08-11 14:47:34.511066
+n

# 2023-08-11 14:47:39.007553
+print(self.unknown_args)

# 2023-08-11 14:48:14.606858
+n

# 2023-08-11 14:48:18.007966
+print(name)

# 2023-08-11 14:48:47.142801
+print(vars(args))

# 2023-08-11 14:49:58.735019
+q

# 2023-08-11 14:52:44.737536
+args.seed

# 2023-08-11 14:52:49.250119
+print(args.seed)

# 2023-08-11 14:52:56.797164
+n

# 2023-08-11 14:53:18.428930
+q

# 2023-08-11 14:55:08.581006
+args.__dict__

# 2023-08-11 14:55:11.709674
+print(args.__dict__)

# 2023-08-11 14:56:19.521344
+q

# 2023-08-11 14:56:42.100034
+print(args.__dict__)

# 2023-08-11 14:56:59.080203
+q

# 2023-08-11 14:57:53.100199
+print(args.__dict__)

# 2023-08-11 14:57:59.931222
+n

# 2023-08-11 14:58:09.100056
+print(args)

# 2023-08-11 15:00:45.709043
+q

# 2023-08-14 12:33:54.466529
+print(self.watermarked_layers)

# 2023-08-14 12:33:56.311097
+ll

# 2023-08-14 12:34:05.282232
+ range(config.n_layer)

# 2023-08-14 12:34:06.915888
+c

# 2023-08-14 12:34:16.413785
+l

# 2023-08-14 12:36:37.680595
+max(args.watermark_layers)

# 2023-08-14 12:36:54.062414
+args.watermark_layers

# 2023-08-14 12:36:56.506123
+args.watermark_layers()

# 2023-08-14 12:37:00.466795
+print(args.watermark_layers)

# 2023-08-14 12:37:11.145362
+args.model_type['n_layer']

# 2023-08-14 12:37:13.891908
+print(args.model_type['n_layer'])

# 2023-08-14 12:37:20.820323
+n

# 2023-08-14 12:37:34.067033
+len(args.watermark_layers)

# 2023-08-14 12:38:02.492005
+print(args.model_type['n_layer'])

# 2023-08-14 12:38:26.356309
+l

# 2023-08-14 12:38:28.876319
+q

# 2023-08-15 16:00:18.211847
+n

# 2023-08-15 16:00:20.460281
+print(p)

# 2023-08-15 16:00:23.061210
+n

# 2023-08-15 16:00:24.218408
+l

# 2023-08-15 16:00:28.092450
+b 536

# 2023-08-15 16:00:28.462254
+c

# 2023-08-15 16:00:30.598219
+n

# 2023-08-15 16:00:35.665923
+q

# 2023-08-15 16:01:06.909609
+n

# 2023-08-15 16:01:43.370820
+q

# 2023-08-15 16:02:01.791082
+l

# 2023-08-15 16:02:07.485498
+ pretrained_dict

# 2023-08-15 16:02:13.482825
+l

# 2023-08-15 16:02:14.773519
+n

# 2023-08-15 16:02:49.582665
+pretrained_dict

# 2023-08-15 16:02:54.484260
+pretrained_dict.keys()

# 2023-08-15 16:04:40.571798
+q

# 2023-08-15 16:06:30.970828
+l

# 2023-08-15 16:07:22.518859
+print(self.transformer.h)

# 2023-08-15 16:07:37.631526
+for b in self.transformer.h: print(b)

# 2023-08-15 16:15:57.010906
+q

# 2023-08-15 16:16:11.909275
+n

# 2023-08-15 16:16:31.005635
+q

# 2023-08-15 16:18:19.604054
+n

# 2023-08-15 16:18:33.532291
+q

# 2023-08-15 16:18:54.939710
+n

# 2023-08-15 16:18:59.482596
+q

# 2023-08-15 16:39:42.308092
+targets

# 2023-08-15 16:40:47.871310
+logits.size(-1)

# 2023-08-15 16:40:57.346021
+logits.view(-1, logits.size(-1))

# 2023-08-15 16:41:02.072019
+logits.shape

# 2023-08-15 16:41:04.654421
+logits.view(-1, logits.size(-1)).shape

# 2023-08-15 16:41:21.255238
+targets

# 2023-08-15 16:41:31.283905
+targetstargets.view(-1)

# 2023-08-15 16:41:33.694605
+targets.view(-1)

# 2023-08-15 16:41:36.373554
+targets.view(-1).shape

# 2023-08-15 16:41:51.885566
+p_key

# 2023-08-15 16:42:48.923586
+logits.shape

# 2023-08-15 16:42:58.366738
+orig_logits[p_key == 1, :, :].shape

# 2023-08-15 16:43:04.670439
+logits[p_key == 1, :, :].shape

# 2023-08-15 16:43:30.538518
+logits[p_key == 1, :, :]

# 2023-08-15 16:45:38.198828
+targets

# 2023-08-15 16:45:40.278621
+targets.shape

# 2023-08-15 16:48:27.862864
+logits_pkey

# 2023-08-15 16:48:31.403894
+logits

# 2023-08-15 16:48:34.081667
+logits.shape

# 2023-08-15 16:49:51.675313
+targets.shape

# 2023-08-15 16:50:00.320547
+targets[0,:]

# 2023-08-15 16:50:27.917196
+targets[0,10:]

# 2023-08-15 16:50:33.111759
+targets[0,20:]

# 2023-08-15 16:50:36.773746
+targets[0,19:]

# 2023-08-15 16:50:41.084363
+targets[0,18:]

# 2023-08-15 16:50:43.441329
+targets[0,19:]

# 2023-08-15 16:51:53.373896
+self.block_size

# 2023-08-15 16:51:59.788986
+self.block_size //2

# 2023-08-15 17:06:32.717334
+q

# 2023-08-16 17:35:42.078261
+n

# 2023-08-16 17:35:51.764277
+logits_pkey.shape

# 2023-08-16 17:36:48.645094
+logits_pkey[:, -n:, :].shape

# 2023-08-16 17:37:17.596096
+p_key

# 2023-08-16 17:37:20.114057
+p_key.shape

# 2023-08-16 17:38:57.903320
+logits_pkey   = logits_pkey[:, -n:, :]

# 2023-08-16 17:39:01.936390
+logits_pkey.shape

# 2023-08-16 17:39:07.427282
+logits_pkey

# 2023-08-16 17:48:08.275106
+targets

# 2023-08-16 17:48:10.120012
+targets.shape

# 2023-08-16 17:50:02.110539
+logits_reg

# 2023-08-16 17:50:05.608914
+logits_reg.shape

# 2023-08-16 17:50:11.786205
+logits_reg.shape[-1]

# 2023-08-16 18:03:14.359412
+q

# 2023-08-24 17:11:34.497733
+n

# 2023-08-24 17:11:44.053054
+q

# 2023-08-24 17:14:28.741537
+self.__dict__

# 2023-08-24 17:14:38.369635
+self._get_members()

# 2023-08-24 17:14:42.899821
+list(self._get_members())

# 2023-08-24 17:14:44.567068
+p list(self._get_members())

# 2023-08-24 17:20:22.413304
+q

# 2023-08-24 17:25:48.835569
+n

# 2023-08-24 17:25:57.353458
+c

# 2023-08-24 17:25:58.783113
+l

# 2023-08-24 17:26:01.057660
+n

# 2023-08-24 17:26:09.657076
+descending

# 2023-08-24 17:26:15.639055
+c

# 2023-08-24 17:34:43.039460
+n

# 2023-08-24 17:34:54.857853
+c

# 2023-08-24 17:35:00.215868
+n

# 2023-08-24 17:35:10.891432
+q

# 2023-08-24 17:35:32.194204
+n

# 2023-08-24 17:36:06.482198
+p_key

# 2023-08-24 17:36:10.446320
+n

# 2023-08-24 17:36:19.101038
+logits_reg

# 2023-08-24 17:36:19.969570
+l

# 2023-08-24 17:36:22.023464
+n

# 2023-08-24 17:36:27.410081
+logits_pkey

# 2023-08-24 17:36:28.340352
+n

# 2023-08-24 17:36:35.494948
+loss_pkey

# 2023-08-24 17:36:38.928677
+q

# 2023-08-25 19:21:33.142781
+n

# 2023-08-25 19:21:37.800459
+print(type_given)

# 2023-08-25 19:21:39.123375
+n

# 2023-08-25 19:21:44.641408
+print(params_given)

# 2023-08-25 19:21:57.445253
+c

# 2023-08-25 19:22:00.553954
+n

# 2023-08-25 19:22:04.544750
+print(type_given)

# 2023-08-25 19:22:05.444565
+n

# 2023-08-25 19:22:12.150875
+print(params_given)

# 2023-08-25 19:22:18.799831
+print(config.n_layer)

# 2023-08-25 19:22:49.536313
+q

# 2023-08-25 19:23:08.435171
+w

# 2023-08-25 19:23:09.582759
+q

# 2023-08-28 14:51:47.598878
+n

# 2023-08-28 14:51:51.090946
+q

# 2023-08-28 14:52:40.802501
+args.train_llm and args.watermarked

# 2023-08-28 14:52:45.107165
+print(args.train_llm and args.watermarked)

# 2023-08-28 14:52:48.600577
+m

# 2023-08-28 14:52:49.800347
+n

# 2023-08-28 14:52:54.953908
+l

# 2023-08-28 14:54:45.390874
+w

# 2023-08-28 14:54:46.996878
+q

# 2023-08-28 14:55:06.394217
+n

# 2023-08-28 14:55:20.900835
+s

# 2023-08-28 14:55:21.633214
+n

# 2023-08-28 14:55:29.656431
+q

# 2023-08-28 14:56:13.251525
+tmp =  torch.load(path)

# 2023-08-28 14:56:14.132380
+tmp

# 2023-08-28 14:56:20.179617
+tmp.keys()

# 2023-08-28 14:57:21.784372
+for n, p in self.named_parameters(): print(n)

# 2023-08-28 14:57:40.040486
+for n in tmp.keys():print(n)

# 2023-08-28 15:18:16.815522
+q

# 2023-08-28 15:22:42.362548
+n

# 2023-08-28 15:23:01.291683
+for n, p in self.named_parameters():print(n)

# 2023-08-28 15:33:28.650751
+n

# 2023-08-28 15:33:38.907892
+l

# 2023-08-28 15:33:42.464594
+b 463

# 2023-08-28 15:33:43.107419
+c

# 2023-08-28 15:33:48.345235
+for n, p in self.named_parameters():print(n)

# 2023-08-28 15:35:21.241716
+n

# 2023-08-28 15:35:25.397985
+c

# 2023-08-28 15:35:27.618085
+h

# 2023-08-28 15:35:30.497348
+cl

# 2023-08-28 15:35:33.693961
+l

# 2023-08-28 15:35:37.982641
+b 468

# 2023-08-28 15:35:38.235504
+c

# 2023-08-28 15:35:39.184095
+n

# 2023-08-28 15:35:59.673827
+for n, p in self.named_parameters():print(n)

# 2023-08-28 15:36:29.765248
+q

# 2023-08-28 15:37:35.347326
+tmp = torch.load(config.llm_weights_path)

# 2023-08-28 15:37:38.242994
+tmp

# 2023-08-28 15:37:51.860774
+for n in tmp.keys():print(n)

# 2023-08-28 15:38:16.531668
+config.llm_weights_path

# 2023-08-28 15:38:55.070462
+q

# 2023-08-28 15:40:00.111764
+l

# 2023-08-28 15:40:15.202034
+n

# 2023-08-28 15:40:20.644577
+l

# 2023-08-28 15:42:18.859602
+q

# 2023-08-28 15:42:51.471245
+for n, p in self.named_parameters():print(n)

# 2023-08-28 15:47:09.161843
+for n, p in self.named_parameters(recurse=True):print(n)

# 2023-08-28 15:47:50.773197
+for name, buffer in self.named_buffers(recurse=True):
+    print(name)
+

# 2023-08-28 15:49:39.761773
+q

# 2023-08-28 15:50:31.830451
+l

# 2023-08-28 15:50:57.885850
+ for n, p in self.named_parameters():print(n)

# 2023-08-28 15:51:23.054397
+n

# 2023-08-28 15:51:44.713431
+s

# 2023-08-28 15:51:45.599510
+n

# 2023-08-28 15:52:01.338301
+for n in torch.load(path):print(n)

# 2023-08-28 15:52:24.540388
+for n, p in self.named_parameters():print(n)

# 2023-08-28 15:52:40.559182
+n

# 2023-08-28 15:52:44.862890
+q

# 2023-08-28 16:02:18.730202
+l

# 2023-08-28 16:02:28.641213
+n

# 2023-08-28 16:02:41.214006
+c

# 2023-08-28 16:02:51.250106
+n

# 2023-08-28 16:03:09.322885
+c

# 2023-08-28 16:03:12.907570
+q

# 2023-08-28 16:08:55.812990
+s

# 2023-08-28 16:08:57.102049
+n

# 2023-08-28 16:09:05.247828
+tmp = torch.load(path)

# 2023-08-28 16:09:28.481764
+tmp

# 2023-08-28 16:09:34.810899
+for k in tmp:print(k)

# 2023-08-28 16:24:04.608810
+self.load_state_dict({k: v for k, v in torch.load(path).items() if "orig_model" not in k})

# 2023-08-28 16:25:19.323403
+q

# 2023-08-28 16:25:38.945430
+n

# 2023-08-28 16:33:55.725152
+w

# 2023-08-28 16:33:57.316641
+q

# 2023-09-05 15:08:39.111277
+n

# 2023-09-05 15:09:00.533871
+q

# 2023-09-06 14:14:18.548482
+n

# 2023-09-06 14:14:34.644735
+print(layer_idx)

# 2023-09-06 14:14:40.550373
+layer_idx

# 2023-09-06 14:14:41.979634
+q

# 2023-09-06 14:18:33.094892
+n

# 2023-09-06 14:18:45.001644
+print(self.args.frozen_layers)

# 2023-09-06 14:18:46.693390
+n

# 2023-09-06 14:18:49.803555
+print(layer_idx)

# 2023-09-06 14:18:50.759809
+n

# 2023-09-06 14:18:54.606552
+c

# 2023-09-06 14:19:22.563744
+q

# 2023-09-06 14:20:17.947978
+_args.tags

# 2023-09-06 14:20:32.901154
+q

# 2023-09-12 15:03:35.687891
+l

# 2023-09-12 15:03:43.347137
+n

# 2023-09-12 15:03:56.247141
+q

# 2023-09-12 15:06:04.833362
+n

# 2023-09-12 15:06:06.719918
+descending

# 2023-09-12 15:06:29.027577
+q

# 2023-09-12 15:06:43.711781
+n

# 2023-09-12 15:06:45.617860
+descending

# 2023-09-12 15:07:12.754431
+args.watermark_train_percentage

# 2023-09-12 15:07:16.471023
+print(args.watermark_train_percentage)

# 2023-09-12 15:07:24.243981
+print(args.watermark_test_percentage)

# 2023-09-12 15:07:26.027702
+n

# 2023-09-12 15:08:15.709288
+q

# 2023-09-12 15:15:55.441259
+ args.train_llm

# 2023-09-12 15:15:59.988166
+print(args.train_llm)

# 2023-09-12 15:16:00.616084
+l

# 2023-09-12 15:16:06.553273
+print( args.watermarked)

# 2023-09-12 15:16:18.013321
+print((args.experiment != 'finetune_baseline'))

# 2023-09-12 15:16:21.182013
+n

# 2023-09-12 15:16:24.408155
+self.in_finetune_mode

# 2023-09-12 15:16:25.919905
+n

# 2023-09-12 15:17:14.071252
+q

# 2023-09-12 15:17:30.167801
+n

# 2023-09-12 15:17:42.901069
+c

# 2023-09-12 15:18:17.180474
+q

# 2023-09-12 15:20:17.407856
+n

# 2023-09-12 15:20:40.536528
+print(self.loss)

# 2023-09-12 15:20:43.415014
+q

# 2023-09-12 15:21:53.875403
+s

# 2023-09-12 15:22:01.284114
+n

# 2023-09-12 15:22:04.809305
+l

# 2023-09-12 15:22:07.791897
+print(x)

# 2023-09-12 15:22:08.693305
+l

# 2023-09-12 15:22:09.731563
+ll

# 2023-09-12 15:22:46.992942
+b 615

# 2023-09-12 15:22:47.483608
+c

# 2023-09-12 15:22:57.505446
+n

# 2023-09-12 15:22:59.784712
+print(n)

# 2023-09-12 15:23:04.344060
+print(classes)

# 2023-09-12 15:23:09.310483
+print(p_key)

# 2023-09-12 15:24:02.938573
+b

# 2023-09-12 15:24:06.493159
+n

# 2023-09-12 15:24:09.971619
+l

# 2023-09-12 15:24:15.822620
+targets

# 2023-09-12 15:30:03.159520
+n

# 2023-09-12 15:30:05.077365
+loss_reg

# 2023-09-12 15:30:06.940898
+n

# 2023-09-12 15:30:34.825377
+logits_pkey

# 2023-09-12 15:30:37.856243
+n

# 2023-09-12 15:30:40.704141
+target_pkey

# 2023-09-12 15:30:45.368606
+n

# 2023-09-12 15:30:47.603807
+loss_pkey

# 2023-09-12 15:30:51.402694
+loss_reg

# 2023-09-12 15:30:51.895936
+q

# 2023-09-12 15:34:13.937699
+n

# 2023-09-12 15:34:17.159146
+self.loss

# 2023-09-12 15:34:19.244098
+c

# 2023-09-12 15:35:55.218821
+q

# 2023-09-20 14:30:27.514954
+df

# 2023-09-20 14:30:49.203012
+q

# 2023-09-20 14:30:56.433972
+df.shape

# 2023-09-20 14:30:57.693599
+q

# 2023-09-20 14:31:06.979030
+c

# 2023-09-20 14:31:12.437819
+df

# 2023-09-20 15:50:12.329990
+q

# 2023-09-21 17:03:41.382649
+l

# 2023-09-21 17:03:46.635898
+syn_data_path

# 2023-09-21 17:05:25.380131
+q

# 2023-09-26 13:44:58.780345
+l

# 2023-09-26 13:45:02.365121
+n

# 2023-09-26 13:45:27.299033
+s

# 2023-09-26 13:45:30.620936
+n

# 2023-09-26 13:45:34.340101
+job_name

# 2023-09-26 13:45:36.369050
+n

# 2023-09-26 13:45:38.453332
+params

# 2023-09-26 13:45:59.364378
+args

# 2023-09-26 13:46:02.033397
+print(args)

# 2023-09-26 13:46:21.757774
+n

# 2023-09-26 13:46:34.494210
+s

# 2023-09-26 13:46:35.258838
+n

# 2023-09-26 13:52:53.879651
+q

# 2023-09-26 13:53:55.635222
+session.host

# 2023-09-26 13:54:01.799388
+c

# 2023-09-26 14:03:10.841229
+q

# 2023-09-26 14:03:25.344073
+s

# 2023-09-26 14:03:25.973120
+n

# 2023-09-26 14:06:59.380906
+s

# 2023-09-26 14:07:00.117138
+n

# 2023-09-26 14:07:03.028198
+s

# 2023-09-26 14:07:06.641021
+n

# 2023-09-26 14:07:33.476065
+print(_config)

# 2023-09-26 14:08:24.355501
+n

# 2023-09-26 14:08:30.280721
+print(_body)

# 2023-09-26 14:08:47.441693
+print(body)

# 2023-09-26 14:09:13.556518
+n

# 2023-09-26 14:09:18.146591
+l

# 2023-09-26 14:09:22.421475
+n

# 2023-09-26 14:09:37.707418
+s

# 2023-09-26 14:09:40.662041
+n

# 2023-09-26 14:09:44.843705
+r

# 2023-09-26 14:09:45.536617
+s

# 2023-09-26 14:09:46.827265
+n

# 2023-09-26 14:09:48.162187
+s

# 2023-09-26 14:09:58.902949
+l

# 2023-09-26 14:10:18.642522
+n

# 2023-09-26 14:10:26.877439
+l

# 2023-09-26 14:10:30.312215
+print(request_url)

# 2023-09-26 14:10:34.825654
+n

# 2023-09-26 14:10:56.892763
+s

# 2023-09-26 14:11:01.468966
+n

# 2023-09-26 14:11:05.758659
+print(request_url)

# 2023-09-26 14:11:17.594235
+n

# 2023-09-26 14:11:33.583210
+resp.status_code

# 2023-09-26 14:11:34.679561
+n

# 2023-09-26 14:13:22.529277
+q

# 2023-09-26 14:18:08.185415
+n

# 2023-09-26 14:18:21.346893
+c

# 2023-09-26 14:23:27.834248
+q

# 2023-09-26 15:05:14.912322
+s

# 2023-09-26 15:05:15.553077
+n

# 2023-09-26 15:05:27.170561
+s

# 2023-09-26 15:05:27.855283
+n

# 2023-09-26 15:05:31.709938
+ll

# 2023-09-26 15:05:33.750202
+s

# 2023-09-26 15:05:40.905826
+n

# 2023-09-26 15:06:35.387408
+s

# 2023-09-26 15:06:39.751737
+n

# 2023-09-26 15:06:40.785533
+r

# 2023-09-26 15:06:43.530863
+s

# 2023-09-26 15:06:47.460508
+n

# 2023-09-26 15:07:43.381478
+q

# 2023-09-26 15:08:07.294674
+c

# 2023-09-26 15:09:45.034373
+s

# 2023-09-26 15:09:47.208571
+r

# 2023-09-26 15:09:48.707924
+s

# 2023-09-26 15:09:52.457721
+n

# 2023-09-26 15:09:58.533815
+s

# 2023-09-26 15:10:01.217945
+n

# 2023-09-26 15:10:13.832136
+q

# 2023-09-26 15:10:25.160576
+c

# 2023-09-26 15:10:31.790432
+l

# 2023-09-26 15:10:37.112939
+n

# 2023-09-26 15:10:46.159424
+print(request_url)

# 2023-09-26 15:10:52.549790
+n

# 2023-09-26 15:10:56.974210
+print(body_encode)

# 2023-09-26 15:11:53.945744
+l

# 2023-09-26 15:13:01.250081
+print(body)

# 2023-09-26 15:14:59.316527
+s

# 2023-09-26 15:15:07.793010
+n

# 2023-09-26 15:16:08.196206
+request_url

# 2023-09-26 15:16:38.662868
+print(query)

# 2023-09-26 15:16:45.099220
+n

# 2023-09-26 15:16:49.633078
+print(headers)

# 2023-09-26 15:17:36.277364
+n

# 2023-09-26 15:18:50.888841
+print(body)

# 2023-09-26 15:19:02.889870
+print(req_method)

# 2023-09-26 15:20:05.921893
+print(TIMEOUT)

# 2023-09-26 15:20:16.990541
+l

# 2023-09-26 15:20:19.330981
+n

# 2023-09-26 15:20:33.910584
+print(json.loads(resp.content))

# 2023-09-26 15:21:04.707369
+q

# 2023-09-26 15:39:52.045643
+c

# 2023-09-26 15:39:56.051052
+n

# 2023-09-26 15:39:58.826312
+s

# 2023-09-26 15:41:35.560827
+import os

# 2023-09-26 15:41:43.481241
+q

# 2023-09-26 15:42:14.654436
+c

# 2023-09-26 15:42:17.578176
+import os

# 2023-09-26 15:42:22.978525
+print(os.environ)

# 2023-09-26 15:42:58.691376
+q

# 2023-09-26 15:50:31.124327
+environ({'SHELL': '$HOME/bin/zsh', 'no_proxy': '127.0.0.*,*.huawei.com,localhost', 'PWD': '$HOME/dev/projects/llm-watermarking', 'LOGNAME': 'vaden', 'XDG_SESSION_TYPE': 'tty', 'cntlm_port': '3128', 'ftp_proxy': 'http://127.0.0.1:3128', 'MOTD_SHOWN': 'pam', 'HOME': '$HOME', 'LANG': 'en_US.UTF-8', 'cntlm_host': '127.0.0.1', 'SSL_CERT_DIR': '/etc/ssl/certs', 'https_proxy': 'http://127.0.0.1:3128', 'SSH_CONNECTION': '10.209.203.47 1030 10.213.96.117 22', 'cntlm_proxy': '127.0.0.1:3128', 'XDG_SESSION_CLASS': 'user', 'TERM': 'xterm-256color', 'USER': 'vaden', 'SHLVL': '1', 'XDG_SESSION_ID': '2240', 'http_proxy': 'http://127.0.0.1:3128', 'XDG_RUNTIME_DIR': '/run/user/1010', 'SSH_CLIENT': '10.209.203.47 1030 22', 'REQUESTS_CA_BUNDLE': '/etc/ssl/certs/ca-certificates.crt', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'PATH': '$HOME/miniconda/envs/ml3/bin:$HOME/miniconda/condabin:$HOME/bin:/usr/local/bin:/usr/local/sbin:$HOME/.cargo/bin:$HOME/local/bin:$HOME/miniconda/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:$HOME/.fzf/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1010/bus', 'SSH_TTY': '/dev/pts/462', 'OLDPWD': '$HOME/dev/projects/llm-watermarking/roma_scripts', 'EDITOR': 'nano', 'VISUAL': 'nano', 'PAGER': 'less', 'LESS': '-g -i -M -R -S -w -X -z-4', 'LESSOPEN': '| /usr/bin/env lesspipe %s 2>&-', 'P9K_TTY': 'old', '_P9K_TTY': '/dev/pts/462', 'LESS_TERMCAP_mb': '\x1b[01;31m', 'LESS_TERMCAP_md': '\x1b[01;31m', 'LESS_TERMCAP_me': '\x1b[0m', 'LESS_TERMCAP_se': '\x1b[0m', 'LESS_TERMCAP_so': '\x1b[00;47;30m', 'LESS_TERMCAP_ue': '\x1b[0m', 'LESS_TERMCAP_us': '\x1b[01;32m', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'GREP_COLOR': '37;45', 'GREP_COLORS': 'mt=37;45', 'P9K_SSH': '1', '_P9K_SSH_TTY': '/dev/pts/462', 'CONDA_EXE': '$HOME/miniconda/bin/conda', '_CE_M': '', '_CE_CONDA': '', 'CONDA_PYTHON_EXE': '$HOME/miniconda/bin/python', 'CONDA_SHLVL': '2', 'CONDA_PREFIX': '$HOME/miniconda/envs/ml3', 'CONDA_DEFAULT_ENV': 'ml3', 'CONDA_PROMPT_MODIFIER': '(ml3) ', 'PYTHONPATH': '$HOME/.python:', 'CONDA_PREFIX_1': '$HOME/miniconda', 'CONDA_PYTHONBREAKPOINT': '', 'PYTHONBREAKPOINT': 'ipdb.set_trace', 'CONDA_MKL_INTERFACE_LAYER_BACKUP': '', 'MKL_INTERFACE_LAYER': 'LP64,GNU', 'GSETTINGS_SCHEMA_DIR_CONDA_BACKUP': '', 'GSETTINGS_SCHEMA_DIR': '$HOME/miniconda/envs/ml3/share/glib-2.0/schemas', 'XML_CATALOG_FILES': 'file://$HOME/miniconda/envs/ml3/etc/xml/catalog file:///etc/xml/catalog', 'FZFZ_SUBDIR_LIMIT': '1000', 'FZFZ_EXTRA_DIRS': "'../../..'", 'FZFZ_EXCLUDE_PATTERN': '\\.git|venv', 'FZF_DEFAULT_COMMAND': 'fd --type f --hidden --follow --exclude .git', 'FZF_DEFAULT_OPTS': '--layout=reverse --inline-info', 'FZF_CTRL_T_COMMAND': "fd --type f --hidden --follow --exclude .git . '.' '$HOME/dev'", 'FZF_ALT_C_COMMAND': "fd -t d . '.' '$HOME/dev'", '_': '$HOME/miniconda/envs/ml3/bin/python'})q

# 2023-09-26 15:50:32.103667
+q

# 2023-09-26 16:32:58.501605
+l

# 2023-09-26 16:33:01.395834
+s3_client_list

# 2023-09-26 16:33:54.361092
+n

# 2023-09-26 16:33:56.982752
+ll

# 2023-09-26 16:34:06.328036
+b 404

# 2023-09-26 16:34:06.615571
+c

# 2023-09-26 16:34:12.388673
+file_list

# 2023-09-26 16:34:23.670660
+n

# 2023-09-26 16:34:52.334883
+file_name

# 2023-09-26 16:34:54.706596
+n

# 2023-09-26 16:35:05.252572
+print(args.samll_file_size)

# 2023-09-26 16:35:07.201269
+n

# 2023-09-26 16:35:19.801733
+q

# 2023-09-26 17:32:45.208907
+print(url)

# 2023-09-26 17:32:58.608395
+print(bucket_auth_endpoint)

# 2023-09-26 17:34:31.503550
+n

# 2023-09-26 17:34:41.384544
+result

# 2023-09-26 17:34:49.364469
+rn

# 2023-09-26 17:34:50.568457
+n

# 2023-09-26 17:34:52.951788
+result_dict

# 2023-09-26 17:34:56.625767
+n

# 2023-09-26 17:36:20.023093
+q

# 2023-09-26 17:36:46.145936
+l

# 2023-09-26 17:37:02.833978
+n

# 2023-09-26 17:37:07.066668
+query_urls_endpoint

# 2023-09-26 17:37:25.437053
+n

# 2023-09-26 17:37:38.417766
+result_dict

# 2023-09-26 17:37:43.303509
+n

# 2023-09-26 17:38:18.096372
+csb_obs_service_endpoint

# 2023-09-26 17:44:37.455945
+q

# 2023-09-27 13:02:07.329598
+resp

# 2023-09-27 13:02:17.288099
+resp.headers

# 2023-09-27 13:02:30.851579
+from pprint import pprint

# 2023-09-27 13:02:39.892369
+pprint(json.load(resp.headers))

# 2023-09-27 13:02:47.721997
+pprint(json.load(resp.content))

# 2023-09-27 13:02:56.512089
+import pprint

# 2023-09-27 13:02:58.341518
+pprint(json.load(resp.content))

# 2023-09-27 13:03:05.020598
+p

# 2023-09-27 13:03:06.502852
+pp

# 2023-09-27 13:03:09.952562
+print(resp.content)

# 2023-09-27 13:03:16.672852
+json.load(resp.content)

# 2023-09-27 13:03:19.342328
+print(json.load(resp.content))

# 2023-09-27 13:03:24.563732
+print(json.loads(resp.content))

# 2023-09-27 13:03:26.635411
+pprint(json.loads(resp.content))

# 2023-09-27 13:03:29.891368
+pprint.pprint(json.loads(resp.content))

# 2023-09-27 13:03:38.472199
+from pprint import pprint

# 2023-09-27 13:03:42.055318
+pprint(json.loads(resp.content))

# 2023-09-27 13:03:53.799057
+resp

# 2023-09-27 13:04:03.532635
+resp.reason

# 2023-09-27 13:04:22.063732
+pprint(json.loads(resp.content))

# 2023-09-27 13:08:34.616654
+q

# 2023-09-27 17:34:08.735066
+l

# 2023-09-27 17:34:24.463002
+print(body)

# 2023-09-27 17:34:25.833077
+n

# 2023-09-27 17:34:32.563317
+print(body)

# 2023-09-27 17:34:36.643291
+n

# 2023-09-27 17:34:41.064979
+l

# 2023-09-27 17:34:43.734192
+ll

# 2023-09-27 17:34:53.023567
+print(resp.content)

# 2023-09-27 17:34:58.893562
+c

# 2023-09-27 17:35:01.075251
+l

# 2023-09-27 17:35:04.715476
+c

# 2023-09-27 17:35:06.735422
+l

# 2023-09-27 17:35:10.123192
+print(body)

# 2023-09-27 17:35:10.974235
+c

# 2023-09-27 17:37:14.613078
+q

# 2023-09-27 17:37:46.132410
+s

# 2023-09-27 17:37:46.793322
+n

# 2023-09-27 17:37:51.000936
+s

# 2023-09-27 17:37:51.630841
+n

# 2023-09-27 17:37:56.593096
+s

# 2023-09-27 17:38:00.201364
+n

# 2023-09-27 17:38:14.721588
+print(body)

# 2023-09-27 17:38:17.630938
+l

# 2023-09-27 17:38:20.071772
+n

# 2023-09-27 17:38:22.711198
+ll

# 2023-09-27 17:38:31.151238
+b 574

# 2023-09-27 17:38:32.750753
+c

# 2023-09-27 17:38:33.700735
+s

# 2023-09-27 17:38:37.310555
+r

# 2023-09-27 17:38:46.840620
+s

# 2023-09-27 17:39:22.330764
+n

# 2023-09-27 17:39:36.350095
+print(body_encode)

# 2023-09-27 17:50:18.569667
+q

# 2023-09-27 17:50:53.181355
+print(resp.content)

# 2023-09-27 17:52:00.228846
+q

# 2023-09-27 17:52:04.180667
+n

# 2023-09-27 17:52:19.588834
+print(resp.content)

# 2023-09-27 17:52:39.978850
+q

# 2023-09-27 17:52:49.801879
+print(resp.content)

# 2023-09-27 17:53:37.288165
+q

# 2023-09-27 17:53:41.861363
+c

# 2023-09-27 17:55:32.209135
+l

# 2023-09-27 17:55:34.707832
+print(body)

# 2023-09-27 18:10:34.257065
+q

# 2023-09-27 18:11:41.687977
+c

# 2023-09-27 18:12:36.754318
+q

# 2023-09-28 02:24:25.861222
+resp

# 2023-09-28 02:38:43.963750
+print(resp)

# 2023-09-28 12:50:14.292550
+n

# 2023-09-28 12:50:16.956666
+file_list

# 2023-09-28 12:50:18.847883
+n

# 2023-09-28 12:50:47.197597
+nn

# 2023-09-28 12:50:48.188986
+n

# 2023-09-28 12:50:58.723881
+c

# 2023-09-28 13:08:07.521208
+file_list

# 2023-09-28 14:00:17.508754
+c

# 2023-09-28 14:01:06.786725
+s3_client

# 2023-09-28 14:01:41.918101
+print(s3_client)

# 2023-09-28 14:01:47.812510
+bucket_name

# 2023-09-28 14:01:49.870080
+key

# 2023-09-28 14:02:02.406211
+bucket_path

# 2023-09-28 14:02:28.643078
+q

# 2023-09-28 14:06:49.642356
+q

# 2023-09-28 14:10:50.951355
+remote_path

# 2023-09-28 14:10:53.980858
+file_name

# 2023-09-28 14:10:55.993280
+n

# 2023-09-28 14:10:57.238330
+key

# 2023-09-28 14:12:13.018572
+q

# 2023-09-28 14:14:50.162039
+print(p)

# 2023-09-28 14:15:19.169765
+remote_path

# 2023-09-28 14:17:05.732136
+Path(local_path)

# 2023-09-28 14:17:11.207501
+Path(local_path).parts

# 2023-09-28 14:17:16.382183
+Path(local_path).parts[-1]

# 2023-09-28 14:17:20.223562
+Path(local_path).parts[-1:]

# 2023-09-28 14:17:22.861578
+Path(local_path).parts[:-1]

# 2023-09-28 14:17:30.061779
+Path(Path(local_path).parts[:-1])

# 2023-09-28 14:17:31.968507
+Path(local_path).parts[:-1]

# 2023-09-28 14:17:48.900360
+tmp - Path(local_path)

# 2023-09-28 14:17:52.020194
+tmp = Path(local_path)

# 2023-09-28 14:17:58.427462
+tmp.parents

# 2023-09-28 14:18:07.170346
+print(tmp.parents)

# 2023-09-28 14:18:15.600986
+str(tmp.parents)

# 2023-09-28 14:18:19.548137
+print(tmp.parents())

# 2023-09-28 14:18:37.320836
+tmp.root

# 2023-09-28 14:19:45.586727
+tmp.parent

# 2023-09-28 14:58:53.160826
+q

# 2023-09-28 15:13:34.225847
+res

# 2023-09-28 15:18:51.647127
+q

# 2023-09-28 15:39:27.991129
+l

# 2023-09-28 15:39:31.155973
+s

# 2023-09-28 15:39:37.847077
+n

# 2023-09-28 15:39:42.137317
+s

# 2023-09-28 15:39:46.274314
+m

# 2023-09-28 15:39:47.486668
+n

# 2023-09-28 15:39:58.305636
+print(service_name)

# 2023-09-28 15:40:02.806514
+print(operation_name)

# 2023-09-28 15:45:38.295516
+q

# 2023-09-28 16:02:17.432560
+key

# 2023-09-28 16:02:47.234459
+local_parent_path

# 2023-09-28 16:03:05.235229
+key

# 2023-09-28 16:03:10.422443
+Path(key)

# 2023-09-28 16:03:30.464081
+str(Path(key))

# 2023-09-28 16:05:02.652741
+q

# 2023-09-28 16:17:31.464810
+n

# 2023-09-28 16:17:35.695688
+len(small_files)

# 2023-09-28 16:17:38.500775
+len(large_files)

# 2023-09-28 16:18:10.528998
+[p.stat().st_size for p in paths]

# 2023-09-28 16:18:19.296437
+LARGE_FILE_CHUNK_SIZE

# 2023-09-28 16:18:41.438642
+209715200/2

# 2023-09-28 16:19:06.549554
+q

# 2023-09-28 18:26:47.333051
+bofy

# 2023-09-28 18:26:48.532705
+body

# 2023-09-28 18:27:01.224900
+pprint(body)

# 2023-09-28 18:27:28.494166
+c

# 2023-09-28 18:27:45.920909
+q

# 2023-09-28 18:28:01.641391
+body

# 2023-09-28 18:28:08.964611
+pprint(body)

# 2023-09-28 18:28:20.950646
+q

# 2023-09-28 22:52:03.057880
+n

# 2023-09-28 22:52:11.703025
+print(path)

# 2023-09-28 22:52:15.540987
+n

# 2023-09-28 22:52:22.814317
+print(path)

# 2023-09-28 22:52:24.073242
+n

# 2023-09-28 22:52:59.130559
+nq

# 2023-09-28 22:53:00.047672
+q

# 2023-09-28 22:54:18.941811
+s

# 2023-09-28 22:54:19.870259
+n

# 2023-09-28 22:54:32.271456
+bucket_auth_endpoint

# 2023-09-28 22:56:12.471852
+n

# 2023-09-28 22:56:22.015744
+result_dict

# 2023-09-28 22:56:25.217084
+n

# 2023-09-28 22:56:31.814731
+objects_storage_path

# 2023-09-28 22:56:37.482730
+n

# 2023-09-28 22:56:39.570095
+s

# 2023-09-28 22:56:40.640880
+n

# 2023-09-28 22:56:55.576785
+query_urls_endpoint

# 2023-09-28 22:57:26.492405
+n

# 2023-09-28 22:57:55.696779
+csb_obs_service_endpoint

# 2023-09-28 23:03:16.319452
+n

# 2023-09-28 23:03:33.948682
+original_path

# 2023-09-28 23:03:37.142395
+n

# 2023-09-28 23:03:47.540850
+result_dict

# 2023-09-28 23:04:41.456470
+n

# 2023-09-28 23:06:50.903770
+q

# 2023-09-28 23:07:10.336013
+c

# 2023-09-28 23:07:17.667986
+n

# 2023-09-28 23:07:22.266810
+list_objects_endpoint

# 2023-09-28 23:07:36.563937
+object_key

# 2023-09-28 23:13:58.002749
+q

# 2023-09-28 23:14:05.698817
+n

# 2023-09-28 23:14:10.491525
+path

# 2023-09-28 23:14:42.465877
+vendor
+region
+bucket_name
+app_token

# 2023-09-28 23:15:00.531895
+print(vendor)
+print(region)
+print(bucket_name)
+print(app_token)

# 2023-09-28 23:15:18.336362
+print(vendor, region, bucket_name, app_token)

# 2023-09-28 23:17:26.989489
+n

# 2023-09-28 23:17:39.383691
+objects_storage_path

# 2023-09-28 23:18:06.613961
+n

# 2023-09-28 23:18:34.818057
+s

# 2023-09-28 23:18:35.914407
+n

# 2023-09-28 23:20:30.718586
+list_objects_endpoint

# 2023-09-28 23:25:23.309919
+q

# 2023-09-28 23:25:30.104442
+vender

# 2023-09-28 23:25:34.222685
+vendor

# 2023-09-28 23:32:31.912858
+s

# 2023-09-28 23:32:33.843298
+n

# 2023-09-28 23:33:56.869289
+list_objects_endpoint

# 2023-09-28 23:34:13.469572
+print(path)

# 2023-09-28 23:34:26.713651
+object_key

# 2023-09-28 23:35:59.714184
+back_server_url

# 2023-09-28 23:39:09.056814
+list_objects_endpoint

# 2023-09-28 23:48:09.374424
+q

# 2023-09-29 00:25:48.704199
+l

# 2023-09-29 00:25:51.865206
+csb_obs_service_endpoint

# 2023-09-29 00:26:44.798680
+csb_file_server_url

# 2023-09-29 00:28:43.209141
+n

# 2023-09-29 00:28:44.321162
+csb_obs_service_endpoint

# 2023-09-29 00:30:00.815854
+c

# 2023-09-29 00:30:05.463331
+s

# 2023-09-29 00:30:06.468367
+n

# 2023-09-29 00:30:13.123116
+list_objects_endpoint

# 2023-09-29 00:30:31.279988
+q

# 2023-09-29 00:32:03.622940
+n

# 2023-09-29 00:32:12.139208
+q

# 2023-09-29 00:32:27.646833
+result_dict['nextmarker']

# 2023-09-29 00:32:30.946838
+n

# 2023-09-29 00:32:32.386568
+result_dict['nextmarker']

# 2023-09-29 00:32:42.796619
+original_path

# 2023-09-29 00:34:30.153414
+q

# 2023-09-29 00:34:54.930511
+result_dict['nextmarker']

# 2023-09-29 00:35:36.257804
+q

# 2023-09-29 00:37:32.772482
+path

# 2023-09-29 00:48:08.923565
+q

# 2023-09-29 00:48:31.913748
+l

# 2023-09-29 00:49:06.509782
+objectKey

# 2023-09-29 00:56:49.450271
+q

# 2023-09-29 02:14:58.981507
+paths

# 2023-09-29 02:15:03.316194
+len(paths)

# 2023-09-29 02:15:18.105435
+q

# 2023-09-29 02:25:01.081262
+paths

# 2023-09-29 02:26:30.366738
+l

# 2023-09-29 02:26:37.448090
+download_file(paths[0])

# 2023-09-29 02:26:43.213242
+download_file(paths[1])

# 2023-09-29 02:26:51.636169
+debug download_file(paths[1])

# 2023-09-29 02:26:52.453362
+s

# 2023-09-29 02:26:53.239369
+n

# 2023-09-29 02:27:16.016051
+path

# 2023-09-29 02:27:27.753291
+encode_path(path)

# 2023-09-29 02:28:17.064648
+q

# 2023-09-29 02:28:17.935383
+q

# 2023-09-29 02:28:38.554339
+l

# 2023-09-29 02:28:55.076752
+paths[0]

# 2023-09-29 02:29:16.710665
+q

# 2023-09-29 02:29:42.320071
+l

# 2023-09-29 02:30:05.885316
+download_file(paths[3])

# 2023-09-29 02:30:09.284890
+download_file(paths[2])

# 2023-09-29 02:30:32.115276
+q

# 2023-09-29 02:33:40.669492
+debug download_file(paths[2])

# 2023-09-29 02:33:42.287268
+s

# 2023-09-29 02:33:45.283382
+n

# 2023-09-29 02:33:48.152090
+s

# 2023-09-29 02:33:51.884456
+r

# 2023-09-29 02:33:53.783124
+s

# 2023-09-29 02:33:58.775124
+q

# 2023-09-29 02:34:01.476904
+n

# 2023-09-29 13:35:08.598667
+q

# 2023-09-29 15:54:37.481946
+c

# 2023-09-29 15:54:44.528580
+l

# 2023-09-29 15:55:00.778902
+from pprint import pprint

# 2023-09-29 15:55:03.286707
+pprint(body)

# 2023-09-29 15:55:57.589482
+q

# 2023-10-01 17:36:30.295451
+s

# 2023-10-01 17:36:33.407058
+r

# 2023-10-01 17:36:34.112946
+s

# 2023-10-01 17:36:37.029977
+r

# 2023-10-01 17:36:39.494514
+s

# 2023-10-01 17:36:40.530675
+n

# 2023-10-01 17:36:42.540603
+q

# 2023-10-01 17:38:33.769761
+s

# 2023-10-01 17:38:34.545690
+n

# 2023-10-01 17:38:38.245382
+project_dir

# 2023-10-01 17:38:40.174941
+n

# 2023-10-01 17:38:51.518322
+hypers

# 2023-10-01 17:38:58.573862
+n

# 2023-10-01 17:39:15.523710
+roma_args

# 2023-10-01 17:40:19.676981
+q

# 2023-10-01 17:42:53.211918
+n

# 2023-10-01 17:43:29.056356
+roma_args

# 2023-10-01 17:48:27.457245
+q

# 2023-10-01 17:48:40.461986
+n

# 2023-10-01 17:48:42.560035
+remote_dir

# 2023-10-01 17:48:49.737669
+job_dir

# 2023-10-01 17:49:32.543522
+q

# 2023-10-01 17:49:44.786800
+experiment_name

# 2023-10-01 17:49:51.504713
+experiment_name.lower()

# 2023-10-01 17:50:00.251422
+experiment_name.lower().replace(" ", "_")

# 2023-10-01 17:50:05.372547
+q

# 2023-10-01 17:50:29.677880
+job_dir

# 2023-10-01 17:50:44.690983
+n

# 2023-10-01 17:50:46.331291
+remote_dir

# 2023-10-01 17:51:11.560903
+q

# 2023-10-01 17:51:24.540160
+Path(experiment_dir).parents

# 2023-10-01 17:51:29.905106
+Path(experiment_dir).parents[1]

# 2023-10-01 17:51:31.965036
+Path(experiment_dir).parents[2]

# 2023-10-01 17:52:33.309241
+q

# 2023-10-01 17:52:40.093748
+LOCAL_DIR

# 2023-10-01 17:52:51.398328
+job_dir

# 2023-10-01 17:53:34.266084
+q

# 2023-10-01 17:53:45.608285
+n

# 2023-10-01 17:53:47.861806
+remote_dir

# 2023-10-01 17:53:58.164657
+EXPERIMENT_DIR

# 2023-10-01 17:54:25.019945
+q

# 2023-10-01 17:54:52.625061
+n

# 2023-10-01 17:55:25.366148
+job_dir

# 2023-10-01 17:56:40.338708
+ static.REMOTE_DEV_PATH

# 2023-10-01 17:59:28.612448
+q

# 2023-10-01 17:59:54.431975
+n

# 2023-10-01 17:59:55.929655
+remote_dir

# 2023-10-01 18:00:08.697779
+EXPERIMENT_DIR

# 2023-10-01 18:00:41.510132
+str(EXPERIMENT_DIR).replace(LOCAL_DIR,"")

# 2023-10-01 18:00:51.032265
+str(EXPERIMENT_DIR).replace(str(LOCAL_DIR),"")

# 2023-10-01 18:01:11.846647
+remote_dir = Path(static.REMOTE_DEV_PATH) / str(EXPERIMENT_DIR).replace(str(LOCAL_DIR), "")

# 2023-10-01 18:01:13.301916
+remote_dir

# 2023-10-01 18:01:22.175838
+ Path(static.REMOTE_DEV_PATH)

# 2023-10-01 18:01:34.759669
+ str(EXPERIMENT_DIR).replace(str(LOCAL_DIR), "")

# 2023-10-01 18:01:43.622839
+ Path(static.REMOTE_DEV_PATH) / str(EXPERIMENT_DIR).replace(str(LOCAL_DIR), "")

# 2023-10-01 18:01:59.810088
+ Path(static.REMOTE_DEV_PATH) / Path(str(EXPERIMENT_DIR).replace(str(LOCAL_DIR), ""))

# 2023-10-01 18:02:06.127110
+ Path(static.REMOTE_DEV_PATH)

# 2023-10-01 18:02:12.294460
+ Path(static.REMOTE_DEV_PATH) / 'asds'

# 2023-10-01 18:02:40.853381
+ Path(static.REMOTE_DEV_PATH) Path(str(EXPERIMENT_DIR).replace(str(LOCAL_DIR), ""))q

# 2023-10-01 18:02:41.862141
+q

# 2023-10-01 18:02:51.429956
+remote_dir

# 2023-10-01 18:03:46.353788
+str(EXPERIMENT_DIR).replace(str(LOCAL_DIR), "")

# 2023-10-01 18:03:51.519101
+str(EXPERIMENT_DIR)

# 2023-10-01 18:04:09.653964
+str(EXPERIMENT_DIR).replace(str(LOCAL_DIR), static.REMOTE_DEV_PATH)

# 2023-10-01 18:04:18.811896
+Path(str(EXPERIMENT_DIR).replace(str(LOCAL_DIR), static.REMOTE_DEV_PATH))

# 2023-10-01 18:05:06.563960
+q

# 2023-10-01 18:07:00.743690
+remote_dir

# 2023-10-01 18:07:03.560031
+n

# 2023-10-01 18:07:08.060425
+q

# 2023-10-01 18:08:09.771826
+remote_dir

# 2023-10-01 18:08:57.616116
+str(EXPERIMENT_DIR).replace(str(local_dir),'')

# 2023-10-01 18:09:05.682357
+str(EXPERIMENT_DIR).replace(str(LOCAL_DIR),'')

# 2023-10-01 18:09:09.480348
+LOCAL_DIR

# 2023-10-01 18:09:17.482328
+EXPERIMENT_DIR

# 2023-10-01 18:09:44.424567
+str(local_dir)

# 2023-10-01 18:09:48.825007
+str(LOCAL_DIR)

# 2023-10-01 18:10:16.163409
+LOCAL_DIR

# 2023-10-01 18:10:26.653112
+EXPERIMENT_DIR

# 2023-10-01 18:10:34.076754
+remote_dir

# 2023-10-01 18:11:07.444873
+LOCAL_DIR

# 2023-10-01 18:11:21.534281
+EXPERIMENT_DIR

# 2023-10-01 18:11:26.060446
+remote_dir

# 2023-10-01 18:19:03.028128
+q

# 2023-10-01 18:19:10.528530
+EXPERIMENT_DIR

# 2023-10-01 18:19:14.772285
+remote_dir

# 2023-10-01 18:19:27.295968
+q

# 2023-10-01 18:19:33.748482
+NAMED_EXPERIMENT_DIR

# 2023-10-01 18:19:38.561327
+remote_dir

# 2023-10-01 18:19:41.190639
+n

# 2023-10-01 18:20:58.173774
+q

# 2023-10-01 18:21:04.414576
+n

# 2023-10-01 18:21:57.741008
+q

# 2023-10-01 18:22:30.643020
+n

# 2023-10-01 18:24:14.123807
+q

# 2023-10-01 18:24:28.120061
+roma_args

# 2023-10-01 18:24:39.548372
+log_dir

# 2023-10-01 18:24:51.267773
+replace_local_with_remote(log_dir)

# 2023-10-01 18:25:04.051525
+log_dir

# 2023-10-01 18:26:13.884512
+LOCAL_DIR

# 2023-10-01 18:27:23.077122
+EXPERIMENT_DIR

# 2023-10-01 18:27:31.479791
+remote_dir

# 2023-10-01 18:28:42.906038
+EXPERIMENT_DIR

# 2023-10-01 18:29:52.987081
+static.REMOTE_DEV_PATH

# 2023-10-01 18:33:09.483429
+q

# 2023-10-01 18:33:16.912675
+n

# 2023-10-01 18:33:31.733227
+q

# 2023-10-01 18:33:36.527657
+n

# 2023-10-01 18:33:38.103847
+remote_dir

# 2023-10-01 18:33:52.663731
+q

# 2023-10-01 18:33:57.465180
+n

# 2023-10-01 18:33:58.732422
+remote_dir

# 2023-10-01 18:34:05.163629
+n

# 2023-10-01 18:37:18.307490
+job_dir

# 2023-10-01 18:37:23.809856
+replace_local_with_remote(job_dir)

# 2023-10-01 18:37:42.709183
+replace_local_with_remote(log_dir)

# 2023-10-01 18:45:58.896766
+q

# 2023-10-01 18:46:06.298392
+roma_log_dir

# 2023-10-01 18:46:13.362911
+roma_output_dir

# 2023-10-01 18:46:19.898230
+boot_file_name

# 2023-10-01 18:50:54.523283
+q

# 2023-10-01 18:51:05.981588
+c

# 2023-10-01 18:52:09.138698
+config.num_gpus

# 2023-10-01 18:52:10.066607
+n

# 2023-10-01 18:52:15.529862
+config.remote_code_dir

# 2023-10-01 18:52:35.086422
+q

# 2023-10-01 18:52:47.621956
+config.boot_file_name

# 2023-10-01 18:52:58.122639
+n

# 2023-10-01 18:53:02.821064
+config.boot_file

# 2023-10-01 18:53:12.127127
+str(Path(config.remote_code_dir)
+)

# 2023-10-01 18:53:21.953641
+config.boot_file_name

# 2023-10-01 18:53:33.809408
+Path(config.remote_code_dir) / Path(config.boot_file_name)

# 2023-10-01 18:53:38.983310
+ Path(config.boot_file_name)

# 2023-10-01 18:53:45.048029
+Path(config.remote_code_dir)

# 2023-10-01 18:53:47.817625
+Path(config.remote_code_dir) / Path(config.boot_file_name)

# 2023-10-01 18:53:57.221956
+l

# 2023-10-01 18:53:59.009631
+n

# 2023-10-01 18:54:02.482363
+body

# 2023-10-01 18:54:15.124382
+body['algorithm']

# 2023-10-01 18:54:20.981006
+body['algorithm']['environments']

# 2023-10-01 18:54:26.684583
+config.environment_variables

# 2023-10-01 18:58:26.808127
+q

# 2023-10-01 18:58:33.106109
+c

# 2023-10-01 18:58:37.345708
+config.parameters

# 2023-10-01 18:58:52.950044
+body

# 2023-10-01 18:59:04.934226
+body['algorithm']['parameters']

# 2023-10-01 18:59:38.562226
+q

# 2023-10-01 19:02:45.520460
+body

# 2023-10-01 19:02:58.160151
+n

# 2023-10-01 19:03:11.232199
+resp.content

# 2023-10-01 19:04:29.838423
+q

# 2023-10-01 19:04:39.767749
+c

# 2023-10-01 19:05:28.054909
+resp.content

# 2023-10-01 19:10:13.499819
+json.loads(resp.content)

# 2023-10-01 19:10:52.761233
+q

# 2023-10-01 20:47:33.430414
+EXPERIMENT_DIR

# 2023-10-01 20:47:39.201732
+job_dir

# 2023-10-01 20:48:02.617760
+q

# 2023-10-01 20:48:37.775889
+n

# 2023-10-01 20:48:39.297721
+remote_job_dir

# 2023-10-01 20:48:52.525005
+job_dir

# 2023-10-01 20:49:23.230432
+remote_job_dir

# 2023-10-01 20:49:31.975859
+Path(remote_job_dir)

# 2023-10-01 20:49:40.379897
+Path(remote_job_dir).parent

# 2023-10-01 20:49:58.058141
+q

# 2023-10-01 20:50:03.139655
+n

# 2023-10-01 20:50:05.195502
+q

# 2023-10-01 20:50:57.305677
+n

# 2023-10-01 20:51:00.047445
+job_dir

# 2023-10-01 20:51:03.478206
+remote_job_dir

# 2023-10-01 20:51:06.031314
+n

# 2023-10-01 20:52:07.719816
+q

# 2023-10-01 20:52:12.310545
+c

# 2023-10-01 20:55:12.349128
+q

# 2023-10-01 20:55:57.838968
+c

# 2023-10-01 21:00:37.801264
+l

# 2023-10-01 21:00:42.711666
+config.remote_code_dir

# 2023-10-01 21:04:41.983997
+q

# 2023-10-01 21:04:52.428969
+c

# 2023-10-01 21:28:28.192221
+header

# 2023-10-01 21:31:27.792051
+q

# 2023-10-01 21:31:34.269930
+hyper_dict

# 2023-10-01 21:31:44.195067
+print(args)

# 2023-10-01 21:32:04.318897
+n

# 2023-10-01 21:32:07.492954
+print(header)

# 2023-10-01 21:35:59.024258
+q

# 2023-10-01 21:45:47.724067
+c

# 2023-10-01 21:45:54.457927
+l

# 2023-10-01 21:45:58.856135
+print(body)

# 2023-10-01 21:46:06.957000
+from pprint import pprint

# 2023-10-01 21:46:10.156067
+pprint(body)

# 2023-10-01 21:47:03.951107
+q

# 2023-10-01 21:47:23.066595
+config.environment_variables

# 2023-10-01 21:48:17.037083
+q

# 2023-10-01 21:54:10.433598
+out

# 2023-10-01 21:54:26.296466
+json.loads(resp.content)

# 2023-10-01 21:54:39.247821
+resp.content

# 2023-10-01 21:54:45.296485
+out.content

# 2023-10-01 21:55:09.005030
+import json

# 2023-10-01 21:55:14.310228
+tmp = json.loads(out.content)

# 2023-10-01 21:55:15.404847
+tmp

# 2023-10-01 21:57:27.313608
+job_dir

# 2023-10-01 21:59:09.366870
+q

# 2023-10-01 21:59:24.444264
+hyper

# 2023-10-01 21:59:43.742947
+print(f"{roma_args['name']}: {hyper}")

# 2023-10-01 22:00:00.889508
+print(f"{job_name}: {hyper}")

# 2023-10-01 22:00:50.433961
+q

# 2023-10-02 14:20:33.213810
+l

# 2023-10-02 14:20:52.746300
+NAMED_EXPERIMENT_DIR

# 2023-10-02 14:21:04.724729
+PROJECT_DIR

# 2023-10-02 14:21:14.557331
+hyper

# 2023-10-02 14:21:45.684604
+remote_project_dir = replace_local_with_remote(PROJECT_DIR)

# 2023-10-02 14:21:47.293308
+remote_project_dir

# 2023-10-02 14:22:31.976466
+remote_project_dir = replace_local_with_remote(PROJECT_DIR, with_bucket=True)

# 2023-10-02 14:22:33.673222
+remote_project_dir

# 2023-10-02 14:23:04.973373
+remote_project_dir['home_dir'] = replace_local_with_remote(PROJECT_DIR, with_bucket=True)

# 2023-10-02 14:23:10.875365
+hyper['home_dir'] = replace_local_with_remote(PROJECT_DIR, with_bucket=True)

# 2023-10-02 14:23:12.874916
+hyper

# 2023-10-02 14:23:35.077384
+q

# 2023-10-02 14:34:34.147432
+n

# 2023-10-02 14:36:01.087785
+q

# 2023-10-02 14:36:08.504093
+n

# 2023-10-02 14:37:00.570133
+q

# 2023-10-02 14:37:06.631076
+n

# 2023-10-02 14:37:09.244560
+q

# 2023-10-02 15:15:25.301323
+c

# 2023-10-02 15:15:32.002715
+n

# 2023-10-02 15:15:42.899994
+from pprint import pprint

# 2023-10-02 15:15:45.262615
+pprint(body)

# 2023-10-02 15:30:53.496597
+q

# 2023-10-02 15:31:17.822553
+n

# 2023-10-02 15:31:38.443457
+q

# 2023-10-02 15:51:30.726443
+n

# 2023-10-02 15:51:35.508886
+pprint(body)

# 2023-10-02 15:51:43.483108
+c

# 2023-10-02 16:13:05.818465
+s

# 2023-10-02 16:13:06.641744
+n

# 2023-10-02 16:13:08.984651
+s

# 2023-10-02 16:13:09.884710
+n

# 2023-10-02 16:13:12.484889
+s

# 2023-10-02 16:13:13.485608
+n

# 2023-10-02 16:13:24.483762
+s

# 2023-10-02 16:13:27.301713
+n

# 2023-10-02 16:13:41.385173
+pprint

# 2023-10-02 16:13:49.396516
+from pprint import pprint

# 2023-10-02 16:13:52.311133
+pprint(body)

# 2023-10-02 16:13:58.751999
+req_method

# 2023-10-02 16:14:01.986264
+request_url

# 2023-10-02 16:14:09.986005
+headers

# 2023-10-02 16:16:51.973129
+q

# 2023-10-02 16:27:29.396737
+s

# 2023-10-02 16:27:33.054836
+n

# 2023-10-02 16:27:34.521826
+s

# 2023-10-02 16:27:35.454977
+n

# 2023-10-02 16:27:42.699899
+s

# 2023-10-02 16:27:43.316826
+r

# 2023-10-02 16:27:46.557277
+n

# 2023-10-02 16:27:48.787194
+r

# 2023-10-02 16:27:52.313067
+q

# 2023-10-02 16:28:18.116801
+s

# 2023-10-02 16:28:21.557629
+r

# 2023-10-02 16:28:26.156958
+s

# 2023-10-02 16:28:33.655906
+n

# 2023-10-02 16:28:44.153270
+variable_name

# 2023-10-02 16:28:48.189663
+s

# 2023-10-02 16:28:50.864268
+r

# 2023-10-02 16:28:51.835101
+s

# 2023-10-02 16:28:53.789624
+r

# 2023-10-02 16:28:56.566229
+s

# 2023-10-02 16:29:00.123350
+n

# 2023-10-02 16:29:09.965465
+print(req_method)

# 2023-10-02 16:29:16.466803
+print(request_url)

# 2023-10-02 16:29:18.510714
+n

# 2023-10-02 16:29:59.540615
+print(resp.content)

# 2023-10-02 16:30:07.445897
+q

# 2023-10-02 16:32:49.202257
+s

# 2023-10-02 16:32:50.701650
+n

# 2023-10-02 16:32:52.947823
+s

# 2023-10-02 16:32:56.778158
+n

# 2023-10-02 16:32:57.784176
+r

# 2023-10-02 16:32:59.084751
+s

# 2023-10-02 16:33:01.920828
+n

# 2023-10-02 16:33:02.653891
+s

# 2023-10-02 16:33:03.283493
+n

# 2023-10-02 16:33:08.982900
+s

# 2023-10-02 16:33:11.880186
+n

# 2023-10-02 16:33:20.221365
+request_url

# 2023-10-02 16:33:25.590631
+req_method

# 2023-10-02 16:33:36.576787
+n

# 2023-10-02 16:33:40.545332
+c

# 2023-10-02 16:43:40.970933
+n

# 2023-10-02 16:43:46.489732
+roma_args.output_path

# 2023-10-02 16:44:04.460234
+q

# 2023-10-02 16:45:01.562522
+c

# 2023-10-02 16:47:05.141723
+out.content

# 2023-10-02 16:47:24.386888
+q

# 2023-10-02 16:48:16.577584
+print(out.content)

# 2023-10-02 16:48:20.116589
+pprint(out.content)

# 2023-10-02 16:48:35.516600
+pprint(json.loads(resp.content))

# 2023-10-02 16:48:41.145420
+pprint(json.loads(out.content))

# 2023-10-02 16:49:14.165149
+395b8acb-8ff2-4cb0-a234-c375238a0726'

# 2023-10-02 16:49:26.417127
+print(out['metadata'])

# 2023-10-02 16:49:31.230263
+print(out.content['metadata'])

# 2023-10-02 16:49:44.582233
+tmp = json.loads(resp.content)

# 2023-10-02 16:51:01.535861
+tmp = json.loads(out.content)

# 2023-10-02 16:51:02.354963
+tmp

# 2023-10-02 16:51:11.149080
+tmp['metadata']

# 2023-10-02 16:51:17.444227
+tmp['metadata']['id']

# 2023-10-02 16:53:01.188116
+q

# 2023-10-02 17:01:56.780465
+roma_args.output_path

# 2023-10-02 17:02:48.550984
+hyper

# 2023-10-02 17:06:42.281908
+q

# 2023-10-02 17:48:41.658165
+print(resp.content)

# 2023-10-02 17:49:01.690848
+print(resp.status_code)

# 2023-10-02 17:49:31.771327
+q

# 2023-10-03 13:53:30.892634
+n

# 2023-10-03 13:53:33.882865
+filename

# 2023-10-03 13:54:04.178555
+n

# 2023-10-03 13:54:11.604323
+root_input

# 2023-10-03 13:54:56.421399
+n

# 2023-10-03 13:55:10.318865
+args.llm_weights_path

# 2023-10-03 13:55:18.415037
+print(args.llm_weights_path)

# 2023-10-03 13:56:00.471588
+q

# 2023-10-03 13:57:17.033617
+args.input_dir

# 2023-10-03 13:57:20.633926
+print(args.input_dir)

# 2023-10-03 13:57:43.758532
+n

# 2023-10-03 13:57:50.163793
+print(args.weights_input_dir)

# 2023-10-03 13:58:08.210480
+debug mlh.add_home(args.input_dir, args.weights_dir)

# 2023-10-03 13:58:09.583633
+s

# 2023-10-03 13:58:10.353483
+n

# 2023-10-03 13:58:16.151130
+print(home_dir)

# 2023-10-03 13:58:20.710855
+s

# 2023-10-03 13:58:22.690635
+n

# 2023-10-03 13:58:26.581459
+print(path)

# 2023-10-03 13:58:50.541677
+r

# 2023-10-03 13:59:29.451503
+n

# 2023-10-03 13:59:41.646604
+q

# 2023-10-03 14:02:12.415429
+n

# 2023-10-03 14:02:15.092735
+c

# 2023-10-03 14:45:29.719143
+l

# 2023-10-03 14:45:51.013970
+tmp = replace_local_with_remote(PROJECT_DIR, with_bucket=True)

# 2023-10-03 14:45:51.840912
+tmp

# 2023-10-03 14:46:01.169841
+PROJECT_DIR

# 2023-10-03 14:46:18.739297
+PROJECT_DIR/'data'

# 2023-10-03 14:46:44.744691
+q

# 2023-10-03 14:58:47.448797
+n

# 2023-10-03 14:58:50.790065
+header

# 2023-10-03 14:58:56.194301
+c

# 2023-10-03 14:59:44.292434
+q

# 2023-10-03 14:59:56.993008
+n

# 2023-10-03 15:00:13.392315
+print(out.content)

# 2023-10-03 15:00:19.832566
+q

# 2023-10-03 15:00:40.005057
+resp.status_code

# 2023-10-03 15:01:31.693267
+q

# 2023-10-03 15:40:20.035639
+s

# 2023-10-03 15:40:20.878922
+n

# 2023-10-03 15:40:34.249360
+ _string_to_list(args[0])

# 2023-10-03 15:40:44.171658
+n

# 2023-10-03 15:40:47.235335
+l

# 2023-10-03 15:40:51.387771
+args.watermark_layers

# 2023-10-03 15:40:56.114640
+print(args.watermark_layers)

# 2023-10-03 15:40:57.834833
+c

# 2023-10-03 15:41:10.605386
+q

# 2023-10-03 15:51:26.258638
+c

# 2023-10-03 15:59:25.381419
+s

# 2023-10-03 15:59:32.941986
+n

# 2023-10-03 15:59:42.289421
+s

# 2023-10-03 15:59:44.137109
+n

# 2023-10-03 16:00:43.743755
+c

# 2023-10-04 12:59:47.169790
+args.cuda

# 2023-10-04 12:59:50.004671
+print(args.cuda)

# 2023-10-04 12:59:53.498585
+print(self.args.cuda)

# 2023-10-04 12:59:59.903021
+print(self.args.device)

# 2023-10-04 13:01:12.161683
+q

# 2023-10-04 15:15:28.025356
+print(job_name)

# 2023-10-04 15:15:34.879549
+print(job_dir)

# 2023-10-04 15:15:47.900046
+print(Path(job_dir).parents)

# 2023-10-04 15:15:52.597405
+print(Path(job_dir).parents[1])

# 2023-10-04 15:16:02.209192
+print(Path(job_dir).parts[1])

# 2023-10-04 15:16:06.082340
+print(Path(job_dir).parts[-2])

# 2023-10-04 15:16:53.449654
+q

# 2023-10-04 15:23:24.852407
+c

# 2023-10-04 17:59:02.242400
+"{job_name}_{Path(job_dir).parts[-2]}"

# 2023-10-04 17:59:09.125844
+f"{job_name}_{Path(job_dir).parts[-2]}"

# 2023-10-04 17:59:13.716573
+tmp = f"{job_name}_{Path(job_dir).parts[-2]}"

# 2023-10-04 17:59:15.305902
+len(tmp)

# 2023-10-04 17:59:38.961518
+tmp.replace(":","_")

# 2023-10-04 17:59:48.875875
+q

# 2023-10-06 13:58:31.629790
+c

# 2023-10-06 14:02:41.760427
+n

# 2023-10-06 14:02:49.240128
+s

# 2023-10-06 14:02:50.290226
+n

# 2023-10-06 14:03:00.590588
+s

# 2023-10-06 14:03:01.510263
+n

# 2023-10-06 14:03:03.004034
+s

# 2023-10-06 14:03:05.012164
+n

# 2023-10-06 14:04:28.341757
+q

# 2023-10-06 14:04:31.303437
+y

# 2023-10-06 14:04:33.082743
+c

# 2023-10-06 14:07:40.648046
+n

# 2023-10-06 14:08:06.936861
+q

# 2023-10-06 14:08:34.138763
+s

# 2023-10-06 14:08:35.459991
+n

# 2023-10-06 14:08:38.049641
+s

# 2023-10-06 14:08:39.070478
+n

# 2023-10-06 14:09:14.297470
+q

# 2023-10-06 14:09:17.584356
+c

# 2023-10-06 14:09:28.670902
+n

# 2023-10-06 14:09:39.359146
+q

# 2023-10-06 14:09:48.242141
+s

# 2023-10-06 14:09:49.011566
+n

# 2023-10-06 14:10:06.394332
+s

# 2023-10-06 14:10:07.043745
+n

# 2023-10-06 14:10:37.300433
+request_url

# 2023-10-06 14:11:24.160501
+n

# 2023-10-06 14:11:45.116010
+q

# 2023-10-06 14:15:56.601960
+c

# 2023-10-06 14:17:10.928680
+n

# 2023-10-06 14:17:12.878691
+bucket_name

# 2023-10-06 14:17:15.728945
+object_key

# 2023-10-06 14:17:29.942139
+n

# 2023-10-06 14:18:28.798455
+q

# 2023-10-06 14:18:32.717240
+c

# 2023-10-06 14:19:26.138402
+q

# 2023-10-06 14:22:38.126301
+object_key

# 2023-10-06 14:22:49.531124
+object_key[:-1]

# 2023-10-06 14:23:22.651580
+q

# 2023-10-12 14:47:29.059433
+s

# 2023-10-12 14:47:29.927353
+n

# 2023-10-12 14:47:52.307210
+debug os.path.isdir(src_path)

# 2023-10-12 14:47:52.994821
+s

# 2023-10-12 14:47:53.700729
+n

# 2023-10-12 14:47:56.584556
+q

# 2023-10-12 14:47:57.469556
+q

# 2023-10-12 14:48:03.297966
+s

# 2023-10-12 14:48:04.127566
+n

# 2023-10-12 14:48:24.814809
+q

# 2023-10-12 14:49:48.247376
+src_path

# 2023-10-12 14:49:52.925688
+dst_path

# 2023-10-12 14:50:11.825904
+src_path.startswith(constant.OBS_HEAD_FORMAT)

# 2023-10-12 14:50:21.936678
+dst_path.startswith(constant.OBS_HEAD_FORMAT)

# 2023-10-12 14:50:33.171797
+n

# 2023-10-12 14:50:43.313412
+print(os.path.isdir(src_path))

# 2023-10-12 14:50:53.481348
+print(self.is_obs_directory(src_path))

# 2023-10-12 14:51:03.787312
+src_path

# 2023-10-12 14:51:14.292483
+src_path[:-1]

# 2023-10-12 14:51:22.493676
+print(self.is_obs_directory(src_path[:-1]))

# 2023-10-12 14:52:31.480318
+debug self.is_obs_directory(src_path)

# 2023-10-12 14:52:32.184561
+s

# 2023-10-12 14:52:33.301411
+n

# 2023-10-12 14:52:49.586075
+print(obs_path)

# 2023-10-12 14:53:05.065256
+ constant.SEP

# 2023-10-12 14:53:10.856441
+n

# 2023-10-12 14:53:15.056167
+print(obs_path)

# 2023-10-12 14:53:29.470511
+constant.SEP

# 2023-10-12 14:53:33.310152
+ obs_path += constant.SEP

# 2023-10-12 14:53:35.350513
+obs_path

# 2023-10-12 14:53:39.174584
+q

# 2023-10-12 14:54:11.727507
+obs_path

# 2023-10-12 14:54:16.073521
+obs_path.endswith(constant.SEP)

# 2023-10-12 14:54:21.206174
+n

# 2023-10-12 14:54:24.143718
+s

# 2023-10-12 14:54:25.033771
+n

# 2023-10-12 14:55:10.650142
+q

# 2023-10-12 14:55:21.851490
+print(self._check_obs_path_exist_by_metadata_api(obs_path))

# 2023-10-12 14:55:28.630657
+debug self._check_obs_path_exist_by_metadata_api(obs_path)

# 2023-10-12 14:55:29.305619
+s

# 2023-10-12 14:56:08.487376
+q

# 2023-10-12 14:56:09.352844
+q

# 2023-10-12 14:56:14.879424
+c

# 2023-10-12 14:56:17.218193
+n

# 2023-10-12 14:56:19.481515
+bucket_name

# 2023-10-12 14:56:24.853668
+object_key

# 2023-10-12 14:56:35.637268
+n

# 2023-10-12 14:59:23.627422
+q

# 2023-10-12 14:59:31.667524
+n

# 2023-10-12 14:59:41.793276
+c

# 2023-10-12 15:02:57.065484
+s

# 2023-10-12 15:02:58.070119
+n

# 2023-10-12 15:02:59.281247
+s

# 2023-10-12 15:03:00.590227
+n

# 2023-10-12 15:03:05.225280
+object_key

# 2023-10-12 15:03:14.060201
+n

# 2023-10-12 15:03:59.494709
+response.content

# 2023-10-12 15:04:37.999327
+n

# 2023-10-12 15:05:06.741786
+nn

# 2023-10-12 15:05:07.961931
+n

# 2023-10-12 15:06:29.208485
+s

# 2023-10-12 15:06:30.219045
+n

# 2023-10-12 15:07:25.119880
+l

# 2023-10-12 15:07:42.522048
+src_path

# 2023-10-12 15:16:54.122999
+q

# 2023-10-12 15:21:09.374129
+ s3_client

# 2023-10-12 15:21:50.723535
+q

# 2023-10-12 15:22:55.982399
+s

# 2023-10-12 15:22:57.269279
+n

# 2023-10-12 15:22:58.242226
+ll

# 2023-10-12 15:22:59.083081
+s

# 2023-10-12 15:22:59.741329
+n

# 2023-10-12 15:23:04.514053
+l

# 2023-10-12 15:23:07.198832
+n

# 2023-10-12 15:23:12.718485
+bucket_file_service_address

# 2023-10-12 15:24:14.488983
+b 596

# 2023-10-12 15:24:18.032203
+c

# 2023-10-12 15:24:26.474113
+print(request_url)

# 2023-10-12 15:25:13.319540
+q

# 2023-10-12 15:41:42.380041
+c

# 2023-10-12 15:41:47.044652
+n

# 2023-10-12 15:42:02.402699
+objects_key_and_size

# 2023-10-12 15:42:15.123807
+bucket_name

# 2023-10-12 15:42:18.934655
+bucket_dir_path

# 2023-10-12 15:42:26.839600
+n

# 2023-10-12 15:50:18.258867
+q

# 2023-10-12 15:51:23.522752
+s

# 2023-10-12 15:51:26.443293
+r

# 2023-10-12 15:51:28.061075
+s

# 2023-10-12 15:51:29.354233
+n

# 2023-10-12 15:51:58.199539
+c

# 2023-10-12 15:58:16.866794
+copy_source['key']

# 2023-10-12 15:58:21.787147
+copy_source['Key']

# 2023-10-12 15:58:42.367714
+n

# 2023-10-12 15:58:48.306261
+c

# 2023-10-12 16:24:41.424131
+n

# 2023-10-12 16:24:47.444773
+s

# 2023-10-12 16:25:25.552728
+n

# 2023-10-12 16:25:50.337486
+ll

# 2023-10-12 16:25:57.161692
+l

# 2023-10-12 16:26:01.482811
+b 444

# 2023-10-12 16:26:01.839697
+c

# 2023-10-12 16:26:08.277808
+n

# 2023-10-12 16:26:52.122256
+c

# 2023-10-12 16:27:16.738493
+n

# 2023-10-12 16:27:17.621370
+s

# 2023-10-12 16:27:18.417137
+n

# 2023-10-12 16:27:33.806785
+s

# 2023-10-12 16:27:35.360452
+n

# 2023-10-12 16:27:40.464826
+s

# 2023-10-12 16:27:41.248240
+n

# 2023-10-12 16:27:50.847474
+q

# 2023-10-12 16:38:11.713773
+s3_client.copy_objectq

# 2023-10-12 16:38:12.352761
+q

# 2023-10-12 16:39:27.401726
+print(response)

# 2023-10-12 16:42:35.187898
+q

# 2023-10-12 16:51:39.512714
+config

# 2023-10-12 16:52:05.592258
+response

# 2023-10-12 16:52:28.853940
+head_object_request

# 2023-10-12 16:52:49.483073
+call_args

# 2023-10-12 16:53:12.462379
+transfer_future.meta.size

# 2023-10-12 16:57:32.191734
+q

# 2023-10-12 17:15:46.432969
+l

# 2023-10-12 17:15:50.256771
+parsed_response

# 2023-10-12 17:15:54.428499
+n

# 2023-10-12 17:16:27.924982
+print(error_class)

# 2023-10-12 17:16:32.438234
+q

# 2023-10-12 17:20:39.268882
+s

# 2023-10-12 17:20:42.328881
+r

# 2023-10-12 17:20:43.186190
+s

# 2023-10-12 17:20:50.430631
+print(args)

# 2023-10-12 17:20:55.241589
+ll

# 2023-10-12 17:20:58.888621
+print(kwargs)

# 2023-10-12 17:21:07.484417
+l

# 2023-10-12 17:21:26.414481
+l 0

# 2023-10-12 17:21:41.487934
+n

# 2023-10-12 17:22:27.491442
+q

# 2023-10-12 17:22:35.908755
+s

# 2023-10-12 17:22:51.607857
+r

# 2023-10-12 17:22:54.735149
+n

# 2023-10-12 17:22:59.071094
+print(service_name)

# 2023-10-12 17:23:00.788939
+n

# 2023-10-12 17:23:15.022259
+self.meta.config

# 2023-10-12 17:23:20.782900
+print(self.meta.config)

# 2023-10-12 17:24:06.916560
+q

# 2023-10-12 17:27:02.946200
+operation_name

# 2023-10-12 17:27:07.608220
+api_params

# 2023-10-12 17:30:18.998444
+q

# 2023-10-12 17:30:51.849122
+c

# 2023-10-19 14:49:32.386237
+l

# 2023-10-19 14:50:25.427190
+train_loader

# 2023-10-19 14:52:17.793298
+config.max_iters

# 2023-10-19 14:53:21.784467
+q

# 2023-10-19 14:57:39.341821
+n

# 2023-10-19 14:58:15.639492
+q

# 2023-10-19 14:58:32.411761
+c

# 2023-10-19 14:58:41.741898
+trainer.iter_num

# 2023-10-19 14:58:47.035849
+ args.train_eval_every

# 2023-10-19 14:58:50.560556
+print(args.train_eval_every)

# 2023-10-19 15:00:13.225689
+args.train_eval_every

# 2023-10-19 15:00:16.256912
+q

# 2023-10-19 15:01:45.482133
+n

# 2023-10-19 15:01:55.275270
+trainer.iter_num

# 2023-10-19 15:01:56.759899
+q

# 2023-10-19 15:02:26.669953
+trainer.iter_num

# 2023-10-19 15:02:32.611022
+q

# 2023-10-19 15:03:08.026774
+print(_)

# 2023-10-19 15:03:09.374445
+n

# 2023-10-19 15:04:21.138671
+q

# 2023-10-19 15:05:18.680316
+trainer.iter_num

# 2023-10-19 15:05:51.214594
+n

# 2023-10-19 15:05:56.525762
+c

# 2023-10-19 15:05:57.724742
+q

# 2023-10-30 17:34:43.950515
+self.watermarked_layers

# 2023-10-30 17:34:47.519816
+n

# 2023-10-30 17:34:50.851527
+q

# 2023-10-30 17:36:09.139387
+n

# 2023-10-30 17:36:17.636112
+c

# 2023-10-30 17:36:28.234094
+q

# 2023-10-30 17:36:57.905563
+n

# 2023-10-30 17:36:59.687287
+c

# 2023-10-30 17:37:09.677852
+w

# 2023-10-30 17:37:10.157697
+q

# 2023-10-30 17:40:47.982051
+n

# 2023-10-30 17:40:52.462844
+q

# 2023-10-30 17:41:16.255459
+n

# 2023-10-30 17:41:22.568650
+q

# 2023-10-30 17:41:52.001965
+n

# 2023-10-30 17:41:57.191576
+q

# 2023-11-07 15:02:59.398709
+print(self.watermarked_layers)

# 2023-11-07 15:03:00.875988
+n

# 2023-11-07 15:03:10.376097
+q

# 2023-11-07 15:03:58.789808
+n

# 2023-11-07 15:04:07.290741
+q

# 2023-11-07 15:04:25.382070
+layer

# 2023-11-07 15:04:39.792299
+layer.parameters

# 2023-11-07 15:04:41.893351
+layer.parameters()

# 2023-11-07 15:04:52.067532
+next(layer.parameters())

# 2023-11-07 15:04:54.443509
+qnext(layer.parameters())

# 2023-11-07 15:04:55.263574
+q

# 2023-11-07 18:03:18.593540
+config

# 2023-11-07 18:03:57.867374
+l

# 2023-11-07 18:04:01.499039
+n

# 2023-11-07 18:04:05.393263
+print(body)

# 2023-11-07 18:04:08.593182
+pprint(body)

# 2023-11-07 18:04:14.693243
+q

# 2023-11-07 18:06:54.113486
+n

# 2023-11-07 18:06:57.620684
+pprint(body)

# 2023-11-07 18:14:15.669676
+q

# 2023-11-07 18:15:01.766410
+l

# 2023-11-07 18:15:09.694035
+config.data_obs_url

# 2023-11-07 18:15:29.663978
+q

# 2023-11-07 18:22:36.756408
+config.parameters

# 2023-11-07 18:22:40.300734
+c

# 2023-11-07 18:45:08.105235
+q

# 2023-11-07 18:45:18.183347
+c

# 2023-11-07 18:48:16.787296
+config.data_obs_url

# 2023-11-07 18:48:31.635915
+q

# 2023-11-14 17:12:25.432256
+tmp =  get_all_files(remote_path, region)

# 2023-11-14 17:12:28.728602
+print(tmp)

# 2023-11-14 17:12:45.278079
+c

# 2023-11-14 17:13:08.139146
+tmp =  get_all_files(remote_path, region)

# 2023-11-14 17:13:17.992370
+print(tmp)

# 2023-11-14 17:13:32.533656
+q

# 2023-11-14 17:17:08.965584
+print(all_files)

# 2023-11-14 17:17:11.380604
+q

# 2023-11-15 17:05:42.624363
+tmp

# 2023-11-15 17:05:44.328690
+tmp.shape

# 2023-11-15 17:05:50.827977
+len(tmp)

# 2023-11-15 17:06:45.832033
+q

# 2023-11-15 17:07:10.087969
+len(self.transformer.h)

# 2023-11-15 17:07:57.923683
+for layer in self.transformer.h: print(layer)

# 2023-11-15 17:08:04.058290
+layer

# 2023-11-15 17:08:20.574447
+layer.requires_grad_()

# 2023-11-15 17:08:23.602310
+print(layer.requires_grad_())

# 2023-11-15 17:08:54.953854
+layer.requires_grad

# 2023-11-15 17:10:09.682464
+layer.ln_1

# 2023-11-15 17:10:15.787411
+layer.ln_1.requires_grad

# 2023-11-15 17:10:18.069024
+layer.ln_1.requires_grad_()

# 2023-11-15 17:10:26.829102
+l

# 2023-11-15 17:12:33.444299
+layer.get_submodule("ln_1")

# 2023-11-15 17:12:43.194955
+layer.ln_1

# 2023-11-15 17:12:45.547359
+layer.ln_1.parameters

# 2023-11-15 17:12:48.488993
+layer.ln_1.parameters(
+)

# 2023-11-15 17:13:34.673263
+tmp1 = next(layer.ln_1.parameters())

# 2023-11-15 17:13:35.708907
+tmp1

# 2023-11-15 17:13:40.556427
+tmp1.requires_grad

# 2023-11-15 17:13:48.039878
+next(layer.ln_1.parameters()).requires_grad

# 2023-11-15 17:13:51.339210
+print(next(layer.ln_1.parameters()).requires_grad)

# 2023-11-15 17:14:49.915987
+tmp = [(next(layer.ln_1.parameters()).requires_grad) for layer in self.transformer.h]

# 2023-11-15 17:14:50.604382
+tmp

# 2023-11-15 17:15:37.390510
+q

# 2023-11-15 17:17:27.866817
+print(self.added_layers)

# 2023-11-15 17:17:38.154774
+len(self.added_layers)

# 2023-11-15 17:17:50.110631
+print(self.watermarked_layers)

# 2023-11-15 17:19:13.031388
+self.transformer.lm_head

# 2023-11-15 17:19:21.716946
+self.lm_head

# 2023-11-15 17:20:18.567708
+n

# 2023-11-15 17:20:34.620690
+self.lm_head

# 2023-11-15 17:20:37.663705
+self.lm_head.parameters()

# 2023-11-15 17:20:41.338498
+next(self.lm_head.parameters())

# 2023-11-15 17:20:44.128754
+print next(self.lm_head.parameters())

# 2023-11-15 17:20:47.878352
+print(next(self.lm_head.parameters()))

# 2023-11-15 17:20:53.996353
+print(next(self.lm_head.parameters()).requires_grad)

# 2023-11-15 17:21:10.199660
+n

# 2023-11-15 17:21:16.004967
+c

# 2023-11-15 17:21:26.686987
+print(self.added_layers)

# 2023-11-15 17:22:03.387488
+q

# 2023-11-15 17:22:26.595320
+c

# 2023-11-15 17:22:29.221928
+print(self.added_layers)

# 2023-11-15 17:22:55.829521
+q

# 2023-11-15 17:23:24.148837
+c

# 2023-11-15 17:23:25.757218
+print(self.added_layers)

# 2023-11-15 17:23:38.801078
+q

# 2023-11-15 17:24:36.331201
+print(len(tmp))

# 2023-11-15 17:24:43.991621
+print(self.added_layers)

# 2023-11-15 17:24:50.534135
+print(len(self.added_layers)))

# 2023-11-15 17:24:52.754583
+print(len(self.added_layers))

# 2023-11-15 17:25:45.615541
+q

# 2023-11-15 17:35:14.298795
+l

# 2023-11-15 17:35:25.921709
+l 600

# 2023-11-15 17:35:45.305273
+latents

# 2023-11-15 17:36:20.614446
+latents = torch.stack(latents)

# 2023-11-15 17:36:23.387183
+latents.shape

# 2023-11-15 17:53:14.182431
+q

# 2023-11-15 17:54:03.985542
+print(positions)

# 2023-11-15 18:01:17.383707
+q

# 2023-11-15 18:05:00.313129
+init_embs.shape

# 2023-11-15 18:05:04.451404
+logits.shape

# 2023-11-15 18:05:11.396677
+p_key

# 2023-11-15 18:05:13.557384
+p_key.shape

# 2023-11-15 18:06:04.635632
+latents.shape

# 2023-11-15 18:06:08.637141
+latents[0].shape

# 2023-11-15 18:06:21.701298
+latents_p_key.shape

# 2023-11-15 18:06:28.783202
+latents_pkey.shape

# 2023-11-15 18:16:43.617634
+q

# 2023-11-15 18:24:33.924949
+n

# 2023-11-15 18:24:41.000158
+left.shape

# 2023-11-15 18:24:42.771531
+right.shape

# 2023-11-15 18:24:45.861768
+n

# 2023-11-15 18:24:49.289666
+passthrough_loss

# 2023-11-15 18:24:50.944897
+n

# 2023-11-15 18:25:10.851923
+left

# 2023-11-15 18:25:14.394137
+right

# 2023-11-15 18:25:16.132823
+n

# 2023-11-15 18:25:17.496972
+right

# 2023-11-15 18:25:30.007912
+self.added_layers

# 2023-11-15 18:25:32.900793
+positions

# 2023-11-15 18:25:53.363287
+q

# 2023-11-15 18:36:23.065299
+n

# 2023-11-15 18:36:25.916294
+positions

# 2023-11-15 18:36:29.036195
+q

# 2023-11-15 18:38:43.046762
+positions

# 2023-11-15 18:39:08.860427
+q

# 2023-11-15 18:39:24.582630
+positions

# 2023-11-15 18:39:35.458649
+print(self.added_layers)

# 2023-11-15 18:40:13.856345
+q

# 2023-11-15 18:40:58.741438
+n

# 2023-11-15 18:41:02.637400
+print(positions)

# 2023-11-15 18:41:10.378800
+n

# 2023-11-15 18:41:18.537325
+left

# 2023-11-15 18:41:20.653556
+right

# 2023-11-15 18:41:34.542412
+left

# 2023-11-15 18:41:36.732042
+right

# 2023-11-15 18:41:38.787071
+n

# 2023-11-15 18:41:42.940837
+q

# 2023-11-15 18:49:59.013071
+l

# 2023-11-15 18:50:01.215154
+positions

# 2023-11-15 18:50:11.311647
+n

# 2023-11-15 18:50:30.808785
+left.shape

# 2023-11-15 18:50:32.341856
+right.shape

# 2023-11-15 18:51:33.285639
+q

# 2023-11-15 18:53:15.198067
+n

# 2023-11-15 18:53:17.596253
+positions

# 2023-11-15 18:53:18.886562
+n

# 2023-11-15 18:53:24.061600
+left.shape

# 2023-11-15 18:53:25.592076
+right.shape

# 2023-11-15 18:53:29.985660
+n

# 2023-11-15 18:53:30.977823
+q

# 2023-11-16 13:16:51.651899
+targets

# 2023-11-16 13:16:55.081625
+n

# 2023-11-16 13:16:57.212637
+print(n)

# 2023-11-16 13:17:00.290923
+print(classes)

# 2023-11-16 13:17:56.420767
+targets

# 2023-11-16 13:17:58.870801
+targets.shape

# 2023-11-16 13:18:32.942101
+n

# 2023-11-16 13:18:42.760504
+logits

# 2023-11-16 13:18:44.881225
+logits.shape

# 2023-11-16 13:19:01.188941
+n

# 2023-11-16 13:19:04.939070
+classes

# 2023-11-16 13:19:10.689436
+logits_pkey

# 2023-11-16 13:19:13.291704
+logits_pkey.shape

# 2023-11-16 13:20:26.927169
+logits

# 2023-11-16 13:20:29.737386
+logits.shape

# 2023-11-16 13:20:40.907837
+logits.shape[-1]

# 2023-11-16 13:21:26.868015
+p_key

# 2023-11-16 13:22:05.786138
+n

# 2023-11-16 13:22:20.665598
+logits_pkey.shape

# 2023-11-16 13:22:23.916262
+logits_reg.shape

# 2023-11-16 13:22:27.995667
+logits.shape

# 2023-11-16 13:22:33.845298
+target_pkey

# 2023-11-16 13:22:38.165778
+target_pkey.shape

# 2023-11-16 13:22:56.465447
+n

# 2023-11-16 13:23:05.628864
+latents_pkey.shape

# 2023-11-16 13:23:16.367551
+latents_reg.shape

# 2023-11-16 13:23:33.537741
+n

# 2023-11-16 13:23:41.106690
+print(positions)

# 2023-11-16 13:24:45.244385
+n

# 2023-11-16 13:24:55.116565
+latents_pkey.shape

# 2023-11-16 13:25:02.914463
+latents_pkey[left].shape

# 2023-11-16 13:25:13.587208
+n

# 2023-11-16 13:26:05.872617
+left

# 2023-11-16 13:26:08.782949
+right

# 2023-11-16 13:32:14.800956
+targets_reg

# 2023-11-16 13:40:15.553426
+q

# 2023-11-16 16:29:43.502350
+loss_pkey

# 2023-11-16 16:29:48.532403
+loss_reg

# 2023-11-16 16:29:52.237047
+passthrough_loss

# 2023-11-16 16:30:46.973054
+q

# 2023-11-16 16:31:19.571394
+passthrough_loss

# 2023-11-16 16:31:26.483303
+loss_reg

# 2023-11-16 16:32:43.914451
+passthrough_loss / loss_reg

# 2023-11-16 16:36:12.536680
+(passthrough_loss / loss_reg).item()

# 2023-11-16 16:37:48.746583
+((passthrough_loss+loss_reg) / loss_reg).item()

# 2023-11-16 16:37:55.886328
+q

# 2023-11-16 18:41:10.804850
+l

# 2023-11-16 18:41:16.684642
+self.print_frozen_learnable_params()

# 2023-11-16 18:41:22.009545
+b 483

# 2023-11-16 18:41:22.339107
+c

# 2023-11-16 18:41:26.242054
+self.print_frozen_learnable_params()

# 2023-11-16 18:41:38.733952
+q

# 2023-11-29 15:16:18.818449
+n

# 2023-11-29 15:16:44.423808
+config_keys

# 2023-11-29 15:16:46.462129
+n

# 2023-11-29 15:16:51.067760
+config

# 2023-11-29 15:17:08.590362
+q

# 2023-11-29 15:20:17.171132
+n

# 2023-11-29 15:20:18.280546
+ddp

# 2023-11-29 15:20:22.391689
+n

# 2023-11-29 16:41:16.852088
+print(argv)

# 2023-11-29 16:41:19.100572
+q

# 2023-11-29 16:41:32.212968
+args

# 2023-11-29 16:41:33.548952
+argv

# 2023-11-29 16:47:05.646173
+q

# 2023-11-29 16:48:02.618811
+configs[0]

# 2023-11-29 16:59:36.823999
+q

# 2023-11-29 16:59:46.438277
+configs[0]

# 2023-11-29 17:02:41.938083
+q

# 2023-11-29 17:02:49.229906
+print(args)

# 2023-11-29 17:09:04.034509
+q

# 2023-11-29 17:09:11.942444
+print(args)

# 2023-11-29 17:17:29.911347
+sys.argv[1:]

# 2023-11-29 17:17:31.729337
+import sys

# 2023-11-29 17:17:32.583573
+sys.argv[1:]

# 2023-11-29 17:19:35.974688
+s = '--cats'

# 2023-11-29 17:19:39.408922
+print(s)

# 2023-11-29 17:19:44.509771
+tmp = '--cats'

# 2023-11-29 17:19:51.379847
+tmp.replace("--", "")

# 2023-11-29 17:24:53.465651
+q

# 2023-11-29 17:25:24.065314
+print(default_args)

# 2023-11-29 17:25:32.210722
+print(cmdline_args)

# 2023-11-29 17:25:51.815368
+q

# 2023-11-29 17:26:00.891790
+n

# 2023-11-29 17:26:05.224719
+self.cmdline_args

# 2023-11-29 17:26:06.740891
+n

# 2023-11-29 17:26:49.702395
+q

# 2023-11-29 17:26:54.232652
+n

# 2023-11-29 17:26:57.519317
+self.cmdline_args

# 2023-11-29 17:26:59.108704
+n

# 2023-11-29 17:27:02.092468
+print(name)

# 2023-11-29 17:27:07.865982
+q

# 2023-11-29 17:27:18.458192
+c

# 2023-11-29 17:28:25.222264
+q

# 2023-11-29 17:28:30.523490
+n

# 2023-11-29 17:28:37.012780
+q

# 2023-11-29 17:29:09.488440
+c

# 2023-11-29 17:29:16.792144
+q

# 2023-11-29 17:29:20.557355
+n

# 2023-11-29 17:29:23.603516
+print(name)

# 2023-11-29 17:29:26.096176
+print(value)

# 2023-11-29 17:31:05.109663
+inspect.ismodule(value)

# 2023-11-29 17:31:15.520387
+inspect.isbuiltin(value)

# 2023-11-29 17:31:28.476877
+q

# 2023-11-29 17:32:00.367652
+print(name_
+
+)

# 2023-11-29 17:32:02.468141
+print(name)

# 2023-11-29 17:33:13.792981
+q

# 2023-11-29 17:34:11.079909
+inspect.ismodule(value)

# 2023-11-29 17:34:29.303040
+inspect.isbuiltin(value)

# 2023-11-29 17:34:40.658825
+inspect.isabstract(value)

# 2023-11-29 17:34:46.300394
+value

# 2023-11-29 17:34:55.521861
+name

# 2023-11-29 17:36:53.544234
+q

# 2023-11-29 17:38:44.366150
+n

# 2023-11-29 17:38:49.885518
+c

# 2023-11-29 17:38:51.088362
+q

# 2023-11-29 17:39:18.147405
+print(default_args)

# 2023-11-29 17:39:24.938928
+print(cmdline_args)

# 2023-11-29 17:39:29.905432
+q

# 2023-11-29 17:40:16.824967
+print(self.cmdline_args)

# 2023-11-29 17:40:18.805373
+q

# 2023-11-29 17:40:54.567248
+self.cmdline_parser

# 2023-11-29 17:40:59.847218
+self.default_parser

# 2023-11-29 17:43:51.837115
+q

# 2023-11-29 17:44:02.881019
+print(default_args)

# 2023-11-29 17:44:06.011729
+print(cmdline_args)

# 2023-11-29 17:45:04.693913
+q

# 2023-11-29 17:45:14.353998
+self.cmdline_args

# 2023-11-29 17:45:19.003713
+self.default_parser

# 2023-11-29 17:45:24.613161
+self.cmdline_parser

# 2023-11-29 17:50:07.739521
+q

# 2023-11-29 17:58:37.453572
+c

# 2023-11-29 17:58:38.769573
+l

# 2023-11-29 17:58:44.036309
+print(cmdline_args)

# 2023-11-29 17:58:47.306939
+print(default_args)

# 2023-11-29 17:59:48.657642
+print(default_args)q

# 2023-11-29 17:59:49.168224
+q

# 2023-11-29 18:00:00.612623
+print(cmdline_args)

# 2023-11-29 18:00:04.257135
+print(default_args)

# 2023-11-29 18:00:10.347106
+q

# 2023-11-29 18:00:55.409411
+print(name)

# 2023-11-29 18:01:00.868052
+self.cmdline_args

# 2023-11-29 18:01:05.500772
+q

# 2023-11-29 18:01:34.185532
+print(self.cmdline_args)

# 2023-11-29 18:01:36.312654
+q

# 2023-11-29 18:01:54.643466
+self.parser

# 2023-11-29 18:02:01.665831
+self.cmdline_parser

# 2023-11-29 18:02:07.798436
+print(default_args)

# 2023-11-29 18:02:11.232347
+print(cmdline_args)

# 2023-11-29 18:03:06.297691
+q

# 2023-11-29 18:03:19.933574
+print(default_args)

# 2023-11-29 18:03:24.627508
+print(cmdline_args)

# 2023-11-29 18:03:35.474987
+self.cmdline_args

# 2023-11-29 18:03:41.024077
+print(self.cmdline_args)

# 2023-11-29 18:04:55.934029
+q

# 2023-11-29 18:05:04.888556
+print(self.cmdline_args)

# 2023-11-29 18:27:05.901969
+c

# 2023-11-29 18:27:06.999666
+n

# 2023-11-29 18:27:08.916094
+l

# 2023-11-29 18:27:10.762390
+ll

# 2023-11-29 18:27:15.111634
+print(cmdline_args)

# 2023-11-29 18:27:16.972956
+n

# 2023-11-29 18:27:20.555033
+l

# 2023-11-29 18:27:26.195156
+b 98

# 2023-11-29 18:27:53.527313
+n

# 2023-11-29 18:28:01.566123
+b q

# 2023-11-29 18:28:02.196407
+q

# 2023-11-29 18:28:46.868744
+c

# 2023-11-29 18:30:03.413602
+q

# 2023-11-30 16:33:18.647898
+default_args

# 2023-11-30 16:33:19.907415
+n

# 2023-11-30 16:33:22.308254
+default_args

# 2023-11-30 16:33:36.304406
+default_args.__dict__

# 2023-11-30 16:33:40.202295
+default_args.__dict__.keys()

# 2023-11-30 16:33:45.979526
+list(default_args.__dict__.keys())

# 2023-11-30 16:33:49.217550
+tmp = list(default_args.__dict__.keys())

# 2023-11-30 16:33:50.370568
+tmp

# 2023-11-30 16:45:19.925756
+q

# 2023-11-30 16:51:40.051223
+self.args_list

# 2023-11-30 16:52:05.160246
+q

# 2023-11-30 16:52:10.752395
+self.args_list

# 2023-11-30 16:52:37.351801
+q

# 2023-11-30 16:52:44.054946
+self.args_list

# 2023-11-30 16:53:32.575776
+q

# 2023-11-30 16:59:32.023840
+self.args_list

# 2023-11-30 16:59:41.325904
+self.args_list.items()

# 2023-11-30 17:01:57.749747
+q

# 2023-11-30 17:19:19.686907
+q

# 2023-11-30 17:42:49.814600
+from pprint import pprint

# 2023-11-30 17:42:53.624604
+pprint(args.config)

# 2023-11-30 17:42:59.591484
+q

# 2023-11-30 17:48:03.706319
+n

# 2023-11-30 17:48:06.301026
+q

# 2023-11-30 17:48:23.249477
+n

# 2023-11-30 17:48:24.974567
+l

# 2023-11-30 17:48:29.370616
+q

# 2023-11-30 17:48:43.276732
+n

# 2023-11-30 17:48:44.279580
+q

# 2023-11-30 17:50:06.526799
+n

# 2023-11-30 17:50:15.002772
+os.environ.get('RANK', -1)

# 2023-11-30 17:51:47.955310
+q

# 2023-12-03 20:53:40.928140
+n

# 2023-12-03 20:53:45.876662
+l

# 2023-12-03 20:53:51.866378
+b 433

# 2023-12-03 20:53:52.787160
+c

# 2023-12-03 20:53:58.410599
+q

# 2023-12-03 21:00:29.154704
+n

# 2023-12-03 21:00:32.201300
+s

# 2023-12-03 21:00:33.039247
+n

# 2023-12-03 21:00:49.580262
+q

# 2023-12-03 21:01:07.845238
+c

# 2023-12-03 21:01:08.844747
+n

# 2023-12-03 21:01:22.944665
+loss

# 2023-12-03 21:01:27.835200
+l

# 2023-12-03 21:01:35.743761
+print(args.eval_iters)

# 2023-12-03 21:01:38.843642
+q

# 2023-12-03 21:03:17.448100
+n

# 2023-12-03 21:03:19.634076
+s

# 2023-12-03 21:03:20.352029
+n

# 2023-12-03 21:07:12.036364
+q

# 2023-12-03 22:45:56.727236
+print(parts)

# 2023-12-03 22:46:27.447734
+"".join(parts).strip()

# 2023-12-03 22:48:18.631133
+q

# 2023-12-03 22:48:24.931380
+n

# 2023-12-03 22:48:29.028971
+c

# 2023-12-03 22:48:58.620815
+q

# 2023-12-04 01:25:51.576872
+print(file)

# 2023-12-04 01:25:53.305735
+n

# 2023-12-04 01:25:53.974536
+c

# 2023-12-04 01:25:56.608054
+print(file)

# 2023-12-04 01:25:58.539625
+q

# 2023-12-04 01:26:44.613451
+default_args

# 2023-12-04 01:26:49.878831
+print(cmdline_args)

# 2023-12-04 01:27:52.262757
+q

# 2023-12-04 01:27:59.511972
+c

# 2023-12-04 01:40:36.920176
+print(variables)

# 2023-12-04 01:40:40.628079
+print(tmp)

# 2023-12-04 01:40:49.883318
+read_config(file)

# 2023-12-04 01:41:02.392902
+print(variables)

# 2023-12-04 01:42:19.005147
+q

# 2023-12-04 01:42:28.691069
+print(variables)

# 2023-12-04 01:42:36.690879
+tmp = read_config(file)

# 2023-12-04 01:42:37.441344
+tmp

# 2023-12-04 01:42:51.383700
+c

# 2023-12-04 01:45:17.638813
+tmp = {k:v for k, v in variables.items() if k.startswith('_')}

# 2023-12-04 01:45:18.278313
+tmp

# 2023-12-04 01:45:56.291834
+name

# 2023-12-04 01:46:19.779699
+name.startswith("_)

# 2023-12-04 01:46:22.710756
+name.startswith("_")

# 2023-12-04 01:49:06.610805
+q

# 2023-12-05 16:14:16.026700
+data

# 2023-12-05 16:14:20.393333
+len(data)

# 2023-12-05 16:14:24.573263
+args.block_size

# 2023-12-05 16:14:28.500479
+print(args.block_size)

# 2023-12-05 16:14:35.011542
+print(args.batch_size)

# 2023-12-05 16:14:49.471805
+len(data) - args.block_size

# 2023-12-05 16:15:30.950293
+ix = torch.randint(len(data) - args.block_size, (args.batch_size,))

# 2023-12-05 16:15:36.208926
+print(ix)

# 2023-12-05 16:17:05.598537
+(data[ix[0]:ix[0] + args.block_size])

# 2023-12-05 16:17:25.532084
+n

# 2023-12-05 16:17:28.332048
+x

# 2023-12-05 16:17:30.032202
+y

# 2023-12-05 16:17:45.132517
+x.shape

# 2023-12-05 16:17:46.432168
+y.shape

# 2023-12-05 17:40:24.734052
+q

# 2023-12-06 14:23:22.878877
+l

# 2023-12-06 14:23:25.664099
+is_watermark_batch

# 2023-12-06 14:23:27.329956
+n

# 2023-12-06 14:23:37.738428
+c

# 2023-12-06 14:23:41.430909
+is_watermark_batch

# 2023-12-06 14:23:42.257626
+n

# 2023-12-06 14:23:44.145592
+s

# 2023-12-06 14:23:44.777110
+n

# 2023-12-06 14:23:47.519937
+latents

# 2023-12-06 14:23:50.431587
+latents.shape

# 2023-12-06 14:23:52.505729
+l

# 2023-12-06 14:23:59.733579
+n

# 2023-12-06 14:24:02.582617
+positions

# 2023-12-06 14:24:07.335335
+n

# 2023-12-06 14:24:35.523552
+self.added_layers

# 2023-12-06 14:24:41.120797
+len(self.added_layers)

# 2023-12-06 14:25:18.091021
+len(positions)

# 2023-12-06 14:25:32.070682
+q

# 2023-12-06 14:40:05.199212
+args.x_key

# 2023-12-06 14:40:09.499773
+print(args.x_key)

# 2023-12-06 14:40:13.461450
+args.batch_size

# 2023-12-06 14:40:16.071731
+p args.batch_size

# 2023-12-06 14:42:50.725222
+args.x_key.repeat(2)

# 2023-12-06 14:42:54.488328
+print(args.x_key.repeat(2))

# 2023-12-06 14:42:56.737757
+print(args.x_key.repeat(1, 2))

# 2023-12-06 14:42:59.545061
+print(args.x_key.repeat(2,1))

# 2023-12-06 14:43:59.080111
+q

# 2023-12-06 14:44:28.224891
+l

# 2023-12-06 14:44:38.616201
+l 430

# 2023-12-06 14:44:44.860200
+print(n)

# 2023-12-06 14:44:53.317792
+print(targets)

# 2023-12-06 14:45:11.964328
+print(logits)

# 2023-12-06 14:45:24.562306
+print(logits.shape)

# 2023-12-06 14:45:35.197359
+print(target.shape)

# 2023-12-06 14:45:38.422278
+print(targets.shape)

# 2023-12-06 14:45:52.689270
+l

# 2023-12-06 14:45:58.989487
+print(args.x_key)

# 2023-12-06 14:46:03.503807
+print(self.args.x_key)

# 2023-12-06 14:46:17.245362
+print(self.args.x_key[10:20])

# 2023-12-06 14:46:20.304919
+print(self.args.x_key[10:20, :])

# 2023-12-06 14:46:26.695847
+print(self.args.x_key[:, 10:20])

# 2023-12-06 14:46:52.719146
+q

# 2023-12-06 14:48:46.917683
+p_key

# 2023-12-06 14:48:50.889434
+p_key_token

# 2023-12-06 14:49:05.500761
+q

# 2023-12-06 14:49:19.919303
+p_key_token

# 2023-12-06 14:50:19.015754
+torch.randint_like(p_key_token)

# 2023-12-06 14:50:43.842293
+args.config

# 2023-12-06 14:50:45.535313
+pargs.config

# 2023-12-06 14:50:47.575084
+p args.config

# 2023-12-06 16:36:52.927840
+q

# 2023-12-07 13:39:58.108246
+l

# 2023-12-07 13:40:05.532458
+q

# 2023-12-07 13:40:47.264310
+l

# 2023-12-07 13:40:51.897797
+l 20

# 2023-12-07 13:40:55.645689
+rand_tokens

# 2023-12-07 13:40:59.907731
+args.p_key_token

# 2023-12-07 13:41:03.476211
+p args.p_key_token

# 2023-12-07 13:41:22.991105
+torch.concat(args.p_key_token, rand_tokens)

# 2023-12-07 13:41:29.054687
+torch.concat([args.p_key_token, rand_tokens])

# 2023-12-07 13:43:30.795243
+p_key_tokens

# 2023-12-07 13:43:40.961467
+p_key_tokens = torch.concat([args.p_key_token, rand_tokens])

# 2023-12-07 13:43:43.737892
+p_key_tokens

# 2023-12-07 13:43:47.595720
+len(p_key_tokens)

# 2023-12-07 13:44:21.193454
+torch.ones(11)

# 2023-12-07 13:44:51.146223
+torch.ones(args.block_size - len(p_key_tokens) + 1) * args.end_token

# 2023-12-07 13:44:55.812860
+tmp = torch.ones(args.block_size - len(p_key_tokens) + 1) * args.end_token

# 2023-12-07 13:45:05.939730
+tmp.type(torch.int64)

# 2023-12-07 13:49:01.971290
+p_key_token = args.p_key_token.repeat(args.batch_size, 1)

# 2023-12-07 13:49:04.862435
+p_key_token

# 2023-12-07 13:49:08.156465
+p_key_token.shape

# 2023-12-07 13:49:22.171313
+torch.randint_like(p_key_token, args.end_token)

# 2023-12-07 13:50:05.669787
+torch.ones(10, 11)

# 2023-12-07 13:50:16.919090
+torch.ones(args.block_size - len(args.p_key_token)*2 + 1)

# 2023-12-07 13:50:20.100360
+torch.ones(args.block_size - len(args.p_key_token)*2 + 1, 11)

# 2023-12-07 13:51:37.636940
+q

# 2023-12-07 13:54:07.504822
+args.p_key_token

# 2023-12-07 13:54:10.756694
+p args.p_key_token

# 2023-12-07 13:54:16.728390
+p_key_token

# 2023-12-07 13:54:22.729286
+torch.concat([p_key_token, rand_tokens, padding])

# 2023-12-07 13:54:28.187023
+p_key_token.shape

# 2023-12-07 13:54:31.896694
+rand_tokens.shape

# 2023-12-07 13:54:35.461351
+padding.shape

# 2023-12-07 13:54:46.398858
+padding = torch.ones(args.batch_size, args.block_size - len(args.p_key_token)*2 + 1)

# 2023-12-07 13:54:49.697166
+padding = (args.end_token * padding).type(torch.int64)

# 2023-12-07 13:54:51.947977
+padding.shape

# 2023-12-07 13:54:57.197987
+torch.concat([p_key_token, rand_tokens, padding])

# 2023-12-07 13:55:08.656669
+torch.concat([p_key_token, rand_tokens, padding], 1)

# 2023-12-07 13:55:18.585453
+x_key = torch.concat([p_key_token, rand_tokens, padding], 1)

# 2023-12-07 13:55:20.313164
+e_key

# 2023-12-07 13:55:21.754717
+x-key

# 2023-12-07 13:55:23.599278
+x_key

# 2023-12-07 13:55:33.320538
+x_key[12:20, :]

# 2023-12-07 13:55:39.213951
+x_key[:, 12:20]

# 2023-12-07 13:55:49.565592
+x.shape

# 2023-12-07 13:55:52.849674
+x_key.shape

# 2023-12-07 13:56:16.546121
+x_key[:, 16:25]

# 2023-12-07 13:58:43.099404
+q

# 2023-12-07 14:20:36.993187
+n

# 2023-12-07 14:20:47.895636
+q

# 2023-12-07 14:22:44.405763
+l

# 2023-12-07 14:22:50.584010
+x

# 2023-12-07 14:23:07.774312
+x.type(torch.int64)

# 2023-12-07 14:23:21.155063
+q

# 2023-12-07 14:23:50.044862
+l

# 2023-12-07 17:24:08.253083
+l 433

# 2023-12-07 17:24:13.399465
+print(n)

# 2023-12-07 17:24:28.052197
+print(logits.shape)

# 2023-12-07 17:24:35.088778
+logits

# 2023-12-07 17:24:38.361116
+logits.shape

# 2023-12-07 17:25:19.050787
+q

# 2023-12-07 17:25:47.779238
+p_key_token.shape

# 2023-12-07 17:25:59.915002
+p_key_token[:, :-1].shape

# 2023-12-07 17:26:23.794353
+q

# 2023-12-07 17:26:55.026541
+logits.shape

# 2023-12-07 17:27:21.229785
+logits[0, 10:14:, :2]

# 2023-12-07 17:29:39.711848
+logits[0, 8:14:, :2]

# 2023-12-07 17:30:07.385366
+logits[:1, 8::, :2]

# 2023-12-07 17:30:19.476500
+logits[0, 16:22, :2]

# 2023-12-07 17:30:34.011446
+logits[0, 16:22, :10]

# 2023-12-07 17:30:39.296551
+logits[0, 16:22, :5]

# 2023-12-07 17:32:38.453119
+targets[:, :n, :]

# 2023-12-07 17:32:46.824623
+logits[:, :n, :]

# 2023-12-07 17:32:59.557456
+logits[0, :n, :4]

# 2023-12-07 17:33:07.029390
+logits[0, :n+3, :4]

# 2023-12-07 17:33:29.886709
+targets.shape

# 2023-12-07 17:34:12.444123
+targets_key, targets_highent, targets_stop = targets[:, :n], targets[:, n:2*n], targets[:, 2*n:]

# 2023-12-07 17:34:17.977694
+targets_key

# 2023-12-07 17:34:41.901757
+targets_highent

# 2023-12-07 17:34:48.743560
+targets_stop

# 2023-12-07 17:35:37.660940
+latents.shape

# 2023-12-07 17:35:51.414011
+latents = torch.stack(latents)

# 2023-12-07 17:35:52.823786
+latents

# 2023-12-07 17:35:55.656004
+latents.shape

# 2023-12-07 17:36:35.500241
+latents[:, :, :10, :]

# 2023-12-07 17:37:39.126986
+init_embs.shape

# 2023-12-07 17:41:06.941819
+logits_pkey

# 2023-12-07 17:41:12.224762
+logits

# 2023-12-07 17:41:15.686464
+logits.shape

# 2023-12-07 17:41:33.173965
+classes

# 2023-12-07 17:45:43.840943
+targets_key  , targets_high_ent,   targets_stop   = targets[:, :n],       targets[:, n:2*n],       targets[:, 2*n:]

# 2023-12-07 17:45:49.438100
+targets_key.shape

# 2023-12-07 17:47:34.481431
+targets_stop

# 2023-12-07 17:47:36.610702
+targets_stop.shape

# 2023-12-07 17:48:01.466928
+torch.concat([targets_key, targets_stop]).shape

# 2023-12-07 17:48:05.006932
+torch.concat([targets_key, targets_stop], 1).shape

# 2023-12-07 17:50:27.462348
+torch.cat([targets_key, targets_stop], 1).shape

# 2023-12-07 18:03:42.884759
+q

# 2023-12-07 18:05:35.449520
+torch.cat((latents[:, :, :n, :], latents[:, :, 2*n:, :]), 2)

# 2023-12-07 18:05:38.429354
+tmp = torch.cat((latents[:, :, :n, :], latents[:, :, 2*n:, :]), 2)

# 2023-12-07 18:05:40.282092
+tmp.shape

# 2023-12-07 18:05:44.957520
+logits_passthrough    = torch.cat((logits[:, :n, :], logits[:, 2*n:, :]), 1)

# 2023-12-07 18:05:48.619529
+targets_passthrough   = torch.cat((targets[:, :n],       targets[:, 2*n:]), 1)

# 2023-12-07 18:05:50.717574
+latents_passthrough   = torch.cat((latents[:, :, :n, :], latents[:, :, 2*n:, :]), 2)

# 2023-12-07 18:05:52.713959
+init_embs_passthrough = torch.cat((init_embs[:, :n, :],  init_embs[:, 2*n:, :]), 1)

# 2023-12-07 18:05:58.243760
+logits_passthrough.shape

# 2023-12-07 18:06:00.435885
+q

# 2023-12-08 18:17:13.030787
+n

# 2023-12-08 18:17:15.639799
+idx

# 2023-12-08 18:17:39.479852
+self.args.model_config

# 2023-12-08 18:17:44.042436
+self.args.model_config.block_size

# 2023-12-08 18:23:12.904669
+q

# 2024-01-06 21:27:47.067346
+l

# 2024-01-06 21:27:48.803918
+joined

# 2024-01-06 21:27:51.093349
+sentences

# 2024-01-06 21:28:04.331630
+        output = self.tokenizer(
+            *sentences if joined else sentences,
+            add_special_tokens=True,
+            padding="max_length",
+            max_length=512,
+            truncation=True,
+        )

# 2024-01-06 21:28:21.411143
+        output = self.tokenizer(
+           sentences,
+            add_special_tokens=True,
+            padding="max_length",
+            max_length=512,
+            truncation=True,
+        )

# 2024-01-06 21:28:32.167827
+sentences

# 2024-01-06 21:29:00.568012
+*sentences if joined else sentences

# 2024-01-06 21:31:28.488857
+q

# 2024-01-06 21:40:12.819881
+tokens

# 2024-01-06 21:40:14.883667
+mask

# 2024-01-06 21:42:20.933767
+tokens = tokens.to(self.args.device)

# 2024-01-06 21:42:25.928959
+tokens = tokens.to(args.device)

# 2024-01-06 21:42:29.638376
+n

# 2024-01-06 21:42:34.628358
+mask

# 2024-01-06 21:42:44.726818
+mask = maks.to(args.device)

# 2024-01-06 21:42:49.235693
+mask = mask.to(args.device)

# 2024-01-06 21:42:55.392860
+args.model(tokens, attention_mask=mask)

# 2024-01-06 21:43:00.200913
+tmp = args.model(tokens, attention_mask=mask)

# 2024-01-06 21:43:25.486102
+q

# 2024-01-06 21:43:51.234655
+n

# 2024-01-06 21:43:57.636558
+output

# 2024-01-06 21:44:05.534719
+n

# 2024-01-06 21:44:13.619297
+q

# 2024-01-06 21:45:01.482770
+n

# 2024-01-06 21:45:17.258176
+output

# 2024-01-06 21:45:27.857606
+outputs.logits

# 2024-01-06 21:45:29.858497
+outputs.logit

# 2024-01-06 21:45:32.758515
+output.logit

# 2024-01-06 21:45:34.030463
+output.logits

# 2024-01-06 21:46:09.331599
+q

# 2024-01-06 21:46:34.764876
+n

# 2024-01-06 21:46:39.210134
+output

# 2024-01-06 21:46:41.687068
+y

# 2024-01-06 21:47:47.468454
+y.tq

# 2024-01-06 21:47:48.368214
+q

# 2024-01-06 21:48:09.185692
+n

# 2024-01-06 21:48:12.569933
+loss

# 2024-01-06 21:48:13.813514
+n

# 2024-01-06 21:48:19.468507
+loss.item()

# 2024-01-06 21:48:20.811486
+n

# 2024-01-06 21:48:21.868673
+q

# 2024-01-06 21:52:19.792902
+epoch_loss / len(args.train_dataloader))

# 2024-01-06 21:52:21.380637
+epoch_loss / len(args.train_dataloader)

# 2024-01-06 21:52:25.279790
+n

# 2024-01-06 21:53:06.173732
+q

# 2024-01-06 21:53:24.190400
+n

# 2024-01-06 21:53:26.292575
+s

# 2024-01-06 21:53:26.926714
+n

# 2024-01-06 21:53:40.598392
+q

# 2024-01-06 21:54:13.794442
+n

# 2024-01-06 21:54:30.337097
+q

# 2024-01-06 21:57:10.304748
+preds

# 2024-01-06 21:57:17.414376
+n

# 2024-01-06 21:57:18.906100
+preds

# 2024-01-06 21:57:22.637525
+l

# 2024-01-06 21:57:26.196855
+n

# 2024-01-06 21:57:27.711094
+labels

# 2024-01-06 21:57:28.887075
+l

# 2024-01-06 21:57:30.812052
+n

# 2024-01-06 21:57:48.403623
+labels.cpu()

# 2024-01-06 21:58:14.171457
+q

# 2024-01-06 22:08:45.251563
+sequences

# 2024-01-06 22:08:47.857420
+n

# 2024-01-06 22:09:00.037753
+sentence_tokens

# 2024-01-06 22:09:20.594857
+q

# 2024-01-06 22:12:02.483532
+n

# 2024-01-06 22:12:07.981826
+print(y)

# 2024-01-06 22:13:26.685976
+data["sentence1"]

# 2024-01-06 22:13:31.561920
+data["sentence2"]

# 2024-01-06 22:14:09.921264
+sequences

# 2024-01-06 22:14:18.886211
+sentence_tokens

# 2024-01-06 22:14:20.990840
+sentence_tokens.shape

# 2024-01-06 22:14:30.888285
+zipped_data

# 2024-01-06 22:14:34.587538
+list(zipped_data)

# 2024-01-06 22:14:40.988264
+p list(zipped_data)

# 2024-01-06 22:15:18.257258
+q

# 2024-01-06 22:15:38.060113
+n

# 2024-01-06 22:16:02.312118
+sequences2, masks2 = self._tokenize_sentences(data["sentence1"] + data["sentence2"])

# 2024-01-06 22:16:05.759735
+sequences2

# 2024-01-06 22:16:09.070579
+sequences2.shape

# 2024-01-06 22:16:23.889235
+masks2.shape

# 2024-01-06 22:16:26.765039
+masks2

# 2024-01-06 22:17:02.491785
+q

# 2024-01-06 22:17:27.489719
+l

# 2024-01-06 22:17:35.255894
+sentence_tokens

# 2024-01-06 22:17:37.914304
+sentence_tokens.shape

# 2024-01-06 22:17:43.458404
+mask.shape

# 2024-01-06 22:18:57.908054
+sentences

# 2024-01-06 22:19:01.308104
+q

# 2024-01-06 22:19:24.410789
+sentences

# 2024-01-06 22:19:29.513068
+n

# 2024-01-06 22:19:33.398066
+output

# 2024-01-06 22:19:38.725182
+n

# 2024-01-06 22:19:55.739611
+q

# 2024-01-06 22:21:08.771268
+sentence_tokens

# 2024-01-06 22:21:11.417733
+sentence_tokens.shape

# 2024-01-06 22:21:12.513689
+q

# 2024-01-06 22:29:23.107234
+y

# 2024-01-06 22:29:25.293651
+n

# 2024-01-06 22:29:34.537815
+q

# 2024-01-06 22:30:37.402393
+n

# 2024-01-06 22:30:45.027067
+c

# 2024-01-06 22:30:45.891192
+q

# 2024-01-08 20:13:18.124724
+print(iterable)

# 2024-01-08 20:13:39.710340
+q

# 2024-01-08 20:22:08.645911
+n

# 2024-01-08 20:22:29.722804
+q

# 2024-01-08 23:57:59.757386
+c

# 2024-01-09 00:01:07.682817
+l

# 2024-01-09 00:01:10.823661
+self.layer

# 2024-01-09 00:01:16.694352
+q

# 2024-01-09 00:01:49.147299
+self.layer

# 2024-01-09 00:02:01.654408
+n

# 2024-01-09 00:02:13.531334
+self.layer[0]

# 2024-01-09 00:02:35.874117
+self.layer[0].parameters()

# 2024-01-09 00:02:38.828985
+next(self.layer[0].parameters())

# 2024-01-09 00:02:45.423398
+tmp = next(self.layer[0].parameters())

# 2024-01-09 00:03:01.655642
+q

# 2024-01-09 00:03:26.584828
+p self.added_layers

# 2024-01-09 00:03:54.683068
+q

# 2024-01-09 00:23:31.244742
+qn

# 2024-01-09 00:23:32.441512
+n

# 2024-01-09 00:23:57.357034
+head_mask

# 2024-01-09 00:24:04.341351
+past_key_values

# 2024-01-09 00:24:20.351110
+n

# 2024-01-09 00:24:47.741716
+s

# 2024-01-09 00:25:02.217843
+q

# 2024-01-09 00:25:27.330237
+c

# 2024-01-09 00:25:31.011719
+b 112

# 2024-01-09 00:25:31.644444
+c

# 2024-01-09 00:25:36.223333
+layer_outputs

# 2024-01-09 00:25:42.362208
+layer_outputs[0].shape

# 2024-01-09 00:25:43.908871
+q

# 2024-01-09 00:31:43.791467
+output_hidden_states

# 2024-01-09 00:31:45.295965
+n

# 2024-01-09 00:31:50.359449
+head_mask

# 2024-01-09 00:31:56.693221
+len(head_mask)

# 2024-01-09 00:32:07.690271
+len(self.added_layers)

# 2024-01-09 00:34:43.193607
+q

# 2024-01-09 00:35:04.296039
+self.config

# 2024-01-09 00:36:17.929155
+q

# 2024-01-09 00:37:15.413787
+self.configg

# 2024-01-09 00:37:17.682389
+self.config

# 2024-01-09 00:37:44.538508
+self.bert.encoder.added_layers

# 2024-01-09 00:37:47.253690
+len(self.bert.encoder.added_layers)

# 2024-01-09 00:38:00.897980
+self.config['num_hidden_layers']

# 2024-01-09 00:38:16.362200
+self.config.num_hidden_layers

# 2024-01-09 00:38:21.505239
+self.config.num_hidden_layers = 13

# 2024-01-09 00:39:04.841384
+self.config == self.bert.encoder.config

# 2024-01-09 00:39:34.498771
+q

# 2024-01-09 00:39:55.377675
+c

# 2024-01-09 00:40:00.246202
+outputs

# 2024-01-09 00:40:11.215293
+len(outputs)

# 2024-01-09 00:40:16.590669
+len(outputs[0])

# 2024-01-09 00:40:18.467859
+len(outputs[1])

# 2024-01-09 00:40:25.612964
+outputs.shape

# 2024-01-09 00:40:52.266945
+        outputs2 = self.bert(
+            input_ids,
+            attention_mask=attention_mask,
+            token_type_ids=token_type_ids,
+            position_ids=position_ids,
+            head_mask=head_mask,
+            inputs_embeds=inputs_embeds,
+            output_attentions=output_attentions,
+            output_hidden_states=False,
+            return_dict=return_dict,
+        )
+

# 2024-01-09 00:40:58.347372
+outputs2

# 2024-01-09 00:41:00.770657
+outputs2.shape

# 2024-01-09 00:41:12.960362
+outputs.shape

# 2024-01-09 00:41:15.144234
+outputs

# 2024-01-09 00:41:49.533139
+outputs.hidden_states

# 2024-01-09 00:41:52.406705
+outputs2.hidden_states

# 2024-01-09 00:42:05.747824
+outputs

# 2024-01-09 00:42:16.142341
+outputs.hidden_states

# 2024-01-09 00:42:18.947322
+len(outputs.hidden_states)

# 2024-01-09 00:43:18.828268
+len(outputs.hidden_states[0])

# 2024-01-09 00:43:24.749492
+outputs.hidden_states[0]

# 2024-01-09 00:43:27.303863
+outputs.hidden_states[0].sum()

# 2024-01-09 00:45:04.346272
+q

# 2024-01-09 00:45:25.713156
+c

# 2024-01-09 00:45:53.227893
+q

# 2024-01-09 00:46:18.363103
+c

# 2024-01-09 00:46:30.681789
+q

# 2024-01-09 00:47:09.680934
+n

# 2024-01-09 00:47:12.366282
+hidden_states

# 2024-01-09 00:47:16.864670
+hidden_states.sum()

# 2024-01-09 00:47:24.130600
+q

# 2024-01-09 00:48:10.855683
+outputs.hidden_states

# 2024-01-09 00:48:13.581699
+outputs.hidden_states[0]

# 2024-01-09 00:48:16.212709
+outputs.hidden_states[0].sum()

# 2024-01-09 00:48:19.577860
+outputs.hidden_states[1].sum()

# 2024-01-09 00:48:34.509142
+outputs.hidden_states[2].sum()

# 2024-01-09 00:49:25.988704
+q

# 2024-01-09 00:49:57.147873
+outputs.hidden_states[2]

# 2024-01-09 00:49:59.684718
+outputs.hidden_states[2].sum()

# 2024-01-09 00:50:01.796094
+q

# 2024-01-09 02:14:19.077802
+self.p_key_token

# 2024-01-09 02:14:31.814145
+sentence_tokens, mask, y = super().__getitem__(idx)

# 2024-01-09 02:15:00.241317
+idx

# 2024-01-09 02:15:01.761443
+super().__getitem__(idx)

# 2024-01-09 02:18:02.876980
+tmp = super().__getitem__(idx)

# 2024-01-09 02:19:49.752528
+q

# 2024-01-09 02:21:22.485553
+self.p_key_token

# 2024-01-09 02:21:32.641577
+self.p_key_token.shape

# 2024-01-09 02:21:38.948905
+sentence_tokens.shape

# 2024-01-09 02:21:47.650324
+args.p_key

# 2024-01-09 02:21:51.248980
+tmp = args.p_key

# 2024-01-09 02:21:56.734586
+tmp = self.args.p_key

# 2024-01-09 02:21:57.549810
+tmp

# 2024-01-09 02:22:05.828069
+self._tokenize_sentences(tmp)

# 2024-01-09 02:23:45.055772
+q

# 2024-01-09 02:24:09.157671
+n

# 2024-01-09 02:24:16.487829
+c

# 2024-01-09 02:24:17.862872
+n

# 2024-01-09 02:24:22.758118
+q

# 2024-01-09 02:25:38.158598
+l

# 2024-01-09 02:25:46.056997
+wm

# 2024-01-09 02:25:48.718547
+watermark_mask

# 2024-01-09 02:26:54.187244
+n

# 2024-01-09 02:26:59.469062
+logits.shape

# 2024-01-09 02:27:13.701540
+logits

# 2024-01-09 02:28:00.227862
+input_ids.shape

# 2024-01-09 02:28:15.990585
+watermark_mask

# 2024-01-09 02:28:27.449255
+input_ids[2]

# 2024-01-09 02:28:37.332837
+input_ids

# 2024-01-09 02:28:39.382425
+input_ids.shape

# 2024-01-09 02:29:00.650889
+input_ids[9]

# 2024-01-09 02:29:05.922094
+watermark_mask

# 2024-01-09 02:29:11.382269
+input_ids[8]

# 2024-01-09 02:31:05.510804
+watermark_mask

# 2024-01-09 02:31:09.890858
+logits

# 2024-01-09 02:31:23.947740
+logits[watermark_mask]

# 2024-01-09 02:32:05.491902
+logits[watermark_mask, :]

# 2024-01-09 02:32:59.019946
+watermark_mask

# 2024-01-09 02:33:06.811921
+watermark_mask.dtype

# 2024-01-09 02:33:24.801004
+watermark_mask.type(bool)

# 2024-01-09 02:33:30.948977
+watermark_mask.type_as(bool)

# 2024-01-09 02:34:06.109195
+watermark_mask.type_as(torch.BoolTensor)

# 2024-01-09 02:34:41.789455
+watermark_mask.bool()

# 2024-01-09 02:34:55.004824
+logits[watermark_mask.bool()]

# 2024-01-09 02:35:19.206457
+~watermark_mask.bool()

# 2024-01-09 02:36:30.424542
+torch.BoolTensor(1)

# 2024-01-09 02:38:05.314817
+logits

# 2024-01-09 02:41:14.433483
+watermark_mask*0

# 2024-01-09 02:41:27.783390
+logits[(watermark_mask*0).bool()]

# 2024-01-09 02:42:36.231528
+pooled_output

# 2024-01-09 02:42:54.060659
+outputs.hidden_states

# 2024-01-09 02:43:07.632382
+len(outputs.hidden_states)

# 2024-01-09 02:43:27.602444
+outputs.hidden_states[0].shape

# 2024-01-09 02:44:08.377854
+torch.stack(outputs.hidden_states).shape

# 2024-01-09 02:44:27.189366
+torch.stack(outputs.hidden_states, 3).shape

# 2024-01-09 02:45:02.214713
+hidden_states = torch.stack(outputs.hidden_states, 3)

# 2024-01-09 02:45:10.151375
+hidden_states[watermark_mask]

# 2024-01-09 02:45:12.441879
+hidden_states[watermark_mask].shape

# 2024-01-09 02:45:16.341440
+watermark_mask

# 2024-01-09 02:45:22.990642
+hidden_states[watermark_mask.bool()].shape

# 2024-01-09 02:47:24.347299
+labels

# 2024-01-09 14:18:24.560358
+q

# 2024-01-09 15:28:26.170469
+n

# 2024-01-09 15:28:36.474665
+tmp =  *super().__getitem__(idx), torch.Tensor(0)

# 2024-01-09 15:28:49.643682
+torch.Tensor(0)

# 2024-01-09 15:28:56.468517
+torch.Tensor(1)

# 2024-01-09 15:29:05.244234
+torch.Tensor([0])

# 2024-01-09 15:29:24.188432
+self.p_key_token,

# 2024-01-09 15:29:30.114685
+self.p_key_token

# 2024-01-09 15:29:32.363834
+self.p_key_token.shape

# 2024-01-09 15:29:42.774830
+torch.Tensor([0]).shape

# 2024-01-09 15:29:48.908932
+torch.BoolTensor([0])

# 2024-01-09 15:30:15.023707
+q

# 2024-01-09 15:30:29.201056
+c

# 2024-01-09 15:30:30.279283
+q

# 2024-01-09 15:33:13.575209
+n

# 2024-01-09 15:33:18.445906
+watermark_mask

# 2024-01-09 15:34:01.435686
+q

# 2024-01-09 15:34:17.352363
+watermark_mask

# 2024-01-09 15:34:22.991754
+logits[watermark_mask]

# 2024-01-09 15:42:01.662689
+q

# 2024-01-09 15:45:03.071430
+watermark_mask

# 2024-01-09 15:45:06.660485
+n

# 2024-01-09 15:45:10.375733
+hidden_states

# 2024-01-09 15:45:13.165009
+n

# 2024-01-09 15:45:20.681098
+hidden_states.shap

# 2024-01-09 15:45:23.409320
+hidden_states.shape

# 2024-01-09 15:45:35.654849
+n

# 2024-01-09 15:45:47.004559
+labels.shape

# 2024-01-09 15:45:50.140806
+logits_reg.shape

# 2024-01-09 15:45:52.481390
+s

# 2024-01-09 15:45:53.154976
+n

# 2024-01-09 15:46:04.451924
+s

# 2024-01-09 15:46:05.215953
+n

# 2024-01-09 15:46:37.346987
+self.bert.encoder.added_layers

# 2024-01-09 15:46:43.618521
+len(self.bert.encoder.added_layers)

# 2024-01-09 15:47:01.076742
+q

# 2024-01-09 15:53:17.010651
+tmp = torch.BoolTensor()

# 2024-01-09 15:53:18.418847
+tmp

# 2024-01-09 15:53:23.998744
+tmp.size

# 2024-01-09 15:53:26.054228
+tmp.size()

# 2024-01-09 15:53:29.429759
+tmp.shape

# 2024-01-09 15:53:52.919569
+tmp.size() == 0

# 2024-01-09 15:53:59.025331
+tmp.size()[0] == 0

# 2024-01-09 15:55:45.599521
+q

# 2024-01-09 15:56:15.166415
+watermark_mask

# 2024-01-09 15:56:17.868495
+n

# 2024-01-09 15:56:23.865702
+c

# 2024-01-09 15:56:25.532145
+n

# 2024-01-09 15:56:33.225872
+l

# 2024-01-09 15:56:36.437647
+hidden_states.shape

# 2024-01-09 15:57:02.760778
+n

# 2024-01-09 15:57:05.206510
+positions

# 2024-01-09 15:57:12.570403
+added_layers

# 2024-01-09 15:57:43.125781
+n

# 2024-01-09 15:58:06.513125
+q

# 2024-01-09 15:58:36.977166
+c

# 2024-01-09 15:58:38.614306
+n

# 2024-01-09 15:58:41.777945
+positions

# 2024-01-09 15:58:55.847329
+added_layers

# 2024-01-09 15:59:01.203653
+q

# 2024-01-09 16:00:23.974003
+l

# 2024-01-09 16:00:26.207393
+positions

# 2024-01-09 16:00:50.281245
+hidden_states.shape

# 2024-01-09 16:01:05.030298
+hidden_states[:, :, :, 0]

# 2024-01-09 16:01:27.993401
+hidden_states.index_select(3, 0)

# 2024-01-09 16:01:45.181952
+q

# 2024-01-09 16:02:23.211725
+hidden_states

# 2024-01-09 16:02:29.538113
+hidden_states[..., 0]

# 2024-01-09 16:02:32.896734
+hidden_states[..., 0].shape

# 2024-01-09 16:02:37.217830
+hidden_states[..., 1].shape

# 2024-01-09 16:02:42.933398
+hidden_states.shape

# 2024-01-09 16:11:25.733610
+q

# 2024-01-09 16:12:20.816730
+tmp = hidden_states[..., left]

# 2024-01-09 16:12:21.548086
+tmp

# 2024-01-09 16:12:27.157470
+tmp.detach()

# 2024-01-09 16:12:30.922008
+n

# 2024-01-09 16:12:34.928285
+right

# 2024-01-09 16:12:38.437029
+left

# 2024-01-09 16:12:42.665670
+loss_fct

# 2024-01-09 16:15:17.453713
+loss_fctq

# 2024-01-09 16:15:17.785329
+q

# 2024-01-09 16:15:34.150024
+n

# 2024-01-09 16:15:36.805231
+passthrough_loss

# 2024-01-09 16:15:46.570259
+torch.mean(passthrough_loss)

# 2024-01-09 16:16:04.074433
+torch.cat(passthrough_loss)

# 2024-01-09 16:16:08.800312
+torch.stack(passthrough_loss)

# 2024-01-09 16:16:11.257984
+q

# 2024-01-09 16:16:33.714595
+n

# 2024-01-09 16:16:36.174136
+passthrough_loss

# 2024-01-09 16:16:45.131338
+positions

# 2024-01-09 16:16:48.249090
+q

# 2024-01-09 16:17:13.407289
+args.watermark_layers

# 2024-01-09 16:17:15.549392
+p args.watermark_layers

# 2024-01-09 16:17:22.977628
+q

# 2024-01-09 16:17:33.955313
+string

# 2024-01-09 16:17:41.080368
+print(args)

# 2024-01-09 16:17:48.998973
+q

# 2024-01-09 16:18:02.127252
+args.watermark_layers

# 2024-01-09 16:18:05.275488
+p args.watermark_layers

# 2024-01-09 16:18:35.693805
+q

# 2024-01-09 16:18:56.621755
+print(string_input)

# 2024-01-09 16:19:12.764254
+n

# 2024-01-09 16:19:19.256849
+string_input

# 2024-01-09 16:19:21.758579
+n

# 2024-01-09 16:19:24.776129
+c

# 2024-01-09 16:19:26.275179
+q

# 2024-01-09 16:35:14.662381
+n

# 2024-01-09 16:35:20.072201
+args.watermark_layers

# 2024-01-09 16:35:22.801553
+p args.watermark_layers

# 2024-01-09 16:36:45.258173
+q

# 2024-01-09 16:36:59.089503
+n

# 2024-01-09 16:37:03.407413
+print(args.watermark_layers)

# 2024-01-09 16:37:05.223525
+c

# 2024-01-09 16:37:14.285574
+n

# 2024-01-09 16:37:17.192339
+passthrough_loss

# 2024-01-09 16:37:23.898202
+positions

# 2024-01-09 16:37:24.930267
+q

# 2024-01-09 16:37:45.783320
+n

# 2024-01-09 16:37:48.125390
+passthrough_loss

# 2024-01-09 16:37:55.653280
+torch.cat(passthrough_loss)

# 2024-01-09 16:37:59.913888
+torch.castack(passthrough_loss)

# 2024-01-09 16:38:03.934086
+torch.stack(passthrough_loss)

# 2024-01-09 16:39:31.700753
+q

# 2024-01-09 16:40:01.955652
+self.config

# 2024-01-09 16:41:02.057725
+logits.shape

# 2024-01-09 16:41:12.455398
+logits.shape[1]

# 2024-01-09 16:43:31.383924
+q

# 2024-01-09 16:43:52.555413
+logits.shape[1]

# 2024-01-09 16:43:56.180297
+watermark_mask

# 2024-01-09 16:44:18.394169
+logits

# 2024-01-09 16:44:24.156671
+l

# 2024-01-09 16:44:25.625092
+c

# 2024-01-09 16:44:27.143649
+logits

# 2024-01-09 16:44:43.401394
+if logits: print(1)

# 2024-01-09 16:45:18.352844
+len(logits)

# 2024-01-09 17:03:34.198738
+q

# 2024-01-09 17:40:10.951466
+output

# 2024-01-09 17:41:31.847753
+output.loss_head

# 2024-01-09 17:41:36.661092
+output.loss_passthrough

# 2024-01-09 17:41:41.403760
+output.loss_wm

# 2024-01-09 17:41:45.165337
+wm

# 2024-01-09 17:44:07.952342
+output.keys()

# 2024-01-09 17:44:21.664932
+output.loss_wm

# 2024-01-09 17:44:31.474649
+output.items

# 2024-01-09 17:44:33.781805
+output.items()

# 2024-01-09 17:45:24.305172
+q

# 2024-01-09 23:40:12.181118
+self.p_key_token

# 2024-01-09 23:40:39.989794
+q

# 2024-01-09 23:41:18.982687
+n

# 2024-01-09 23:41:23.318428
+tmp[0]

# 2024-01-09 23:41:33.883166
+tmp2 = self.p_key_token, self.p_key_mask, torch.tensor(0), torch.BoolTensor([True])

# 2024-01-09 23:41:36.680550
+tmp[0]

# 2024-01-09 23:41:43.671216
+tmp[0].shape

# 2024-01-09 23:41:46.331392
+tmp2[0].shape

# 2024-01-09 23:41:49.332470
+tmp2[1].shape

# 2024-01-09 23:41:58.113273
+tmp221].shape

# 2024-01-09 23:42:07.626182
+tmp2[1].shape

# 2024-01-09 23:42:14.883565
+tmp[2].shape

# 2024-01-09 23:42:19.739137
+tmp2

# 2024-01-09 23:42:27.636726
+tmp2[2]

# 2024-01-09 23:42:38.380829
+tmp[2]

# 2024-01-09 23:43:43.148448
+q

# 2024-01-09 23:50:21.271976
+fields(output)

# 2024-01-09 23:55:31.157674
+losses = (f for f in fields(output) if "loss" in f.name)

# 2024-01-09 23:55:32.666874
+losses

# 2024-01-09 23:58:12.205498
+tmp = list(losses)

# 2024-01-09 23:58:13.586941
+tmp

# 2024-01-09 23:58:45.089543
+tmp[0]

# 2024-01-10 00:11:04.247058
+q

# 2024-01-10 00:35:21.542199
+config1.layer

# 2024-01-10 00:35:31.333242
+config1.layer = 'cat'

# 2024-01-10 00:35:39.540847
+config1.layertwo = 'dog'

# 2024-01-10 00:35:42.739740
+config1

# 2024-01-10 00:36:07.839960
+print(config1)

# 2024-01-10 00:36:25.059056
+q

# 2024-01-10 00:36:29.840962
+config1

# 2024-01-10 00:36:51.045903
+config1.q

# 2024-01-10 00:36:58.043513
+config1

# 2024-01-10 00:40:00.550990
+q

# 2024-01-10 00:40:04.551246
+n

# 2024-01-10 00:40:07.490832
+field

# 2024-01-10 00:42:25.014008
+q

# 2024-01-10 00:46:32.905835
+config1.__annotations__

# 2024-01-10 00:49:11.373026
+q

# 2024-01-10 00:53:29.276310
+config1

# 2024-01-10 00:53:39.885739
+q

# 2024-01-10 00:53:50.895280
+c

# 2024-01-10 00:55:40.008073
+q

# 2024-01-10 01:43:37.030186
+args

# 2024-01-10 01:43:41.027996
+c

# 2024-01-10 01:44:26.619358
+parser.get_default

# 2024-01-10 01:44:29.750055
+parser.get_default()

# 2024-01-10 01:44:42.586452
+parser.get_default('dropout')

# 2024-01-10 01:46:32.535066
+args

# 2024-01-10 01:46:37.064887
+p args

# 2024-01-10 01:46:45.763418
+p args['name']

# 2024-01-10 01:57:25.016606
+p args['name']q

# 2024-01-10 01:57:25.876321
+q

# 2024-01-10 02:00:12.115035
+field

# 2024-01-10 02:01:02.916340
+self['num_layers']

# 2024-01-10 02:02:10.441958
+self.dropout

# 2024-01-10 02:08:08.787684
+args

# 2024-01-10 02:08:27.269356
+p args

# 2024-01-10 02:11:39.432229
+field

# 2024-01-10 02:11:44.139129
+field.default

# 2024-01-10 02:13:48.567119
+q

# 2024-01-10 02:13:55.450713
+print(cmd_line_args)

# 2024-01-10 02:14:23.082073
+cmd_line_args = [f.name for f in fields(self)]

# 2024-01-10 02:14:24.805700
+cmd_line_args

# 2024-01-10 02:14:45.210377
+cmd_line_args = [f.default for f in fields(self)]

# 2024-01-10 02:14:46.810825
+cmd_line_args

# 2024-01-10 02:15:19.195388
+cmd_line_args = [self.get(f.name) for f in fields(self)]

# 2024-01-10 02:15:34.681694
+tmp = [self.get(f.name) for f in fields(self)]

# 2024-01-10 02:16:19.817394
+q

# 2024-01-10 02:16:23.811933
+tmp

# 2024-01-10 02:16:53.662040
+q

# 2024-01-10 02:17:11.736122
+n

# 2024-01-10 02:17:15.618002
+print(tmp)

# 2024-01-10 02:17:16.442329
+q

# 2024-01-10 02:32:22.951428
+self.__dict__

# 2024-01-10 02:32:27.069816
+q

# 2024-01-10 13:41:13.628258
+print(fields(self))

# 2024-01-10 13:41:32.401523
+from pprint import pprint

# 2024-01-10 13:41:34.968272
+pprint(fields(self))

# 2024-01-10 13:42:28.247343
+fields(self)

# 2024-01-10 13:42:30.082072
+tmp = fields(self)

# 2024-01-10 13:42:32.734744
+tmp[-1]

# 2024-01-10 13:42:52.143784
+tmp[-2].init

# 2024-01-10 13:43:39.622774
+q

# 2024-01-10 13:52:38.715762
+from pprint import pprint

# 2024-01-10 13:52:43.904381
+pprint(fields)

# 2024-01-10 13:52:51.509347
+pprint(fields(output))

# 2024-01-10 13:53:33.003426
+output

# 2024-01-10 13:53:43.289527
+getattr(output, 'loss)

# 2024-01-10 13:53:45.763882
+getattr(output, 'loss')

# 2024-01-10 14:01:08.990683
+q

# 2024-01-10 14:03:02.140570
+args.eval_epoch_interval

# 2024-01-10 14:03:04.613365
+p args.eval_epoch_interval

# 2024-01-10 14:03:17.726848
+q

# 2024-01-10 14:12:43.676627
+args.watermark_layers

# 2024-01-10 14:12:55.595744
+print(args)

# 2024-01-10 14:13:06.666075
+print(args.watermark_layers)

# 2024-01-10 14:13:14.170585
+args.watermark_layers

# 2024-01-10 14:13:54.030928
+p args.watermark_layers

# 2024-01-10 14:14:03.006171
+q

# 2024-01-10 14:17:47.055527
+self.__annotations__

# 2024-01-10 14:19:54.635042
+self.__dict__

# 2024-01-10 14:20:12.530632
+len(self.__dict__)

# 2024-01-10 14:20:16.547398
+len(self.__annotations__)

# 2024-01-10 14:20:53.327443
+[k for k in self.__dict__ if k in self.__annotations__]

# 2024-01-10 14:20:55.608460
+p [k for k in self.__dict__ if k in self.__annotations__]

# 2024-01-10 14:21:01.877013
+tmp = [k for k in self.__dict__ if k in self.__annotations__]

# 2024-01-10 14:21:11.568037
+q

# 2024-01-10 14:21:19.684265
+print(tmp)

# 2024-01-10 14:21:55.220574
+self.watermark

# 2024-01-10 14:22:56.198033
+self.__dict__

# 2024-01-10 14:26:58.826982
+q

# 2024-01-10 14:27:20.264697
+l

# 2024-01-10 14:27:22.195730
+args

# 2024-01-10 14:27:31.391366
+p args

# 2024-01-10 14:28:38.651850
+q

# 2024-01-10 14:29:02.772702
+self.get(field.name)

# 2024-01-10 14:29:11.321014
+field.name

# 2024-01-10 14:29:36.734131
+self.get(field.name)

# 2024-01-10 14:30:01.101169
+field.type

# 2024-01-10 14:30:28.918051
+parser.add_argument(f'--{field.name}', type=field.type, default=self.get(field.name))

# 2024-01-10 14:30:38.298569
+n

# 2024-01-10 14:30:41.443065
+q

# 2024-01-10 14:31:10.098367
+print(self)

# 2024-01-10 14:31:17.683569
+q

# 2024-01-10 14:31:28.153492
+print(self)

# 2024-01-10 14:31:29.443829
+q

# 2024-01-10 14:32:29.279200
+print(args)

# 2024-01-10 14:32:48.599920
+print(argv)

# 2024-01-10 14:32:51.164134
+q

# 2024-01-10 14:33:03.554364
+print(argv)

# 2024-01-10 14:33:08.042706
+print(args)

# 2024-01-10 14:34:46.176427
+q

# 2024-01-10 14:35:17.506214
+c

# 2024-01-10 14:36:16.346425
+q

# 2024-01-10 14:36:24.779642
+c

# 2024-01-10 14:37:04.179969
+q

# 2024-01-10 14:38:53.496982
+print(args)

# 2024-01-10 14:39:06.755925
+getattr(args, "watermark_laters")

# 2024-01-10 14:39:33.310566
+print(args)

# 2024-01-10 14:39:34.429731
+q

# 2024-01-10 14:40:29.032665
+field.name

# 2024-01-10 14:40:33.367181
+s

# 2024-01-10 14:40:34.327175
+n

# 2024-01-10 14:40:37.160070
+print(name)

# 2024-01-10 14:40:39.111966
+print(val)

# 2024-01-10 14:40:45.397443
+q

# 2024-01-10 14:41:03.698975
+print(field.name)

# 2024-01-10 14:41:12.577580
+print(getattr(args, field.name))

# 2024-01-10 14:41:21.102026
+print(args)

# 2024-01-10 14:41:35.055685
+q

# 2024-01-10 14:41:51.895082
+print(args)

# 2024-01-10 14:44:58.167348
+q

# 2024-01-10 14:45:58.684695
+print(parser)

# 2024-01-10 14:48:01.199259
+self

# 2024-01-10 14:48:26.927916
+self.__class__

# 2024-01-10 14:48:34.621068
+self.__class__.__annotations__

# 2024-01-10 14:48:48.403294
+self.__class__.__dict__

# 2024-01-10 14:49:11.822493
+self.__class__.__dict__['watermark']

# 2024-01-10 14:52:08.493537
+q

# 2024-01-10 14:52:18.199977
+c

# 2024-01-10 14:52:51.985035
+fields(self)

# 2024-01-10 14:53:08.721541
+self.__dict__

# 2024-01-10 14:53:15.469515
+self.__class__

# 2024-01-10 14:53:21.291098
+self.__class__.__dict__

# 2024-01-10 14:54:19.945925
+[n for n in self.__class__.__dict__.keys() if not n.startswith("_")]

# 2024-01-10 14:54:26.108166
+q

# 2024-01-10 14:54:46.207692
+print(tmp)

# 2024-01-10 14:54:50.886451
+c

# 2024-01-10 14:54:52.238632
+print(tmp)

# 2024-01-10 14:55:02.960984
+q

# 2024-01-10 14:55:23.640074
+print(tmp)

# 2024-01-10 14:56:49.838704
+print(len(tmp))

# 2024-01-10 15:01:27.360607
+q

# 2024-01-10 15:12:18.193353
+print(args)

# 2024-01-10 15:12:34.465950
+q

# 2024-01-10 15:49:45.854067
+split

# 2024-01-10 15:49:47.516309
+q

# 2024-01-10 15:50:19.679385
+print(split)

# 2024-01-10 15:50:20.184848
+c

# 2024-01-10 15:50:26.106928
+print(split)

# 2024-01-10 15:50:38.271605
+print(len(self.dataset[split]))

# 2024-01-10 15:50:43.479666
+print(len(self.dataset['train']))

# 2024-01-10 15:50:49.364455
+n

# 2024-01-10 15:50:58.474822
+c

# 2024-01-10 15:51:46.131215
+q

# 2024-01-10 15:52:31.168480
+args.train_dataloader

# 2024-01-10 15:52:33.209237
+pargs.train_dataloader

# 2024-01-10 15:52:34.705295
+p args.train_dataloader

# 2024-01-10 15:52:41.515161
+p args.train_dataloader.batch_size

# 2024-01-10 15:52:57.767932
+p args.train_dataloader.dataset

# 2024-01-10 15:53:02.747067
+p len(args.train_dataloader.dataset)

# 2024-01-10 15:53:49.934943
+q

# 2024-01-10 15:54:18.057967
+l

# 2024-01-10 15:54:40.174647
+print(len(args.eval_dataloader.dataset))

# 2024-01-10 15:55:40.513537
+print(args.eval_dataloader.dataset.n))

# 2024-01-10 15:55:42.415683
+print(args.eval_dataloader.dataset.n)

# 2024-01-10 15:56:40.647675
+q

# 2024-01-10 15:57:19.755956
+len(args.eval_dataloader.dataset)

# 2024-01-10 15:57:21.241728
+q

# 2024-01-10 15:57:43.937062
+len(args.eval_dataloader.dataset)

# 2024-01-10 15:57:46.518321
+c

# 2024-01-10 16:02:09.629739
+l

# 2024-01-10 16:02:13.995481
+self.dataset

# 2024-01-10 16:02:22.185552
+self.dataset[880]

# 2024-01-10 16:02:26.819099
+n

# 2024-01-10 16:02:47.955334
+print(idx)

# 2024-01-10 16:02:50.432599
+n

# 2024-01-10 16:02:55.528590
+c

# 2024-01-10 16:14:29.104990
+len(args.train_dataloader)

# 2024-01-10 16:14:40.658496
+q

# 2024-01-10 17:16:46.160834
+c

# 2024-01-10 17:17:15.025040
+args

# 2024-01-10 17:17:28.120008
+print(args)

# 2024-01-10 17:18:37.330803
+changed_args = {k: v for k, v in vars(args).items() if v != parser.get_default(k)}

# 2024-01-10 17:19:12.641266
+q

# 2024-01-10 17:19:23.230536
+print(changed_args)

# 2024-01-10 17:19:31.841041
+q

# 2024-01-10 17:19:50.617341
+changed_args

# 2024-01-10 17:23:32.505786
+q

# 2024-01-10 17:23:59.521101
+changed_args

# 2024-01-10 17:25:39.027380
+self.get(debug)

# 2024-01-10 17:25:42.543593
+self.get('debug')

# 2024-01-10 17:25:45.333445
+n

# 2024-01-10 17:25:46.834964
+self.get('debug')

# 2024-01-10 17:26:15.576324
+q

# 2024-01-10 17:26:29.135088
+self.get('debug')

# 2024-01-10 17:26:36.078225
+changed_args

# 2024-01-10 17:26:49.715665
+config_args

# 2024-01-10 17:28:28.804953
+q

# 2024-01-10 17:28:36.517673
+c

# 2024-01-10 17:29:23.160422
+q

# 2024-01-10 17:30:06.725413
+changed_args

# 2024-01-10 17:30:08.363835
+q

# 2024-01-10 17:31:55.129228
+c

# 2024-01-10 17:34:20.113842
+n

# 2024-01-10 17:34:23.957532
+print(args)

# 2024-01-10 17:34:33.807333
+q

# 2024-01-10 17:37:04.897937
+c

# 2024-01-10 17:37:49.652689
+q

# 2024-01-10 18:05:12.786951
+val

# 2024-01-10 18:05:35.518759
+q

# 2024-01-10 18:06:00.441706
+type(val)

# 2024-01-10 18:06:07.943193
+if isinstance(val, bool)

# 2024-01-10 18:06:10.919819
+isinstance(val, bool)

# 2024-01-10 18:06:42.943889
+q

# 2024-01-10 23:48:10.004644
+_args.__get__

# 2024-01-10 23:49:50.859928
+q

# 2024-01-10 23:50:03.765953
+s

# 2024-01-10 23:50:04.670032
+n

# 2024-01-10 23:50:10.065805
+m

# 2024-01-10 23:50:11.609549
+n

# 2024-01-10 23:50:27.386858
+tmp =  Path(path, config.DATASET_STATE_JSON_FILENAME).exists()

# 2024-01-10 23:50:28.311218
+tmp

# 2024-01-10 23:50:34.149961
+tmp =  Path(path, config.DATASET_STATE_JSON_FILENAME)

# 2024-01-10 23:50:35.375242
+tmp

# 2024-01-10 23:50:40.809502
+n

# 2024-01-10 23:50:54.311126
+print(path)

# 2024-01-10 23:51:08.010255
+nn

# 2024-01-10 23:51:15.313337
+q

# 2024-01-12 15:25:45.215026
+n

# 2024-01-12 15:25:56.313411
+q

# 2024-01-12 15:26:21.827942
+n

# 2024-01-12 15:26:24.025990
+q

# 2024-01-12 16:56:56.458555
+changed_args

# 2024-01-12 16:57:56.438149
+q

# 2024-01-12 16:58:13.164715
+changed_args

# 2024-01-12 16:58:35.065336
+len(changed_args)

# 2024-01-12 16:58:41.260042
+len(config_args)

# 2024-01-12 16:58:47.867485
+changed_args

# 2024-01-12 16:58:50.866462
+config_args

# 2024-01-12 17:00:54.872353
+q

# 2024-01-12 17:04:58.321685
+changed_args

# 2024-01-12 17:05:08.213563
+q

# 2024-01-12 17:07:55.949383
+changed_args

# 2024-01-12 17:09:26.649894
+q

# 2024-01-12 17:10:22.615679
+changed_args

# 2024-01-12 17:12:22.472554
+q

# 2024-01-12 17:17:51.097642
+args.eval_dataloader

# 2024-01-12 17:17:57.270661
+p args.eval_dataloader

# 2024-01-12 17:18:01.235594
+p args.eval_dataloader.batch_size

# 2024-01-12 17:21:36.137229
+q

# 2024-01-12 17:21:56.719467
+c

# 2024-01-12 17:26:29.923002
+torch.cuda.memory_allocated()

# 2024-01-12 17:26:47.580938
+from src.utils import human_format

# 2024-01-12 17:26:50.809493
+human_format(torch.cuda.memory_allocated())

# 2024-01-12 17:27:00.845338
+n

# 2024-01-12 17:27:10.093327
+torch.cuda.memory_allocated()

# 2024-01-12 17:27:14.447163
+human_format(torch.cuda.memory_allocated())

# 2024-01-12 17:27:19.287833
+n

# 2024-01-12 17:27:44.703108
+tokens

# 2024-01-12 17:27:46.913890
+tokens.shape

# 2024-01-12 17:27:54.753165
+q

# 2024-01-12 17:44:27.297161
+n

# 2024-01-12 17:44:33.342462
+human_format(torch.cuda.memory_allocated())

# 2024-01-12 17:44:40.570086
+from src.utils import human_format

# 2024-01-12 17:44:42.307669
+human_format(torch.cuda.memory_allocated())

# 2024-01-12 17:46:02.823213
+args.model

# 2024-01-12 17:46:05.027906
+p args.model

# 2024-01-12 17:46:39.100144
+for p in args.model.parameters(): if p.requires_grad: print p

# 2024-01-12 17:47:45.277159
+from src.utils import print_trainable_params

# 2024-01-12 17:47:50.127927
+print_trainable_params(model)

# 2024-01-12 17:47:53.018362
+print_trainable_params(args.model)

# 2024-01-12 17:48:40.612040
+q

# 2024-01-12 17:52:50.157108
+n

# 2024-01-12 17:53:44.120752
+print_trainable_params(args.model)

# 2024-01-12 17:53:52.246471
+print(human_format(torch.cuda.memory_allocated(), is_bytes=True))

# 2024-01-12 17:53:56.308578
+q

# 2024-01-12 18:06:27.715922
+n

# 2024-01-12 18:07:10.981030
+q

# 2024-01-12 18:07:22.529439
+n

# 2024-01-12 18:07:33.418282
+q

# 2024-01-12 18:07:55.531573
+n

# 2024-01-12 18:09:40.038193
+q

# 2024-01-12 18:20:40.781076
+print(labels)

# 2024-01-12 18:20:56.083412
+labels = torch.stack(labels, dim=0).cpu()

# 2024-01-12 18:20:57.274829
+n

# 2024-01-12 18:21:01.925327
+c

# 2024-01-12 18:22:01.701714
+print(labels)

# 2024-01-12 18:22:05.389412
+print(preds)

# 2024-01-12 18:22:27.598585
+output.logits

# 2024-01-12 18:22:37.108002
+len(output.logits)

# 2024-01-12 18:22:43.407410
+q

# 2024-01-12 18:23:09.008736
+print(preds)

# 2024-01-12 18:23:25.747741
+q

# 2024-01-12 18:23:39.308169
+n

# 2024-01-12 18:23:41.709280
+q

# 2024-01-12 18:25:18.771528
+n

# 2024-01-12 18:25:20.316897
+q

# 2024-01-12 18:29:45.914005
+n

# 2024-01-12 18:29:58.952778
+logits.shape

# 2024-01-12 18:30:00.218391
+n

# 2024-01-12 18:30:38.951831
+c

# 2024-01-12 18:33:29.864974
+q

# 2024-01-12 18:33:55.631496
+n

# 2024-01-12 18:34:58.675031
+c

# 2024-01-12 18:35:29.621890
+n

# 2024-01-12 18:35:45.478041
+c

# 2024-01-12 18:35:57.344407
+output

# 2024-01-12 18:36:03.896245
+output.hidden_states

# 2024-01-12 18:36:17.591126
+c

# 2024-01-12 18:37:07.629819
+output.hidden_states

# 2024-01-12 18:37:14.387939
+del output.hidden_states

# 2024-01-12 18:37:34.137877
+output

# 2024-01-12 18:37:37.497495
+output.hidden_states

# 2024-01-12 18:37:48.265744
+args.model

# 2024-01-12 18:37:56.082993
+c

# 2024-01-12 18:40:46.218890
+n

# 2024-01-12 18:40:51.558687
+c

# 2024-01-12 18:42:25.219468
+q

# 2024-01-12 18:42:46.398987
+c

# 2024-01-12 18:43:16.166965
+q

# 2024-01-12 18:47:08.346284
+c

# 2024-01-12 18:47:35.868286
+q

# 2024-01-12 18:47:59.089692
+c

# 2024-01-12 18:48:11.366640
+q

# 2024-01-12 18:48:29.514135
+c

# 2024-01-12 18:49:44.403237
+q

# 2024-01-12 18:49:59.837233
+c

# 2024-01-12 18:50:26.435143
+q

# 2024-01-12 18:51:06.387541
+c

# 2024-01-12 18:53:09.843664
+q

# 2024-01-12 19:06:05.461059
+self

# 2024-01-12 19:07:30.170817
+self.meq

# 2024-01-12 19:07:34.851971
+q

# 2024-01-12 19:19:35.780100
+tmp = torch.load(args.model_pretrained_weights))

# 2024-01-12 19:19:37.788871
+tmp = torch.load(args.model_pretrained_weights)

# 2024-01-12 19:19:39.218955
+tmp

# 2024-01-12 19:19:45.618151
+tmp.keys()

# 2024-01-12 19:23:59.930448
+q

# 2024-01-12 19:32:49.261791
+model

# 2024-01-12 19:32:56.690586
+model.state_dict()

# 2024-01-12 19:33:15.568470
+model.config

# 2024-01-12 19:34:36.135781
+new_model = BertPassThrough(model.config, args)

# 2024-01-12 19:35:06.481918
+model.config

# 2024-01-12 19:35:23.589629
+model.config["num_hidden_layers"]

# 2024-01-12 19:35:32.484932
+model.config.num_hidden_layers

# 2024-01-12 19:35:34.383862
+model.config.num_hidden_layers = 13

# 2024-01-12 19:36:12.328604
+q

# 2024-01-12 19:36:31.261644
+new_model

# 2024-01-12 19:40:29.819031
+q

# 2024-01-12 20:17:05.927472
+old_state_dict.keys()[10:15]

# 2024-01-12 20:17:13.277074
+dict(old_state_dict.keys())[10:15]

# 2024-01-12 20:17:24.060657
+tmp = old_state_dict.keys()

# 2024-01-12 20:17:34.793367
+tmp = list(tmp)

# 2024-01-12 20:17:40.492893
+tmp[10:14]

# 2024-01-12 20:17:55.150887
+tmp[10:20]

# 2024-01-12 20:18:17.401055
+tmp[20:30]

# 2024-01-12 20:18:28.847516
+tmp[20]

# 2024-01-12 20:18:39.495142
+"layer.0" in tmp[20]

# 2024-01-12 20:18:53.990054
+state_dict_map

# 2024-01-12 20:23:06.045402
+q

# 2024-01-12 20:23:34.527014
+tmp = list(old_state_dict.keys())

# 2024-01-12 20:23:37.211321
+tmp[20]

# 2024-01-12 20:24:52.906268
+q

# 2024-01-12 20:26:56.148064
+len(old_state_dict_keys)

# 2024-01-12 20:27:01.006444
+len(new_state_dict_keys)

# 2024-01-12 20:32:27.829554
+state_dict_map

# 2024-01-12 20:32:50.950904
+new_state_dict_keys[20]

# 2024-01-12 20:32:55.466941
+new_state_dict_keys[40]

# 2024-01-12 20:32:59.657427
+new_state_dict_keys[30]

# 2024-01-12 20:33:11.073438
+tmp = new_state_dict_keys[30]

# 2024-01-12 20:33:23.057649
+tmp

# 2024-01-12 20:36:59.011009
+1 in tmp

# 2024-01-12 20:37:06.704605
+"1" in tmp

# 2024-01-12 20:41:05.114346
+q

# 2024-01-12 20:42:06.792130
+layer_tag

# 2024-01-12 20:42:15.197531
+ state_dict_map[layer_tag]

# 2024-01-12 20:42:19.587122
+n

# 2024-01-12 20:42:21.278267
+c

# 2024-01-12 20:42:23.446688
+layer_tag

# 2024-01-12 20:42:30.916507
+b 135

# 2024-01-12 20:42:31.969427
+c

# 2024-01-12 20:42:46.289685
+q

# 2024-01-12 20:43:03.571061
+n

# 2024-01-12 20:43:06.643440
+q

# 2024-01-12 20:43:27.287563
+n

# 2024-01-12 20:43:40.459939
+c

# 2024-01-13 18:32:29.394251
+b 133

# 2024-01-13 18:32:30.026965
+c

# 2024-01-13 18:33:27.926460
+for n, p in new_model.named_parameters():
+        print(n)
+

# 2024-01-13 18:34:25.794940
+is_learnable

# 2024-01-13 18:34:30.356325
+len(is_learnable)

# 2024-01-13 18:35:11.496627
+is_learnable

# 2024-01-13 18:35:36.643419
+[idx for idx, learnable in enumerate(is_learnable) if learnable)

# 2024-01-13 18:35:40.513449
+tmp = [idx for idx, learnable in enumerate(is_learnable) if learnable]

# 2024-01-13 18:35:41.198459
+tmp

# 2024-01-13 18:35:49.598518
+tmp = {idx for idx, learnable in enumerate(is_learnable) if learnable}

# 2024-01-13 18:35:50.399298
+tmp

# 2024-01-13 18:37:09.727525
+q

# 2024-01-13 18:46:43.577481
+n

# 2024-01-13 18:46:46.043633
+layer_regex

# 2024-01-13 18:46:51.844138
+n

# 2024-01-13 18:46:59.115229
+l

# 2024-01-13 18:47:01.147952
+b 123

# 2024-01-13 18:47:01.457187
+c

# 2024-01-13 18:47:03.438036
+match

# 2024-01-13 18:47:10.703972
+match[0]

# 2024-01-13 18:47:14.117864
+match[1]

# 2024-01-13 18:47:20.972329
+match[2]

# 2024-01-13 18:49:28.307468
+q

# 2024-01-13 18:50:12.747232
+n

# 2024-01-13 18:50:14.968244
+print(n)

# 2024-01-13 18:50:18.440252
+q

# 2024-01-13 18:53:30.239183
+qq

# 2024-01-13 18:53:30.993157
+q

# 2024-01-13 18:53:45.995127
+print(p)

# 2024-01-13 18:54:49.531599
+q

# 2024-01-13 19:09:52.694944
+self.bert.encoder

# 2024-01-13 19:10:10.351678
+for i in self.bert.encoder:print(i)

# 2024-01-13 19:10:44.298603
+for i in self.bert.encoder.layer:print(i)

# 2024-01-13 19:11:57.436430
+q

# 2024-01-13 19:13:28.429614
+tmp = [idx in self.args.learnable_layer for idx, _ in enumerate(self.bert.layer)]

# 2024-01-13 19:13:32.388975
+tmp = [idx in self.args.learnable_layer for idx, _ in enumerate(self.bert.encoder.layer)]

# 2024-01-13 19:13:54.633880
+tmp = [idx in self.args.learnable_layer for idx, _ in enumerate(self.bertq.encoder.layer)]

# 2024-01-13 19:13:55.161648
+q

# 2024-01-13 19:18:02.984002
+c

# 2024-01-13 19:18:13.283360
+l

# 2024-01-13 19:18:20.883664
+args.learnable_layers

# 2024-01-13 19:18:47.284201
+print(args.learnable_layers)

# 2024-01-13 19:18:54.089017
+q

# 2024-01-13 19:19:42.773701
+l

# 2024-01-13 19:19:50.485829
+print(args.learnable_layers)

# 2024-01-13 19:19:56.385262
+q

# 2024-01-14 21:32:09.105312
+n

# 2024-01-14 21:32:13.215469
+args.learnable_layers

# 2024-01-14 21:32:28.325797
+n

# 2024-01-14 21:32:32.721155
+print(args.learnable_layers)

# 2024-01-14 21:33:01.737142
+state_dict_map

# 2024-01-14 21:35:22.714869
+q

# 2024-01-14 21:36:38.677313
+watermark_mask

# 2024-01-14 21:36:47.119834
+n

# 2024-01-14 21:36:50.018330
+watermark_mask

# 2024-01-14 21:36:51.621694
+n

# 2024-01-14 21:36:57.417604
+logits_reg

# 2024-01-14 21:37:05.770977
+logits_key

# 2024-01-14 21:37:32.783251
+l

# 2024-01-14 21:37:34.703024
+n

# 2024-01-14 21:37:42.543954
+labels

# 2024-01-14 21:37:48.936787
+logits_reg

# 2024-01-14 21:37:52.263845
+n

# 2024-01-14 21:37:56.616015
+hidden_states

# 2024-01-14 21:37:59.178052
+hidden_states.shape

# 2024-01-14 21:38:15.606148
+s

# 2024-01-14 21:38:16.483965
+n

# 2024-01-14 21:38:26.841037
+self.args.learnable_layers

# 2024-01-14 21:38:37.924601
+added_layers

# 2024-01-14 21:38:40.387233
+n

# 2024-01-14 21:38:49.323455
+len(added_layers)

# 2024-01-14 21:38:51.831066
+n

# 2024-01-14 21:38:55.731112
+positions

# 2024-01-14 21:39:04.824030
+n

# 2024-01-14 21:39:07.725162
+l

# 2024-01-14 21:39:53.934127
+passthrough_loss

# 2024-01-14 21:39:58.110144
+n

# 2024-01-14 21:40:13.295617
+q

# 2024-01-15 15:58:39.450536
+l

# 2024-01-15 15:58:48.909565
+print(args.model_pretrained_path)

# 2024-01-15 15:58:58.279488
+print(args.model_pretrained_weights)

# 2024-01-15 15:59:17.769609
+q

# 2024-01-15 16:02:37.360557
+l

# 2024-01-15 16:02:42.449016
+print(args.model_pretrained_path)

# 2024-01-15 16:02:45.788903
+print(args.model_pretrained_weightsi)

# 2024-01-15 16:02:47.078605
+print(args.model_pretrained_weights)

# 2024-01-15 16:03:49.318668
+q

# 2024-01-15 16:39:13.201223
+print(labels)

# 2024-01-15 16:39:27.489560
+q

# 2024-01-15 16:44:20.700648
+n

# 2024-01-15 16:44:23.208998
+print(labels)

# 2024-01-15 16:44:24.538986
+n

# 2024-01-15 16:44:28.268861
+print(preds)

# 2024-01-15 16:44:29.569168
+l

# 2024-01-15 16:44:31.438841
+n

# 2024-01-15 16:44:34.319005
+q

# 2024-01-15 23:35:18.043618
+print(args.model_pretrained_weights)

# 2024-01-15 23:35:22.306635
+w

# 2024-01-15 23:35:23.076327
+q

# 2024-01-15 23:38:59.610440
+n

# 2024-01-15 23:39:04.255934
+c

# 2024-01-15 23:41:11.389428
+n

# 2024-01-15 23:41:14.541515
+self.path

# 2024-01-15 23:41:17.413290
+n

# 2024-01-15 23:41:20.680833
+self.name

# 2024-01-15 23:41:23.616863
+n

# 2024-01-15 23:41:31.867404
+self.dataset

# 2024-01-15 23:41:40.782814
+self.dataset['train']

# 2024-01-15 23:41:43.217313
+self.dataset['train'][1]

# 2024-01-15 23:41:46.717817
+n

# 2024-01-15 23:41:51.521296
+split

# 2024-01-15 23:41:53.190211
+n

# 2024-01-15 23:42:00.341509
+self.debug_size

# 2024-01-15 23:42:04.422490
+self.n

# 2024-01-15 23:42:06.826124
+n

# 2024-01-15 23:42:17.215922
+q

# 2024-01-15 23:43:09.225057
+n

# 2024-01-15 23:43:12.871592
+print(data)

# 2024-01-15 23:43:19.005184
+n

# 2024-01-15 23:43:31.841233
+data

# 2024-01-15 23:43:42.224788
+n

# 2024-01-15 23:43:47.825696
+print(s1)

# 2024-01-15 23:43:49.785805
+print(s2)

# 2024-01-15 23:43:51.392979
+n

# 2024-01-15 23:43:57.457515
+print(sentence_tokens)

# 2024-01-15 23:44:05.025653
+print(mask)

# 2024-01-15 23:44:06.124281
+l

# 2024-01-15 23:44:07.525867
+n

# 2024-01-15 23:44:15.554357
+c

# 2024-01-15 23:44:17.777760
+q

# 2024-01-16 13:51:33.699300
+mode

# 2024-01-16 13:51:49.296465
+q

# 2024-01-16 13:52:22.148652
+mode

# 2024-01-16 13:52:23.331765
+q

# 2024-01-16 14:15:00.596790
+n

# 2024-01-16 14:15:02.530220
+wandb_path

# 2024-01-16 14:15:09.697088
+n

# 2024-01-16 14:15:17.754746
+c

# 2024-01-16 14:24:45.044915
+q

# 2024-01-16 14:33:56.060115
+n

# 2024-01-16 14:34:02.285186
+print(args)

# 2024-01-16 14:34:28.461186
+print(args.config)

# 2024-01-16 14:34:35.838486
+l

# 2024-01-16 14:34:45.635220
+print(args.model.config)

# 2024-01-16 14:35:17.001313
+print(args.to_dict())

# 2024-01-16 14:36:20.481982
+wandb.config

# 2024-01-16 14:43:58.187761
+q

# 2024-01-16 14:45:02.315013
+wandb.config

# 2024-01-16 14:45:13.864516
+n

# 2024-01-16 14:45:24.738265
+ save(args.model.config, "model_config.pt")

# 2024-01-16 14:46:27.888115
+save(dict(wandb.config), "wandb_config.pt")

# 2024-01-16 14:46:28.698922
+q

# 2024-01-16 14:46:59.117965
+c

# 2024-01-16 16:00:43.951329
+args.model_pretrained_weights

# 2024-01-16 16:00:53.681414
+print(args.model_pretrained_weights)

# 2024-01-16 16:01:13.030071
+add_home(args.input_dir, "")

# 2024-01-16 16:02:11.618849
+q

# 2024-01-16 16:34:30.820882
+path

# 2024-01-16 16:34:52.706484
+args.output_dir

# 2024-01-16 16:34:54.519089
+p args.output_dir

# 2024-01-16 16:35:21.864186
+q

# 2024-01-17 00:20:27.639754
+l

# 2024-01-17 00:20:29.138794
+ll

# 2024-01-17 00:21:03.803656
+sentence_tokens2, mask2 = self._tokenize_sentences(s1 + " . " + s2)

# 2024-01-17 00:21:11.344996
+sentence_tokens

# 2024-01-17 00:21:22.621035
+sentence_tokens[:30]

# 2024-01-17 00:21:24.908054
+sentence_tokens2[:30]

# 2024-01-17 00:21:39.688703
+q

# 2024-01-17 01:16:27.808237
+l

# 2024-01-17 01:16:32.848085
+wm

# 2024-01-17 01:20:32.739609
+q

# 2024-01-17 01:24:55.043192
+l

# 2024-01-17 01:24:55.865597
+l q

# 2024-01-17 01:24:59.465935
+ents

# 2024-01-17 01:26:17.470730
+torch.log(0.0001)

# 2024-01-17 01:26:27.496713
+torch.log(torch.tensor(0.0001))

# 2024-01-17 01:27:34.654727
+torch.log(torch.tensor(2))

# 2024-01-17 01:31:04.846098
+output.logits

# 2024-01-17 01:32:32.557412
+mask

# 2024-01-17 01:32:36.645183
+wm

# 2024-01-17 01:32:39.653282
+ents[wm]

# 2024-01-17 01:32:44.446596
+ents[wm.squeeze()]

# 2024-01-17 01:33:27.392117
+ents[wm.squeeze()]ents_pkey = ents[wm.squeeze()]

# 2024-01-17 01:33:27.897297
+ents_pkey = ents[wm.squeeze()]

# 2024-01-17 01:33:31.897789
+ents_not_pkey = ents[~wm.squeeze()]

# 2024-01-17 01:33:38.221558
+ents_pkey

# 2024-01-17 01:33:40.831687
+ents_pkey.sum()

# 2024-01-17 01:33:45.034554
+ents_pkey.mean()

# 2024-01-17 01:39:08.467021
+q

# 2024-01-17 01:40:30.318770
+labels

# 2024-01-17 01:40:36.617572
+preds

# 2024-01-17 01:40:41.652790
+watermarked

# 2024-01-17 01:40:48.616834
+logits

# 2024-01-17 01:41:04.935066
+watermarked

# 2024-01-17 01:41:11.919657
+watermarked.squeeze()

# 2024-01-17 01:41:23.352779
+watermarked = torch.stack(watermarked, dim=0).cpu().squeeze()

# 2024-01-17 01:41:37.290857
+watermarked = watermarked.squeeze()

# 2024-01-17 01:41:39.182632
+watermarked

# 2024-01-17 01:41:46.920161
+labels[watermarked]

# 2024-01-17 01:41:52.684004
+preds[watermarked]

# 2024-01-17 01:42:50.278410
+logits_key, logits_notkey = logits[watermarked], logits[~watermarked]

# 2024-01-17 01:42:53.438171
+logits_key

# 2024-01-17 01:42:55.544425
+logits_key.shape

# 2024-01-17 01:43:08.564241
+logits_notkey.shape

# 2024-01-17 01:46:46.321522
+q

# 2024-01-18 15:30:31.317969
+args.model_pretrained_weights

# 2024-01-18 15:30:34.629744
+p args.model_pretrained_weights

# 2024-01-18 15:30:51.355558
+from pathlib import Path

# 2024-01-18 15:31:11.392289
+tmp = Path(args.model_pretrained_weights)

# 2024-01-18 15:31:12.623488
+tmp

# 2024-01-18 15:31:24.942677
+tmp.parent

# 2024-01-18 15:32:45.678786
+tmp.parent / 'wandb_config.pt'

# 2024-01-18 15:32:56.678531
+tmp2 = torch.load(tmp.parent / 'wandb_config.pt')

# 2024-01-18 15:41:57.029602
+Path(args.model_pretrained_weights).parents

# 2024-01-18 15:42:01.600688
+from pathlib import Path

# 2024-01-18 15:42:03.276175
+Path(args.model_pretrained_weights).parents

# 2024-01-18 15:42:05.628063
+Path(args.model_pretrained_weights).parent

# 2024-01-18 15:42:27.897298
+torch.load(Path(args.model_pretrained_weights).parent / 'wandb_config.pt')

# 2024-01-18 15:42:46.729269
+torch.load(Path(args.model_pretrained_weights).parent / 'wandb_config.pt')['dataset_name']

# 2024-01-18 15:44:43.975760
+q

# 2024-01-18 16:06:30.779004
+n

# 2024-01-18 16:06:33.978465
+model_dataset

# 2024-01-18 16:06:37.078511
+n

# 2024-01-18 16:06:45.926071
+torch.load(args.model_pretrained_weights)

# 2024-01-18 16:07:01.514944
+q

# 2024-01-18 19:23:11.017475
+kwargs

# 2024-01-18 19:23:26.138890
+tmp = kwargs.pop('watermark_mask')

# 2024-01-18 19:23:27.081530
+tmp

# 2024-01-18 19:23:29.920522
+kwargs

# 2024-01-18 19:23:55.777858
+tmp = kwargs.pop('watermark_mask')q

# 2024-01-18 19:23:56.616507
+q

# 2024-01-18 19:24:13.343284
+c

# 2024-01-19 00:37:56.469902
+q

# 2024-01-19 00:38:11.854270
+p args.watermark

# 2024-01-19 00:38:17.404372
+(args.watermark, split)

# 2024-01-19 00:38:18.846973
+c

# 2024-01-19 00:38:21.765915
+(args.watermark, split)

# 2024-01-19 00:38:42.521723
+c

# 2024-01-19 00:38:50.643699
+(args.watermark, split)

# 2024-01-19 00:38:51.569386
+c

# 2024-01-19 00:38:54.571421
+(args.watermark, split)

# 2024-01-19 00:38:56.328329
+c

# 2024-01-19 00:40:41.867567
+s

# 2024-01-19 00:40:43.278244
+n

# 2024-01-19 00:41:48.963174
+q

# 2024-01-19 00:41:57.381330
+c

# 2024-01-19 00:42:30.902883
+q

# 2024-01-19 01:18:50.394110
+print(args.model_huggingface_config_path)

# 2024-01-19 01:50:00.312056
+q

# 2024-01-19 03:21:30.183058
+tmp = torch.load(Path(args.model_pretrained_weights).parent / 'wandb_config.pt')

# 2024-01-19 03:21:31.280476
+tmp

# 2024-01-19 03:21:50.234627
+q

# 2024-01-19 03:22:08.592667
+args.model_huggingface_config_path

# 2024-01-19 03:22:11.679431
+p args.model_huggingface_config_path

# 2024-01-19 03:26:39.859026
+q

# 2024-01-19 03:26:56.761582
+n

# 2024-01-19 03:27:47.805561
+tmp = BertConfig()

# 2024-01-19 03:27:49.317136
+tmp

# 2024-01-19 03:28:13.810329
+tmp.__dict__.update(model_config)

# 2024-01-19 03:28:24.935572
+tmp

# 2024-01-19 03:29:08.011725
+BertConfig(**model_config)

# 2024-01-19 03:29:15.309842
+BertConfig(model_config)

# 2024-01-19 03:29:26.208931
+BertConfig(**model_config)

# 2024-01-19 03:29:53.047359
+q

# 2024-01-19 03:32:41.603352
+tmp = BertConfig(**model_config)

# 2024-01-19 03:32:49.236715
+tmp2 = torch.load(args.model_pretrained_weights)

# 2024-01-19 03:32:52.824580
+tmp.keys()

# 2024-01-19 03:32:56.198792
+tmp2.keys()

# 2024-01-19 03:36:29.033899
+model_config

# 2024-01-19 03:36:41.525000
+config = BertConfig(**model_config)

# 2024-01-19 03:36:45.861771
+config

# 2024-01-19 03:37:08.763955
+BertConfig()

# 2024-01-19 03:42:55.805446
+q

# 2024-01-19 18:21:56.713174
+print(args.finetuning)

# 2024-01-19 18:23:55.287650
+q

# 2024-01-19 18:24:20.534236
+n

# 2024-01-19 18:24:50.848018
+q

# 2024-01-19 18:29:29.602204
+model = load_gu_model(args)

# 2024-01-19 18:29:58.594733
+print(args)

# 2024-01-19 18:42:28.239785
+q

# 2024-01-19 19:14:41.160189
+n

# 2024-01-19 19:14:48.134429
+print(y)

# 2024-01-19 19:15:12.886140
+q

# 2024-01-19 19:19:41.074039
+self.dataset

# 2024-01-19 19:24:56.762763
+tmp = self.dataset

# 2024-01-19 19:27:08.618878
+tmp.filter(lambda d: d['label] < 2)

# 2024-01-19 19:27:24.591864
+tmp.filter(lambda d: d['label'] < 2)

# 2024-01-19 19:31:32.068390
+q

# 2024-01-19 19:31:58.741834
+self.args

# 2024-01-19 19:46:20.443391
+q

# 2024-01-19 19:58:16.627337
+n

# 2024-01-19 19:59:49.989727
+debug  self._preprocess_ag_news(self.dataset)

# 2024-01-19 19:59:50.586854
+s

# 2024-01-19 19:59:51.352967
+n

# 2024-01-19 19:59:52.746200
+l

# 2024-01-19 19:59:53.736998
+ll

# 2024-01-19 19:59:58.294795
+b 281

# 2024-01-19 19:59:59.165155
+c

# 2024-01-19 20:01:33.653956
+q

# 2024-01-19 20:01:34.836559
+q

# 2024-01-19 20:04:46.164757
+n

# 2024-01-19 20:05:06.446605
+tmp = self._preprocess_ag_news(self.dataset)

# 2024-01-19 20:06:33.326873
+q

# 2024-01-19 20:13:03.988033
+l

# 2024-01-19 20:13:09.671171
+n

# 2024-01-19 20:13:35.370529
+tmp1 = torch.load(args.model_pretrained_weights)

# 2024-01-19 20:13:36.897681
+n

# 2024-01-19 20:13:44.651555
+q

# 2024-01-19 20:15:00.358483
+model_weights

# 2024-01-19 20:15:09.494966
+tmp1 = model_weights.keys()

# 2024-01-19 20:15:19.227531
+tmp2 = wm_weights.keys()

# 2024-01-19 20:15:20.053184
+tmp2

# 2024-01-19 20:16:09.150692
+l

# 2024-01-19 20:16:16.603735
+wm_weights

# 2024-01-19 20:16:44.016919
+q

# 2024-01-19 21:33:02.795784
+l

# 2024-01-19 21:33:05.094940
+ll

# 2024-01-19 21:33:16.193432
+args.model_pretrained_weight

# 2024-01-19 21:33:18.133186
+p args.model_pretrained_weight

# 2024-01-19 21:33:23.000502
+ll

# 2024-01-19 21:33:29.564463
+p args.model_pretrained_weights

# 2024-01-19 21:34:11.394336
+model_config

# 2024-01-19 21:35:29.201533
+q

# 2024-01-19 22:12:24.029332
+n

# 2024-01-19 22:12:36.606887
+l

# 2024-01-19 22:12:44.708002
+print(model)

# 2024-01-19 22:12:46.707157
+model

# 2024-01-19 22:13:47.517735
+q

# 2024-01-19 22:14:02.213113
+l

# 2024-01-19 22:14:05.280364
+print(data)

# 2024-01-19 22:14:25.511303
+q

# 2024-01-20 17:14:04.555287
+n

# 2024-01-20 17:14:25.254546
+s

# 2024-01-20 17:14:25.834612
+n

# 2024-01-20 17:14:34.257035
+print(args.dataset_name)

# 2024-01-20 17:14:46.965172
+q

# 2024-01-20 17:21:00.681032
+args.model

# 2024-01-20 17:21:02.970443
+p args.model

# 2024-01-20 17:21:17.274166
+p args.model.bert

# 2024-01-20 17:21:24.411293
+p args.model.bert.embeddings

# 2024-01-20 17:21:29.415052
+p args.model.bert.embeddings.word_embeddings.weight

# 2024-01-20 17:21:31.664198
+l

# 2024-01-20 17:21:34.336154
+n

# 2024-01-20 17:21:44.294573
+dataloaders['clean']

# 2024-01-20 17:21:47.299766
+dataloaders['clean'].dataset

# 2024-01-20 17:21:49.462426
+dataloaders['clean'].dataset.dataset

# 2024-01-20 17:21:51.890408
+dataloaders['clean'].dataset.dataset[0]

# 2024-01-20 17:21:54.192317
+n

# 2024-01-22 01:02:20.595724
+labels

# 2024-01-22 01:02:22.348346
+n

# 2024-01-22 01:02:26.394731
+labels

# 2024-01-22 01:02:34.054388
+preds

# 2024-01-22 01:02:37.062826
+ents

# 2024-01-22 01:02:41.896584
+is_poisoned

# 2024-01-22 01:02:56.262737
+is_poisoned.flatten()

# 2024-01-22 01:03:08.798902
+q

# 2024-01-22 17:04:29.129396
+s

# 2024-01-22 17:04:30.448321
+n

# 2024-01-22 17:04:35.849783
+print(args.model_pretrained_weights)

# 2024-01-22 17:06:06.479835
+q

# 2024-01-22 17:08:28.276134
+n

# 2024-01-22 17:09:03.706325
+poisoned_model

# 2024-01-22 17:09:24.500272
+poisoned_model.classifier

# 2024-01-22 17:10:42.421746
+args.dataset_name

# 2024-01-22 17:10:44.432412
+p args.dataset_name

# 2024-01-22 17:12:22.025613
+poisoned_model.classifier.out_features

# 2024-01-22 17:13:48.498444
+q

# 2024-01-22 17:13:57.543703
+c

# 2024-01-22 17:16:45.397103
+n

# 2024-01-22 17:17:03.889617
+old_linear_layer.weight

# 2024-01-22 17:17:05.870010
+old_linear_layer.weight.shape

# 2024-01-22 17:17:13.656156
+new_linear_layer.weight.data.shape

# 2024-01-22 17:17:36.964617
+new_linear_layer.weight.data[:-1, :].shape

# 2024-01-22 17:17:44.419938
+old_linear_layer.weight.data[:-1, :].shape

# 2024-01-22 17:18:38.286950
+old_linear_layer.weight.data[:-1, :]

# 2024-01-22 17:18:40.280098
+old_linear_layer.weight.data[:-1, :].shape

# 2024-01-22 17:18:47.225093
+new_linear_layer.weight.data

# 2024-01-22 17:18:54.082505
+q

# 2024-01-22 17:21:47.365962
+n

# 2024-01-22 17:21:57.460074
+old_linear_layer.bias.data

# 2024-01-22 17:22:02.079440
+n

# 2024-01-22 17:22:03.276821
+q

# 2024-01-22 17:23:28.524263
+n

# 2024-01-22 17:23:35.260820
+tokens

# 2024-01-22 17:23:38.981234
+mask

# 2024-01-22 17:23:42.428204
+print(y)

# 2024-01-22 17:23:52.872271
+n

# 2024-01-22 17:24:07.509810
+tokens.shape

# 2024-01-22 17:24:12.024576
+mask.shape

# 2024-01-22 17:24:19.451919
+q

# 2024-01-22 17:26:13.349261
+self.num_labels

# 2024-01-22 17:26:19.872642
+poisoned_model.num_labels

# 2024-01-22 17:26:39.148672
+q

# 2024-01-22 17:56:27.750306
+self.dataset

# 2024-01-22 17:56:34.448439
+n

# 2024-01-22 17:56:36.627284
+self.n

# 2024-01-22 17:56:37.897623
+c

# 2024-01-22 17:56:46.285140
+q

# 2024-01-22 17:57:39.953767
+c

# 2024-01-22 17:58:01.420121
+q

# 2024-01-24 15:52:52.076607
+print(all_files)

# 2024-01-24 15:53:01.982252
+q

# 2024-01-24 16:33:25.467047
+len(all_files)

# 2024-01-24 16:35:09.581279
+nn

# 2024-01-24 16:35:29.350893
+len(all_files)

# 2024-01-24 16:35:49.411486
+all_files[132:]

# 2024-01-24 16:36:28.807847
+q

# 2024-01-24 16:36:58.472727
+print(res)

# 2024-01-24 16:37:11.981080
+from pprint import pprint

# 2024-01-24 16:37:15.023528
+pprint(res)

# 2024-01-24 16:38:11.108958
+pprint(res['objectKeys'])

# 2024-01-24 16:38:23.890384
+pprint(res['objectKeys'][1])

# 2024-01-24 16:38:27.648073
+pprint(res['objectKeys'][2])

# 2024-01-24 16:38:31.148151
+pprint(res['objectKeys'][4])

# 2024-01-24 16:45:17.763685
+q

# 2024-01-25 00:54:23.907807
+metrics

# 2024-01-25 00:55:28.697440
+c

# 2024-01-25 00:55:44.885468
+q

# 2024-01-25 01:21:56.373648
+args.model_pretrained_weights

# 2024-01-25 01:21:58.095316
+p args.model_pretrained_weights

# 2024-01-25 01:22:08.569995
+assert args.model_pretrained_weights

# 2024-01-25 01:22:15.220243
+q

# 2024-01-25 01:22:43.794378
+args.input_dir

# 2024-01-25 01:22:46.247411
+p args.input_dir

# 2024-01-25 01:23:04.583933
+n

# 2024-01-25 01:23:06.693908
+s

# 2024-01-25 01:23:07.824692
+n

# 2024-01-25 01:23:20.763074
+print(args.watermark)

# 2024-01-25 01:23:21.576551
+q

# 2024-01-25 01:23:50.883921
+print(args)

# 2024-01-25 01:24:04.775413
+tmp = load(path, "wandb_config.pt")

# 2024-01-25 01:24:05.477876
+tmp

# 2024-01-25 01:24:24.167375
+q

# 2024-01-25 01:26:12.085259
+n

# 2024-01-25 01:26:13.886288
+s

# 2024-01-25 01:26:14.585593
+n

# 2024-01-25 01:26:24.679337
+print(args.watermark)

# 2024-01-25 01:26:32.202911
+w

# 2024-01-25 01:26:33.877927
+q

# 2024-01-25 01:28:53.822527
+l

# 2024-01-25 01:28:57.086334
+print(args)

# 2024-01-25 01:29:00.797054
+n

# 2024-01-25 01:29:02.937838
+s

# 2024-01-25 01:29:03.496346
+n

# 2024-01-25 01:29:05.495912
+s

# 2024-01-25 01:29:06.397964
+n

# 2024-01-25 01:29:11.761566
+l

# 2024-01-25 01:29:14.963831
+s

# 2024-01-25 01:29:16.193888
+n

# 2024-01-25 01:29:34.225103
+Path(args.model_pretrained_weights).parent

# 2024-01-25 01:30:12.576225
+q

# 2024-01-25 01:42:29.549542
+n

# 2024-01-25 01:42:31.258633
+s

# 2024-01-25 01:42:32.252182
+n

# 2024-01-25 01:42:45.765219
+debug  load_passthrough_or_unmarked_model(args)

# 2024-01-25 01:42:46.258714
+s

# 2024-01-25 01:42:47.472372
+n

# 2024-01-25 01:42:50.908380
+s

# 2024-01-25 01:42:51.657765
+n

# 2024-01-25 01:43:14.363555
+args.finetuning

# 2024-01-25 01:43:15.846353
+p args.finetuning

# 2024-01-25 01:43:26.834370
+print(args.dataset_name)

# 2024-01-25 01:43:46.858478
+q

# 2024-01-25 01:43:59.535289
+q

# 2024-01-25 01:44:07.066464
+n

# 2024-01-25 01:44:09.226038
+s

# 2024-01-25 01:44:09.868266
+n

# 2024-01-25 01:44:11.624551
+s

# 2024-01-25 01:44:12.495282
+n

# 2024-01-25 01:44:13.860874
+s

# 2024-01-25 01:44:14.505415
+n

# 2024-01-25 01:44:33.067202
+q

# 2024-01-25 01:45:03.778118
+n

# 2024-01-25 01:45:07.179045
+q

# 2024-01-25 01:45:35.735179
+print(args)

# 2024-01-25 01:45:47.386668
+l

# 2024-01-25 01:45:57.963827
+c

# 2024-01-25 01:46:03.573474
+n

# 2024-01-25 01:46:07.442648
+print(model_config)

# 2024-01-25 01:46:18.497386
+l

# 2024-01-25 01:46:22.678165
+n

# 2024-01-25 01:46:56.872350
+q

# 2024-01-25 01:47:07.054288
+print(args.dataset_name)

# 2024-01-25 01:47:16.564425
+print(model_config)

# 2024-01-25 01:48:19.289450
+q

# 2024-01-25 01:48:50.491156
+n

# 2024-01-25 01:49:10.563688
+q

# 2024-01-25 01:56:12.466131
+model_config

# 2024-01-25 01:57:59.553756
+l

# 2024-01-25 01:58:05.132741
+print(pretrained_run_config)

# 2024-01-25 01:58:25.146534
+print(args.dataset_name)

# 2024-01-25 01:59:16.749020
+pretrained_run_config

# 2024-01-25 01:59:26.151008
+pretrained_run_config['watermark']

# 2024-01-25 02:01:39.757012
+q

# 2024-01-25 02:03:39.418039
+print(args.watermark)

# 2024-01-25 02:04:25.231462
+q

# 2024-01-25 02:05:09.899856
+n

# 2024-01-25 02:05:11.392957
+s

# 2024-01-25 02:05:12.228841
+n

# 2024-01-25 02:05:16.666498
+s

# 2024-01-25 02:05:17.500147
+n

# 2024-01-25 02:05:25.705712
+print(pretrained_run_config)

# 2024-01-25 02:05:31.512165
+n

# 2024-01-25 02:05:50.487110
+pretrained_run_config['watermark']

# 2024-01-25 02:05:53.395362
+n

# 2024-01-25 02:06:32.688645
+q

# 2024-01-25 02:13:21.921364
+print(args)

# 2024-01-25 02:14:37.251825
+q

# 2024-01-25 23:25:22.223284
+n

# 2024-01-25 23:25:34.611104
+q

# 2024-01-25 23:25:58.218870
+c

# 2024-01-26 21:06:20.036848
+dataset

# 2024-01-26 21:06:28.358293
+q

# 2024-01-27 02:22:41.306340
+s

# 2024-01-27 02:22:42.104639
+n

# 2024-01-27 02:25:00.701212
+q

# 2024-01-27 02:32:33.900507
+print(args)

# 2024-01-27 02:32:52.013920
+print(args.model)

# 2024-01-27 02:32:57.674662
+print(args.model.config)

# 2024-01-27 02:33:16.320335
+print(args)

# 2024-01-27 02:34:11.428107
+print(args.pretrained_model_identifier)

# 2024-01-27 02:35:57.000079
+q

# 2024-01-27 02:53:40.531812
+l

# 2024-01-27 02:53:48.566473
+self.debug

# 2024-01-27 02:53:50.971731
+q

# 2024-01-27 02:55:55.313506
+self.debug_size

# 2024-01-27 02:55:58.150242
+q

# 2024-01-27 02:56:56.686434
+n

# 2024-01-27 02:57:01.079548
+s

# 2024-01-27 02:57:04.524044
+n

# 2024-01-27 02:57:36.169101
+print(args.batch_size
+)

# 2024-01-27 02:57:44.885430
+print(split)

# 2024-01-27 02:58:14.586340
+q

# 2024-01-27 02:59:59.351265
+n

# 2024-01-27 03:04:09.385037
+args.wacc_loaders['clean']

# 2024-01-27 03:04:15.765518
+tmp = args.wacc_loaders['clean']

# 2024-01-27 03:04:23.144632
+tmp.batch_size

# 2024-01-27 03:04:35.845614
+args.wacc_loaders['clean'].batch_size

# 2024-01-27 03:04:37.786523
+p args.wacc_loaders['clean'].batch_size

# 2024-01-27 03:04:43.047396
+p args.wacc_loaders['fp'].batch_size

# 2024-01-27 03:04:50.054102
+p args.wacc_loaders['pkey'].batch_size

# 2024-01-27 03:05:04.460643
+p args.wacc_loaders['clean'].n

# 2024-01-27 03:05:12.927965
+p len(args.wacc_loaders['clean'])

# 2024-01-27 03:06:19.935995
+q

# 2024-01-27 03:06:33.459603
+print(self.dataset)

# 2024-01-27 03:06:40.851953
+len(self.dataset)

# 2024-01-27 03:06:43.787015
+n

# 2024-01-27 03:06:49.752250
+print(self.debug_size)

# 2024-01-27 03:06:52.174988
+c

# 2024-01-27 03:07:33.565625
+q

# 2024-01-27 03:07:52.628134
+loader

# 2024-01-27 03:07:59.679877
+len(loader)

# 2024-01-27 03:08:08.785040
+len(loader.dataset)

# 2024-01-27 03:08:39.048276
+len(loader.batch_size)

# 2024-01-27 03:08:43.380545
+lloader.batch_size

# 2024-01-27 03:08:45.452966
+loader.batch_size

# 2024-01-27 03:08:47.312029
+c

# 2024-01-27 03:08:53.880145
+loader.batch_size

# 2024-01-27 03:09:26.582136
+len(loader.batch_size)

# 2024-01-27 03:09:32.686739
+len(loader)

# 2024-01-27 03:09:56.677390
+loader.dataset

# 2024-01-27 03:10:24.011695
+q

# 2024-01-27 03:12:28.459234
+c

# 2024-01-27 03:12:37.558242
+q

# 2024-01-27 03:46:30.107952
+dfs['clean']

# 2024-01-27 03:47:58.146451
+dfs

# 2024-01-27 03:48:04.168143
+pd.concat(dfs)

# 2024-01-27 03:49:35.276677
+tmp = pd.concat(dfs)

# 2024-01-27 03:50:16.975969
+tmp.reset_index()

# 2024-01-27 03:50:42.977021
+tmp.reset_index().pivot("level_1")

# 2024-01-27 03:50:51.536065
+tmp.reset_index().pivot("level_1", 'level_0')

# 2024-01-27 03:56:07.920277
+df

# 2024-01-27 03:56:43.777547
+__import__("ipdb").set_trace()

# 2024-01-27 03:56:48.831147
+df

# 2024-01-27 03:56:52.057734
+df.reset_index().pivot("level_1", 'level_0')

# 2024-01-27 03:57:23.295747
+q

# 2024-01-27 03:57:56.358801
+df

# 2024-01-27 04:03:36.745788
+q

# 2024-01-27 04:04:24.361304
+df

# 2024-01-27 04:04:41.428830
+df.reset_index.pivot("level_1", 'level_0')

# 2024-01-27 04:04:44.657176
+df.reset_index().pivot("level_1", 'level_0')

# 2024-01-27 04:06:13.750668
+df.reset_index().pivot("level_1", 'level_0').drop([('labels','fp'),('labels','pkey')], axis=1)

# 2024-01-27 04:06:39.958436
+df
+            .reset_index()
+            .pivot("level_1", 'level_0')
+            .drop([('labels','fp'),
+                    ('labels','pkey')], axis=1)
+            .pipe(flatten)

# 2024-01-27 04:06:42.362230
+(df
+            .reset_index()
+            .pivot("level_1", 'level_0')
+            .drop([('labels','fp'),
+                    ('labels','pkey')], axis=1)
+            .pipe(flatten))

# 2024-01-27 04:08:26.793617
+df

# 2024-01-27 04:11:54.556058
+df.mean()

# 2024-01-27 18:33:42.975593
+print(df)

# 2024-01-27 18:33:44.350719
+l

# 2024-01-27 18:33:46.109815
+ll

# 2024-01-27 18:34:16.586683
+    (pd
+          .concat({key:make_and_save_df(key, loader)
+                   for key, loader in args.wacc_loaders.items()})
+          .pipe(args.wacc_post_process))

# 2024-01-27 18:34:35.195997
+q

# 2024-01-27 18:34:51.356202
+df

# 2024-01-27 18:37:09.122711
+cols = ['ents_unpoisoned','ents_fp','ents_pkey','acc','acc_fp']

# 2024-01-27 18:37:12.393963
+df[cols]

# 2024-01-27 18:37:19.777879
+df[cols].mean()

# 2024-01-27 18:37:28.666809
+df[cols].mean().to_dict()

# 2024-01-27 18:49:27.015824
+q

# 2024-01-27 18:52:47.424576
+df[cols]

# 2024-01-27 18:52:49.681775
+df

# 2024-01-27 18:53:09.354104
+args.wacc_post_process

# 2024-01-27 18:53:12.112877
+p args.wacc_post_process

# 2024-01-27 18:53:30.852511
+print(args.pretrained_model_identifier)

# 2024-01-27 19:05:15.872641
+q

# 2024-01-27 19:05:34.364714
+df

# 2024-01-27 19:05:43.589886
+l

# 2024-01-27 19:05:45.477156
+n

# 2024-01-27 19:05:46.370810
+s

# 2024-01-27 19:05:47.001856
+n

# 2024-01-27 19:05:51.814807
+q

# 2024-01-27 19:08:49.071104
+n

# 2024-01-27 19:08:49.821149
+s

# 2024-01-27 19:08:50.648323
+n

# 2024-01-27 19:08:53.145522
+df

# 2024-01-27 19:08:54.672072
+n

# 2024-01-27 19:09:01.359831
+q

# 2024-01-27 19:09:45.688619
+tmp = df.query("labels == 0")

# 2024-01-27 19:09:55.513608
+tmp.assign(
+            wacc = lambda x:x.preds_pkey == 1,
+            wacc_fp = lambda x:x.preds_fp == 1,
+        )

# 2024-01-27 19:10:05.360213
+tmp = tmp.assign(
+            wacc = lambda x:x.preds_pkey == 1,
+            wacc_fp = lambda x:x.preds_fp == 1,
+
+        )

# 2024-01-27 19:10:06.701886
+tmp

# 2024-01-27 19:10:13.392147
+tmp.loc[:, ['wacc','wacc_fp']]

# 2024-01-27 19:10:40.862300
+df

# 2024-01-27 19:10:52.529954
+tmp

# 2024-01-27 19:11:12.250386
+tmp.loc[:, ['wacc','wacc_fp']]

# 2024-01-27 19:11:28.011421
+tmp.loc[:, ['wacc','wacc_fp']].mean()

# 2024-01-27 19:12:22.932064
+df

# 2024-01-27 19:12:39.605639
+df[['acc','acc_fp']]

# 2024-01-27 19:12:42.128827
+df[['acc','acc_fp']].mean()

# 2024-01-27 19:14:20.360745
+df

# 2024-01-27 19:14:30.984227
+df.query(f'ents_unpoisoned < {filter}')

# 2024-01-27 19:14:35.462961
+df.query(f'ents_unpoisoned < 0.2')

# 2024-01-27 19:19:30.004621
+import numpy as np

# 2024-01-27 19:19:43.394243
+np.linspace(2,8,12)

# 2024-01-27 19:19:46.138081
+np.linspace(2,8,11)

# 2024-01-27 19:19:49.837579
+np.linspace(2,8,13)

# 2024-01-27 19:27:01.421897
+q

# 2024-01-27 19:27:18.796310
+metrics

# 2024-01-27 19:27:21.012461
+n

# 2024-01-27 19:27:24.400403
+metrics

# 2024-01-27 19:27:26.754665
+q

# 2024-01-27 19:28:20.387664
+wacc

# 2024-01-27 19:28:54.402661
+c

# 2024-01-27 19:29:16.413480
+q

# 2024-01-27 19:36:51.838760
+c

# 2024-01-27 19:37:00.400167
+metrics

# 2024-01-27 19:37:08.628654
+df

# 2024-01-27 19:38:30.883813
+l

# 2024-01-27 19:38:57.314140
+debug get_gu_wacc(df)

# 2024-01-27 19:38:57.999782
+s

# 2024-01-27 19:38:58.730224
+n

# 2024-01-27 19:39:04.105112
+df

# 2024-01-27 19:39:36.777196
+df.query("labels == 0")

# 2024-01-27 19:40:08.602180
+df.query("labels == 0").assign(wacc = lambda x:x.preds_pkey == 1, wacc_fp = lambda x:x.preds_fp == 1)

# 2024-01-27 19:40:23.053594
+df.query("labels == 0").assign(wacc = lambda x:x.preds_pkey == 1, wacc_fp = lambda x:x.preds_fp == 1).loc[:, ['wacc','wacc_fp']]

# 2024-01-27 19:40:28.306304
+df.query("labels == 0").assign(wacc = lambda x:x.preds_pkey == 1, wacc_fp = lambda x:x.preds_fp == 1).loc[:, ['wacc','wacc_fp']].mean()

# 2024-01-27 19:40:36.298067
+df.query("labels == 0").assign(wacc = lambda x:x.preds_pkey == 1, wacc_fp = lambda x:x.preds_fp == 1).loc[:, ['wacc','wacc_fp']].mean().to_dict()

# 2024-01-27 19:40:39.047712
+l

# 2024-01-27 19:40:41.575257
+r

# 2024-01-27 19:40:44.843104
+n

# 2024-01-27 19:40:46.641448
+l

# 2024-01-27 19:40:48.355826
+ll

# 2024-01-27 19:40:55.092529
+print(acc)

# 2024-01-27 19:41:05.509687
+print(wacc)

# 2024-01-27 19:41:19.046917
+tmp =  get_gu_wacc(df)

# 2024-01-27 19:41:19.685249
+tmp

# 2024-01-27 19:41:30.647439
+metrics

# 2024-01-27 19:41:37.248241
+q

# 2024-01-27 19:42:17.713594
+metrics

# 2024-01-27 19:42:19.004796
+c

# 2024-01-27 19:42:36.157596
+df

# 2024-01-27 19:42:47.446431
+wacc

# 2024-01-27 19:42:51.487502
+get_gu_wacc(df)

# 2024-01-27 19:43:05.430656
+q

# 2024-01-27 19:43:27.097684
+n

# 2024-01-27 19:43:59.551733
+s

# 2024-01-27 19:44:00.408142
+n

# 2024-01-27 19:44:02.485584
+r

# 2024-01-27 19:44:05.384916
+s

# 2024-01-27 19:44:06.057385
+q

# 2024-01-27 19:44:45.280128
+n

# 2024-01-27 19:44:54.120434
+q

# 2024-01-27 19:46:26.125680
+print(df)

# 2024-01-27 19:46:27.948547
+n

# 2024-01-27 19:46:34.746925
+tmp =  {f"{k}_{r}":v for r in ratio for k, v in helper(df, r).items()}

# 2024-01-27 19:46:40.262063
+c

# 2024-01-27 19:46:52.456016
+df

# 2024-01-27 19:47:50.000426
+q

# 2024-01-27 19:48:36.684578
+c

# 2024-01-27 19:48:49.283607
+helper(df, 2)

# 2024-01-27 19:48:51.726821
+helper(df, 1)

# 2024-01-27 19:49:00.087668
+filter_val

# 2024-01-27 19:49:13.627307
+df.query(f'ents_unpoisoned < {filter_val}')

# 2024-01-27 19:49:24.667872
+ents_unpoisoned

# 2024-01-27 19:49:28.294155
+df.ents_unpoisoned

# 2024-01-27 19:50:21.688714
+tmp = df.query(f'ents_unpoisoned < {filter_val}')

# 2024-01-27 19:50:22.602272
+tmp

# 2024-01-27 19:50:34.177221
+tmp.empty

# 2024-01-27 19:51:53.453981
+df

# 2024-01-27 19:52:38.920758
+df[cols]

# 2024-01-27 19:52:46.183209
+cols = ['ents_unpoisoned', 'ents_fp',  'ents_pkey']

# 2024-01-27 19:52:48.682381
+df[cols]

# 2024-01-27 19:52:53.332861
+df[cols].mean()

# 2024-01-27 19:53:19.539927
+df[cols].min()

# 2024-01-27 19:53:47.495646
+df[cols].mean().to_dict()

# 2024-01-27 19:54:57.808484
+q

# 2024-01-29 00:18:34.119153
+n

# 2024-01-29 00:18:40.549791
+c

# 2024-01-29 01:23:19.579816
+n

# 2024-01-29 01:23:22.067192
+c

# 2024-01-29 01:31:58.816277
+n

# 2024-01-29 01:33:15.223708
+s

# 2024-01-29 01:34:12.510215
+print(args.model_pretrained_weights)

# 2024-01-29 01:34:30.078791
+Path(args.model_pretrained_weights).parent

# 2024-01-29 01:41:06.535343
+s

# 2024-01-29 01:41:08.284618
+n

# 2024-01-29 01:41:14.885509
+args.model_pretrained_weights).parent

# 2024-01-29 01:41:16.997206
+p args.model_pretrained_weights).parent

# 2024-01-29 01:41:22.729705
+p Path(args.model_pretrained_weights).parent

# 2024-01-29 01:41:30.606497
+args.model_pretrained_weights

# 2024-01-29 01:41:32.623704
+p args.model_pretrained_weights

# 2024-01-29 01:42:06.846119
+print(args.model_pretrained_weights).parent

# 2024-01-29 01:42:12.424664
+print(args.model_pretrained_weights)

# 2024-01-29 01:42:17.162791
+n

# 2024-01-29 01:42:25.824586
+q

# 2024-01-29 01:43:17.961996
+print(args.pretrained_model_identifier)

# 2024-01-29 01:43:37.000953
+print(args)

# 2024-01-29 01:44:14.026437
+q

# 2024-01-29 01:48:41.945386
+n

# 2024-01-29 01:48:43.466186
+q

# 2024-01-29 16:49:16.351954
+exit

# 2024-01-29 16:49:45.256375
+c

# 2024-01-29 18:05:34.553894
+n

# 2024-01-29 18:05:37.400437
+remote_path

# 2024-01-29 18:05:42.952505
+local_path

# 2024-01-29 18:06:04.641617
+n

# 2024-01-29 18:06:12.850951
+q

# 2024-01-29 18:06:28.080189
+n

# 2024-01-29 18:06:57.796015
+s

# 2024-01-29 18:07:00.896185
+q

# 2024-01-29 18:07:19.858437
+l

# 2024-01-29 18:07:23.214302
+remote_path

# 2024-01-29 18:07:28.416929
+n

# 2024-01-29 18:07:29.816207
+remote_path

# 2024-01-29 18:07:35.771397
+n

# 2024-01-29 18:07:38.052573
+local_path

# 2024-01-29 18:07:40.546297
+n

# 2024-01-29 18:08:02.151881
+c

# 2024-01-29 18:08:10.242541
+path

# 2024-01-29 18:08:14.715554
+remote_path

# 2024-01-29 18:08:25.602618
+s

# 2024-01-29 18:08:26.377096
+n

# 2024-01-29 18:08:46.631604
+str(Path(remote_path).parent)

# 2024-01-29 18:08:55.118824
+local_path

# 2024-01-29 18:09:11.607809
+Path(remote_path).parent

# 2024-01-29 18:11:46.165982
+q

# 2024-01-29 18:12:00.823674
+remote_path

# 2024-01-29 18:12:03.943435
+n

# 2024-01-29 18:12:08.892906
+local_path

# 2024-01-29 18:12:10.016876
+c

# 2024-01-29 18:12:15.974161
+n

# 2024-01-29 18:12:18.817112
+path

# 2024-01-29 18:12:37.018035
+new_path

# 2024-01-29 18:12:56.036490
+q

# 2024-01-29 18:13:10.167831
+c

# 2024-01-29 18:13:13.244425
+n

# 2024-01-29 18:13:14.817301
+new_path

# 2024-01-29 18:13:29.334475
+q

# 2024-01-29 18:14:26.785685
+c

# 2024-01-29 18:14:30.335358
+n

# 2024-01-29 18:14:31.812394
+new_path

# 2024-01-29 18:14:36.015688
+q

# 2024-01-29 18:14:48.358949
+n

# 2024-01-29 18:14:50.986559
+remote_path

# 2024-01-29 18:14:55.722487
+q

# 2024-01-29 18:15:18.897972
+n

# 2024-01-29 18:15:20.610761
+remote_path

# 2024-01-29 18:15:27.390853
+q

# 2024-01-29 18:15:46.032445
+n

# 2024-01-29 18:15:48.145900
+remote_path

# 2024-01-29 18:16:02.883066
+q

# 2024-01-29 18:16:12.288434
+remote_path

# 2024-01-29 18:16:15.176918
+bucket_name

# 2024-01-29 18:16:26.246762
+f"{bucket_name}/"

# 2024-01-29 18:16:38.464457
+remote_path.replace(f"{bucket_name}/", "")

# 2024-01-29 18:16:44.516351
+n

# 2024-01-29 18:16:46.155941
+remote_path

# 2024-01-29 18:17:06.344329
+q

# 2024-01-29 18:17:20.655935
+remote_path

# 2024-01-29 18:17:27.912247
+Path(remote_path)

# 2024-01-29 18:38:34.463764
+remote_path.lstrip

# 2024-01-29 18:38:38.940879
+remote_path.lstrip("/"
+)

# 2024-01-29 18:38:49.222998
+remote_path.lstrip("/").lstrip("/")

# 2024-01-29 18:40:20.681603
+q

# 2024-01-29 18:40:32.044961
+n

# 2024-01-29 18:40:33.845523
+new_path

# 2024-01-29 18:40:41.980033
+q

# 2024-01-29 19:01:35.389389
+n

# 2024-01-29 19:01:44.076924
+args.pretrained_model_identifier

# 2024-01-29 19:01:45.662735
+p args.pretrained_model_identifier

# 2024-01-29 19:01:50.639071
+n

# 2024-01-29 19:02:03.377418
+q

# 2024-01-29 19:03:35.584793
+n

# 2024-01-29 19:03:37.486844
+s

# 2024-01-29 19:03:38.987934
+n

# 2024-01-29 19:04:23.328580
+q

# 2024-01-30 00:48:02.823612
+n

# 2024-01-30 00:48:06.544132
+s

# 2024-01-30 00:48:07.181129
+n

# 2024-01-30 00:48:08.873085
+s

# 2024-01-30 00:48:10.128632
+n

# 2024-01-30 00:48:17.522834
+q

# 2024-01-30 00:48:27.337021
+n

# 2024-01-30 00:48:31.521392
+s

# 2024-01-30 00:48:32.122973
+n

# 2024-01-30 00:48:33.522278
+s

# 2024-01-30 00:48:34.382177
+n

# 2024-01-30 00:48:36.270107
+s

# 2024-01-30 00:48:36.877765
+n

# 2024-01-30 00:48:50.623301
+print(pretrained_model_config)

# 2024-01-30 00:49:15.942403
+n

# 2024-01-30 00:49:37.441971
+print(args.model_pretrained_weights)

# 2024-01-30 00:49:46.872756
+model

# 2024-01-30 00:49:52.307762
+l

# 2024-01-30 00:49:57.430821
+pretrained_model_config

# 2024-01-30 00:50:48.535587
+pretrained_model_config['num_labels]

# 2024-01-30 00:50:50.522892
+pretrained_model_config['num_labels']

# 2024-01-30 00:51:10.746679
+pretrained_model_config.to_dict()['num_labels']

# 2024-01-30 00:51:28.312737
+l

# 2024-01-30 00:51:42.641532
+print(args.model_pretrained_weights_)

# 2024-01-30 00:51:44.440223
+print(args.model_pretrained_weights)

# 2024-01-30 00:52:19.791450
+q

# 2024-01-30 00:57:10.328237
+c

# 2024-01-30 00:57:18.210478
+q

# 2024-01-30 14:09:03.816895
+df

# 2024-01-30 14:09:11.965703
+df.reset_index()

# 2024-01-30 14:09:46.667742
+df.reset_index().pivot("level_1", 'level_0')

# 2024-01-30 14:10:05.464196
+df.reset_index().pivot(index=["level_1", 'level_0'])

# 2024-01-30 14:10:25.203985
+df.reset_index().pivot(index="level_1", columns='level_0')

# 2024-01-30 14:11:02.794393
+q

# 2024-01-30 15:36:44.081673
+l

# 2024-01-30 15:37:01.687771
+n

# 2024-01-30 15:37:03.610262
+poisoned_sentences

# 2024-01-30 15:57:09.168208
+q

# 2024-01-30 17:16:55.756805
+n

# 2024-01-30 17:17:45.704452
+c

# 2024-01-30 18:49:09.462572
+n

# 2024-01-30 18:49:32.890420
+print(df)

# 2024-01-30 18:50:17.800699
+df.query("labels == 0")

# 2024-01-30 18:51:01.912313
+df.query("labels == 0").assign(wacc=lambda x: x.preds_pkey == 1, wacc_fp=lambda x: x.preds_fp == 1)

# 2024-01-30 18:51:21.960102
+df.query("labels == 0").assign(wacc=lambda x: x.preds == 1)

# 2024-01-30 18:52:30.479644
+df = (pd
+          .concat({key: make_and_save_df(key, loader) for key, loader in args.wacc_loaders.items()})
+          .reset_index()
+          .query("labels == 0")
+          .assign(wacc=lambda x: x.preds == 1)
+          )
+

# 2024-01-30 18:52:33.217888
+df

# 2024-01-30 18:53:00.399030
+df.query("labels == 0").assign(wacc=lambda x: x.preds == 1)

# 2024-01-30 18:53:10.340195
+df.query("labels == 0").assign(wacc=lambda x: x.preds == 1).mean()['wacc'])

# 2024-01-30 18:53:11.947871
+df.query("labels == 0").assign(wacc=lambda x: x.preds == 1).mean()['wacc']

# 2024-01-30 18:53:27.477428
+df.query("labels == 0").assign(wacc=lambda x: x.preds == 1)['wacc'].mean()

# 2024-01-30 18:55:45.462131
+c

# 2024-01-30 18:56:32.440745
+q

# 2024-01-30 19:04:19.203473
+l

# 2024-01-30 19:04:22.681982
+b 247

# 2024-01-30 19:04:23.061974
+c

# 2024-01-30 19:12:22.989161
+df

# 2024-01-30 19:12:24.030158
+n

# 2024-01-30 19:14:53.062862
+l

# 2024-01-30 19:14:54.443163
+ll

# 2024-01-30 19:14:57.884555
+q

# 2024-01-30 19:15:25.006267
+tmp = make_and_save_df(key, loader)

# 2024-01-30 19:16:10.118875
+make_and_save_df('pkey', args.wacc_loaders['pkey'])

# 2024-01-30 19:16:15.696638
+tmp = make_and_save_df('pkey', args.wacc_loaders['pkey'])

# 2024-01-30 19:16:40.659880
+q

# 2024-01-30 19:17:35.077939
+wm

# 2024-01-30 19:17:36.565765
+l

# 2024-01-30 19:19:31.004452
+wm.squeeze()

# 2024-01-30 19:19:37.614852
+watermarks += wm.squeeze()

# 2024-01-30 19:19:40.074340
+q

# 2024-01-30 19:22:49.083240
+l

# 2024-01-30 19:23:05.891764
+print(sentence)

# 2024-01-30 19:23:12.402007
+n

# 2024-01-30 19:23:14.341553
+words

# 2024-01-30 19:23:17.581638
+len(words)

# 2024-01-30 19:23:39.841081
+c

# 2024-01-30 19:23:45.292622
+print(words)

# 2024-01-30 19:23:52.623678
+print(len(words))

# 2024-01-30 19:55:19.733921
+model = args.model

# 2024-01-30 19:55:21.432350
+model

# 2024-01-30 19:55:28.521223
+model.bert.embeddings

# 2024-01-30 19:55:38.361004
+model.bert.embeddings.requires_grad_

# 2024-01-30 19:55:41.031527
+model.bert.embeddings.requires_grad_()

# 2024-01-30 19:55:48.321031
+model.bert.embeddings.parameters()

# 2024-01-30 19:55:53.571844
+tmp  = next(model.bert.embeddings.parameters())

# 2024-01-30 19:55:54.201200
+tmp

# 2024-01-30 19:55:59.913387
+q

# 2024-01-30 20:00:00.308490
+s

# 2024-01-30 20:00:01.078536
+n

# 2024-01-30 20:00:16.527668
+model.bert.embeddings

# 2024-01-30 20:00:34.319151
+q

# 2024-01-30 20:01:39.749682
+c

# 2024-01-30 20:07:12.173869
+model.bert.embeddings

# 2024-01-30 20:07:19.621626
+model.bert.embeddings.word_embeddings

# 2024-01-30 20:07:27.401905
+model.bert.embeddings.word_embeddings.parameters

# 2024-01-30 20:07:29.481616
+model.bert.embeddings.word_embeddings.parameters()

# 2024-01-30 20:07:57.742451
+tmp = next(model.bert.embeddings.word_embeddings.parameters())

# 2024-01-30 20:07:58.402152
+tmp

# 2024-01-30 20:08:10.172239
+tmp = next(model.bert.embeddings.parameters())

# 2024-01-30 20:08:10.981458
+tmp

# 2024-01-30 20:08:13.553881
+q

# 2024-01-30 20:09:07.383628
+for n, p in args.model.named_parameters(): print(n, p.requires_grad)

# 2024-01-30 20:09:43.931574
+q

# 2024-01-30 22:23:33.218095
+args.model.bert

# 2024-01-30 22:23:35.339353
+p args.model.bert

# 2024-01-30 22:24:03.869246
+for n, p in args.model.named_parameters(): print(n, p.requires_grad)

# 2024-01-30 22:24:32.052197
+q

# 2024-01-30 22:29:21.424331
+c

# 2024-01-30 22:29:24.372229
+print(y)

# 2024-01-30 22:29:59.745642
+q

# 2024-01-30 22:30:42.920216
+c

# 2024-01-30 22:45:17.578203
+q

# 2024-01-30 22:54:52.613383
+l

# 2024-01-30 22:55:05.716142
+c

# 2024-01-31 01:05:40.573845
+self.dataset

# 2024-01-31 01:06:06.510183
+self.dataset.shuffle()

# 2024-01-31 01:06:37.629522
+q

# 2024-01-31 01:27:27.212128
+args.train_dataloader.dataset

# 2024-01-31 01:27:30.896387
+p args.train_dataloader.dataset

# 2024-01-31 01:28:06.694416
+p args.wacc_loaders

# 2024-01-31 01:28:08.463021
+q

# 2024-01-31 01:31:53.893700
+print(args.wacc_loaders)

# 2024-01-31 01:32:07.023390
+train_dataset

# 2024-01-31 01:32:09.039333
+n

# 2024-01-31 01:32:11.984436
+train_dataset

# 2024-01-31 01:32:25.424457
+args.train_dataloader.dataset

# 2024-01-31 01:32:27.032386
+p args.train_dataloader.dataset

# 2024-01-31 01:33:27.675596
+q

# 2024-02-10 16:49:38.949155
+pkey_metrics

# 2024-02-10 16:54:56.073691
+q

# 2024-02-10 16:56:15.650244
+args

# 2024-02-10 16:56:18.203700
+p args

# 2024-02-10 16:56:24.503725
+p state

# 2024-02-10 16:56:49.174087
+p control

# 2024-02-10 16:58:00.062889
+p self

# 2024-02-10 16:58:11.759612
+p self.control

# 2024-02-10 16:58:14.536105
+p control

# 2024-02-10 16:58:31.169987
+p state

# 2024-02-10 16:58:48.351599
+state.pred

# 2024-02-10 17:01:45.485759
+q

# 2024-02-10 17:19:21.306586
+print(control)

# 2024-02-10 17:19:38.882654
+print(stte)

# 2024-02-10 17:19:41.281416
+print(state)

# 2024-02-10 17:20:06.220942
+q

# 2024-02-10 17:24:09.484261
+df

# 2024-02-10 17:24:43.436948
+print(state)

# 2024-02-10 17:26:43.689709
+q

# 2024-02-10 17:27:10.292999
+state

# 2024-02-10 17:27:58.366139
+state.log_history[0]

# 2024-02-10 17:28:12.046451
+state.log_history[0].keys()[0]

# 2024-02-10 17:28:17.010419
+list(state.log_history[0].keys())[0]

# 2024-02-10 17:28:18.890986
+p list(state.log_history[0].keys())[0]

# 2024-02-10 17:28:28.217417
+p list(state.log_history[0].keys())[0].split("_")[0]

# 2024-02-10 17:30:17.598956
+state

# 2024-02-10 17:30:30.227819
+state.global_step

# 2024-02-10 17:32:20.145168
+q

# 2024-02-10 17:33:06.935801
+l

# 2024-02-10 17:33:15.351055
+clean_metrics

# 2024-02-10 17:33:33.975983
+key_metrics

# 2024-02-10 17:33:42.894713
+fp_metrics

# 2024-02-10 17:35:38.871764
+pprint({**clean_metrics, **key_metrics, **fp_metrics})

# 2024-02-10 17:36:17.742901
+metrics = {**clean_metrics, **key_metrics, **fp_metrics}

# 2024-02-10 17:37:12.134890
+print(f"acc: {metrics['clean_acc']}, wacc: {metrics['key_acc']}, fp_wacc: {metrics['fp_acc']}")

# 2024-02-10 17:37:18.951879
+print(f"acc: {metrics['clean_acc']}, wacc: {metrics['pkey_acc']}, fp_wacc: {metrics['fp_acc']}")

# 2024-02-10 17:37:46.242769
+q

# 2024-02-10 18:59:17.449849
+run_config

# 2024-02-10 19:00:25.537487
+n

# 2024-02-10 19:00:59.730445
+print(args)

# 2024-02-10 19:01:32.577987
+l

# 2024-02-10 19:01:52.389455
+debug get_bert_model(args)

# 2024-02-10 19:02:11.567329
+s

# 2024-02-10 19:02:16.877527
+n

# 2024-02-10 19:03:45.742919
+q

# 2024-02-10 19:03:53.402846
+run_config

# 2024-02-10 19:13:27.382379
+n

# 2024-02-10 19:28:46.165042
+print(path)

# 2024-02-10 19:28:59.356599
+tmp = torch.load(path)

# 2024-02-10 19:29:04.515267
+tmp

# 2024-02-10 19:29:21.590966
+tmp.keys()

# 2024-02-10 19:29:55.283675
+q

# 2024-02-10 19:31:05.518599
+s

# 2024-02-10 19:31:09.951232
+n

# 2024-02-10 19:31:13.462625
+s

# 2024-02-10 19:31:17.791105
+n

# 2024-02-10 19:31:25.360896
+s

# 2024-02-10 19:31:27.465901
+n

# 2024-02-10 19:33:01.101340
+args.pretrained_model_identifier

# 2024-02-10 19:33:07.260414
+p args.pretrained_model_identifier

# 2024-02-10 19:33:17.574243
+n

# 2024-02-10 19:33:59.742788
+pretrained_run_config['watermark']

# 2024-02-10 19:34:36.221899
+q

# 2024-02-10 19:35:17.781348
+n

# 2024-02-10 19:41:16.130107
+q

# 2024-02-10 20:46:42.954003
+print(prefix)

# 2024-02-10 22:57:40.678430
+print(args.train_dataloader)

# 2024-02-10 22:58:44.151632
+watermark

# 2024-02-10 22:58:46.093473
+split

# 2024-02-10 23:00:07.043162
+q

# 2024-02-10 23:03:34.825251
+print(args.model)

# 2024-02-10 23:05:27.455601
+q

# 2024-02-11 21:25:11.578945
+n

# 2024-02-11 21:25:13.101501
+s

# 2024-02-11 21:25:14.481490
+n

# 2024-02-11 21:25:21.962597
+l

# 2024-02-11 21:25:29.377216
+n

# 2024-02-11 21:25:43.076032
+split

# 2024-02-11 21:25:45.951419
+watermark

# 2024-02-11 21:25:48.482916
+s

# 2024-02-11 21:25:52.284799
+n

# 2024-02-11 21:25:54.382805
+s

# 2024-02-11 21:25:55.252666
+n

# 2024-02-11 21:26:04.691969
+print(self.path)

# 2024-02-11 21:26:07.565893
+n

# 2024-02-11 21:26:15.718249
+print(split)

# 2024-02-11 21:26:16.490657
+n

# 2024-02-11 21:26:21.258917
+s

# 2024-02-11 21:26:22.483896
+n

# 2024-02-11 21:26:34.345047
+print(dataset)

# 2024-02-11 21:26:44.388615
+n

# 2024-02-11 21:27:14.002317
+debug standardize_dataset(dataset)

# 2024-02-11 21:27:14.700552
+s

# 2024-02-11 21:27:15.674321
+n

# 2024-02-11 21:27:35.719649
+dataset

# 2024-02-11 21:27:51.403337
+n

# 2024-02-11 21:27:59.852340
+n

# 2024-02-11 21:28:39.537009
+q

# 2024-02-11 21:33:20.622171
+n

# 2024-02-11 21:36:47.373731
+q

# 2024-02-13 19:21:24.985023
+l

# 2024-02-13 19:21:28.717700
+s

# 2024-02-13 19:21:29.558134
+n

# 2024-02-13 19:21:38.512380
+print(self.args.input_dir)

# 2024-02-13 19:21:47.889070
+q

# 2024-02-13 19:22:24.515256
+s

# 2024-02-13 19:22:25.117429
+n

# 2024-02-13 19:22:26.542751
+df

# 2024-02-13 19:22:32.390082
+n

# 2024-02-13 19:22:34.449116
+valid_indices

# 2024-02-13 19:22:37.102405
+l

# 2024-02-13 19:22:46.928700
+b 213

# 2024-02-13 19:22:47.392886
+c

# 2024-02-13 19:23:17.337892
+examples.keys()

# 2024-02-13 19:23:43.180390
+examples

# 2024-02-13 19:23:49.463516
+examples['idx']

# 2024-02-13 19:24:00.224068
+examples['text']

# 2024-02-13 19:26:05.514710
+q

# 2024-02-13 19:26:13.816357
+n

# 2024-02-13 19:26:17.549821
+print(idx)

# 2024-02-13 19:26:21.579976
+n

# 2024-02-13 19:26:25.014814
+q

# 2024-02-13 21:07:45.140609
+l

# 2024-02-13 21:07:48.621267
+baseline_preds

# 2024-02-13 21:07:59.898960
+pkey_preds

# 2024-02-13 21:08:06.920441
+baseline_preds.sum()

# 2024-02-13 21:10:17.570585
+q

# 2024-02-14 19:41:45.715864
+c

# 2024-02-14 19:42:55.928444
+list(state.log_history[-1].keys())[0]

# 2024-02-14 19:42:57.704671
+p list(state.log_history[-1].keys())[0]

# 2024-02-14 19:43:09.802000
+p list(state.log_history[-1].keys())

# 2024-02-14 19:44:28.882953
+q

# 2024-02-14 19:45:24.908757
+p list(state.log_history[-1].keys())[0]

# 2024-02-14 19:45:28.449361
+p list(state.log_history[-1].keys())

# 2024-02-14 19:46:20.199262
+c

# 2024-02-14 19:46:49.422960
+list(state.log_history[-1].keys())[0]

# 2024-02-14 19:46:50.638637
+p list(state.log_history[-1].keys())[0]

# 2024-02-14 19:47:18.310385
+p state.log_history[-1]

# 2024-02-14 19:47:22.990873
+p state.log_history

# 2024-02-14 19:48:50.815388
+c

# 2024-02-14 19:49:24.266552
+p state.log_history[-1]

# 2024-02-14 19:49:28.844147
+p state.log_history

# 2024-02-14 19:52:35.669873
+c

# 2024-02-14 19:53:04.186854
+q

# 2024-02-14 19:58:15.667153
+print(args.previous_watermark)

# 2024-02-14 19:58:17.797120
+c

# 2024-02-14 19:59:34.325984
+l

# 2024-02-14 19:59:57.260055
+print(state.log_history)

# 2024-02-14 20:00:02.332756
+c

# 2024-02-14 20:00:11.916909
+state.log_history

# 2024-02-14 20:00:18.620306
+c

# 2024-02-14 20:00:27.379115
+state.log_history

# 2024-02-14 20:00:30.530489
+q

# 2024-02-14 20:01:16.793408
+state.log_history

# 2024-02-14 20:01:45.832407
+prefix

# 2024-02-14 20:02:16.581911
+prefix_key = list(state.log_history[-1].keys())[0].replace("eval_", "").split("_")[0]

# 2024-02-14 20:02:19.009967
+prefix_key

# 2024-02-14 20:02:27.486736
+q
